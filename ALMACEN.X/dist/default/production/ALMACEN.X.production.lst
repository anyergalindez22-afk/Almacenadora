

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Oct 01 16:18:12 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    37                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    38                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    39   000000                     
    40                           ; Generated 17/01/2025 GMT
    41                           ; 
    42                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution. Publication is not required when
    56                           ;        this file is used in an embedded application.
    57                           ; 
    58                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    59                           ;        software without specific prior written permission.
    60                           ; 
    61                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    62                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    63                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    64                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    65                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    66                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    67                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    68                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    69                           ; 
    70                           ; 
    71                           ; Code-generator required, PIC18F4550 Definitions
    72                           ; 
    73                           ; SFR Addresses
    74   000FE0                     bsr             equ	4064
    75   000FE9                     fsr0            equ	4073
    76   000FEA                     fsr0h           equ	4074
    77   000FE9                     fsr0l           equ	4073
    78   000FE1                     fsr1            equ	4065
    79   000FE2                     fsr1h           equ	4066
    80   000FE1                     fsr1l           equ	4065
    81   000FD9                     fsr2            equ	4057
    82   000FDA                     fsr2h           equ	4058
    83   000FD9                     fsr2l           equ	4057
    84   000FEF                     indf0           equ	4079
    85   000FE7                     indf1           equ	4071
    86   000FDF                     indf2           equ	4063
    87   000FF2                     intcon          equ	4082
    88   000000                     nvmcon          equ	0
    89   000FF9                     pcl             equ	4089
    90   000FFA                     pclath          equ	4090
    91   000FFB                     pclatu          equ	4091
    92   000FEB                     plusw0          equ	4075
    93   000FE3                     plusw1          equ	4067
    94   000FDB                     plusw2          equ	4059
    95   000FED                     postdec0        equ	4077
    96   000FE5                     postdec1        equ	4069
    97   000FDD                     postdec2        equ	4061
    98   000FEE                     postinc0        equ	4078
    99   000FE6                     postinc1        equ	4070
   100   000FDE                     postinc2        equ	4062
   101   000FEC                     preinc0         equ	4076
   102   000FE4                     preinc1         equ	4068
   103   000FDC                     preinc2         equ	4060
   104   000FF3                     prod            equ	4083
   105   000FF4                     prodh           equ	4084
   106   000FF3                     prodl           equ	4083
   107   000FD8                     status          equ	4056
   108   000FF5                     tablat          equ	4085
   109   000FF6                     tblptr          equ	4086
   110   000FF7                     tblptrh         equ	4087
   111   000FF6                     tblptrl         equ	4086
   112   000FF8                     tblptru         equ	4088
   113   000FFD                     tosl            equ	4093
   114   000FE8                     wreg            equ	4072
   115   000F62                     SPPDATA         equ	3938	;# 
   116   000F63                     SPPCFG          equ	3939	;# 
   117   000F64                     SPPEPS          equ	3940	;# 
   118   000F65                     SPPCON          equ	3941	;# 
   119   000F66                     UFRM            equ	3942	;# 
   120   000F66                     UFRML           equ	3942	;# 
   121   000F67                     UFRMH           equ	3943	;# 
   122   000F68                     UIR             equ	3944	;# 
   123   000F69                     UIE             equ	3945	;# 
   124   000F6A                     UEIR            equ	3946	;# 
   125   000F6B                     UEIE            equ	3947	;# 
   126   000F6C                     USTAT           equ	3948	;# 
   127   000F6D                     UCON            equ	3949	;# 
   128   000F6E                     UADDR           equ	3950	;# 
   129   000F6F                     UCFG            equ	3951	;# 
   130   000F70                     UEP0            equ	3952	;# 
   131   000F71                     UEP1            equ	3953	;# 
   132   000F72                     UEP2            equ	3954	;# 
   133   000F73                     UEP3            equ	3955	;# 
   134   000F74                     UEP4            equ	3956	;# 
   135   000F75                     UEP5            equ	3957	;# 
   136   000F76                     UEP6            equ	3958	;# 
   137   000F77                     UEP7            equ	3959	;# 
   138   000F78                     UEP8            equ	3960	;# 
   139   000F79                     UEP9            equ	3961	;# 
   140   000F7A                     UEP10           equ	3962	;# 
   141   000F7B                     UEP11           equ	3963	;# 
   142   000F7C                     UEP12           equ	3964	;# 
   143   000F7D                     UEP13           equ	3965	;# 
   144   000F7E                     UEP14           equ	3966	;# 
   145   000F7F                     UEP15           equ	3967	;# 
   146   000F80                     PORTA           equ	3968	;# 
   147   000F81                     PORTB           equ	3969	;# 
   148   000F82                     PORTC           equ	3970	;# 
   149   000F83                     PORTD           equ	3971	;# 
   150   000F84                     PORTE           equ	3972	;# 
   151   000F89                     LATA            equ	3977	;# 
   152   000F8A                     LATB            equ	3978	;# 
   153   000F8B                     LATC            equ	3979	;# 
   154   000F8C                     LATD            equ	3980	;# 
   155   000F8D                     LATE            equ	3981	;# 
   156   000F92                     TRISA           equ	3986	;# 
   157   000F92                     DDRA            equ	3986	;# 
   158   000F93                     TRISB           equ	3987	;# 
   159   000F93                     DDRB            equ	3987	;# 
   160   000F94                     TRISC           equ	3988	;# 
   161   000F94                     DDRC            equ	3988	;# 
   162   000F95                     TRISD           equ	3989	;# 
   163   000F95                     DDRD            equ	3989	;# 
   164   000F96                     TRISE           equ	3990	;# 
   165   000F96                     DDRE            equ	3990	;# 
   166   000F9B                     OSCTUNE         equ	3995	;# 
   167   000F9D                     PIE1            equ	3997	;# 
   168   000F9E                     PIR1            equ	3998	;# 
   169   000F9F                     IPR1            equ	3999	;# 
   170   000FA0                     PIE2            equ	4000	;# 
   171   000FA1                     PIR2            equ	4001	;# 
   172   000FA2                     IPR2            equ	4002	;# 
   173   000FA6                     EECON1          equ	4006	;# 
   174   000FA7                     EECON2          equ	4007	;# 
   175   000FA8                     EEDATA          equ	4008	;# 
   176   000FA9                     EEADR           equ	4009	;# 
   177   000FAB                     RCSTA           equ	4011	;# 
   178   000FAB                     RCSTA1          equ	4011	;# 
   179   000FAC                     TXSTA           equ	4012	;# 
   180   000FAC                     TXSTA1          equ	4012	;# 
   181   000FAD                     TXREG           equ	4013	;# 
   182   000FAD                     TXREG1          equ	4013	;# 
   183   000FAE                     RCREG           equ	4014	;# 
   184   000FAE                     RCREG1          equ	4014	;# 
   185   000FAF                     SPBRG           equ	4015	;# 
   186   000FAF                     SPBRG1          equ	4015	;# 
   187   000FB0                     SPBRGH          equ	4016	;# 
   188   000FB1                     T3CON           equ	4017	;# 
   189   000FB2                     TMR3            equ	4018	;# 
   190   000FB2                     TMR3L           equ	4018	;# 
   191   000FB3                     TMR3H           equ	4019	;# 
   192   000FB4                     CMCON           equ	4020	;# 
   193   000FB5                     CVRCON          equ	4021	;# 
   194   000FB6                     ECCP1AS         equ	4022	;# 
   195   000FB6                     CCP1AS          equ	4022	;# 
   196   000FB7                     ECCP1DEL        equ	4023	;# 
   197   000FB7                     CCP1DEL         equ	4023	;# 
   198   000FB8                     BAUDCON         equ	4024	;# 
   199   000FB8                     BAUDCTL         equ	4024	;# 
   200   000FBA                     CCP2CON         equ	4026	;# 
   201   000FBB                     CCPR2           equ	4027	;# 
   202   000FBB                     CCPR2L          equ	4027	;# 
   203   000FBC                     CCPR2H          equ	4028	;# 
   204   000FBD                     CCP1CON         equ	4029	;# 
   205   000FBD                     ECCP1CON        equ	4029	;# 
   206   000FBE                     CCPR1           equ	4030	;# 
   207   000FBE                     CCPR1L          equ	4030	;# 
   208   000FBF                     CCPR1H          equ	4031	;# 
   209   000FC0                     ADCON2          equ	4032	;# 
   210   000FC1                     ADCON1          equ	4033	;# 
   211   000FC2                     ADCON0          equ	4034	;# 
   212   000FC3                     ADRES           equ	4035	;# 
   213   000FC3                     ADRESL          equ	4035	;# 
   214   000FC4                     ADRESH          equ	4036	;# 
   215   000FC5                     SSPCON2         equ	4037	;# 
   216   000FC6                     SSPCON1         equ	4038	;# 
   217   000FC7                     SSPSTAT         equ	4039	;# 
   218   000FC8                     SSPADD          equ	4040	;# 
   219   000FC9                     SSPBUF          equ	4041	;# 
   220   000FCA                     T2CON           equ	4042	;# 
   221   000FCB                     PR2             equ	4043	;# 
   222   000FCB                     MEMCON          equ	4043	;# 
   223   000FCC                     TMR2            equ	4044	;# 
   224   000FCD                     T1CON           equ	4045	;# 
   225   000FCE                     TMR1            equ	4046	;# 
   226   000FCE                     TMR1L           equ	4046	;# 
   227   000FCF                     TMR1H           equ	4047	;# 
   228   000FD0                     RCON            equ	4048	;# 
   229   000FD1                     WDTCON          equ	4049	;# 
   230   000FD2                     HLVDCON         equ	4050	;# 
   231   000FD2                     LVDCON          equ	4050	;# 
   232   000FD3                     OSCCON          equ	4051	;# 
   233   000FD5                     T0CON           equ	4053	;# 
   234   000FD6                     TMR0            equ	4054	;# 
   235   000FD6                     TMR0L           equ	4054	;# 
   236   000FD7                     TMR0H           equ	4055	;# 
   237   000FD8                     STATUS          equ	4056	;# 
   238   000FD9                     FSR2            equ	4057	;# 
   239   000FD9                     FSR2L           equ	4057	;# 
   240   000FDA                     FSR2H           equ	4058	;# 
   241   000FDB                     PLUSW2          equ	4059	;# 
   242   000FDC                     PREINC2         equ	4060	;# 
   243   000FDD                     POSTDEC2        equ	4061	;# 
   244   000FDE                     POSTINC2        equ	4062	;# 
   245   000FDF                     INDF2           equ	4063	;# 
   246   000FE0                     BSR             equ	4064	;# 
   247   000FE1                     FSR1            equ	4065	;# 
   248   000FE1                     FSR1L           equ	4065	;# 
   249   000FE2                     FSR1H           equ	4066	;# 
   250   000FE3                     PLUSW1          equ	4067	;# 
   251   000FE4                     PREINC1         equ	4068	;# 
   252   000FE5                     POSTDEC1        equ	4069	;# 
   253   000FE6                     POSTINC1        equ	4070	;# 
   254   000FE7                     INDF1           equ	4071	;# 
   255   000FE8                     WREG            equ	4072	;# 
   256   000FE9                     FSR0            equ	4073	;# 
   257   000FE9                     FSR0L           equ	4073	;# 
   258   000FEA                     FSR0H           equ	4074	;# 
   259   000FEB                     PLUSW0          equ	4075	;# 
   260   000FEC                     PREINC0         equ	4076	;# 
   261   000FED                     POSTDEC0        equ	4077	;# 
   262   000FEE                     POSTINC0        equ	4078	;# 
   263   000FEF                     INDF0           equ	4079	;# 
   264   000FF0                     INTCON3         equ	4080	;# 
   265   000FF1                     INTCON2         equ	4081	;# 
   266   000FF2                     INTCON          equ	4082	;# 
   267   000FF3                     PROD            equ	4083	;# 
   268   000FF3                     PRODL           equ	4083	;# 
   269   000FF4                     PRODH           equ	4084	;# 
   270   000FF5                     TABLAT          equ	4085	;# 
   271   000FF6                     TBLPTR          equ	4086	;# 
   272   000FF6                     TBLPTRL         equ	4086	;# 
   273   000FF7                     TBLPTRH         equ	4087	;# 
   274   000FF8                     TBLPTRU         equ	4088	;# 
   275   000FF9                     PCLAT           equ	4089	;# 
   276   000FF9                     PC              equ	4089	;# 
   277   000FF9                     PCL             equ	4089	;# 
   278   000FFA                     PCLATH          equ	4090	;# 
   279   000FFB                     PCLATU          equ	4091	;# 
   280   000FFC                     STKPTR          equ	4092	;# 
   281   000FFD                     TOS             equ	4093	;# 
   282   000FFD                     TOSL            equ	4093	;# 
   283   000FFE                     TOSH            equ	4094	;# 
   284   000FFF                     TOSU            equ	4095	;# 
   285   000F62                     SPPDATA         equ	3938	;# 
   286   000F63                     SPPCFG          equ	3939	;# 
   287   000F64                     SPPEPS          equ	3940	;# 
   288   000F65                     SPPCON          equ	3941	;# 
   289   000F66                     UFRM            equ	3942	;# 
   290   000F66                     UFRML           equ	3942	;# 
   291   000F67                     UFRMH           equ	3943	;# 
   292   000F68                     UIR             equ	3944	;# 
   293   000F69                     UIE             equ	3945	;# 
   294   000F6A                     UEIR            equ	3946	;# 
   295   000F6B                     UEIE            equ	3947	;# 
   296   000F6C                     USTAT           equ	3948	;# 
   297   000F6D                     UCON            equ	3949	;# 
   298   000F6E                     UADDR           equ	3950	;# 
   299   000F6F                     UCFG            equ	3951	;# 
   300   000F70                     UEP0            equ	3952	;# 
   301   000F71                     UEP1            equ	3953	;# 
   302   000F72                     UEP2            equ	3954	;# 
   303   000F73                     UEP3            equ	3955	;# 
   304   000F74                     UEP4            equ	3956	;# 
   305   000F75                     UEP5            equ	3957	;# 
   306   000F76                     UEP6            equ	3958	;# 
   307   000F77                     UEP7            equ	3959	;# 
   308   000F78                     UEP8            equ	3960	;# 
   309   000F79                     UEP9            equ	3961	;# 
   310   000F7A                     UEP10           equ	3962	;# 
   311   000F7B                     UEP11           equ	3963	;# 
   312   000F7C                     UEP12           equ	3964	;# 
   313   000F7D                     UEP13           equ	3965	;# 
   314   000F7E                     UEP14           equ	3966	;# 
   315   000F7F                     UEP15           equ	3967	;# 
   316   000F80                     PORTA           equ	3968	;# 
   317   000F81                     PORTB           equ	3969	;# 
   318   000F82                     PORTC           equ	3970	;# 
   319   000F83                     PORTD           equ	3971	;# 
   320   000F84                     PORTE           equ	3972	;# 
   321   000F89                     LATA            equ	3977	;# 
   322   000F8A                     LATB            equ	3978	;# 
   323   000F8B                     LATC            equ	3979	;# 
   324   000F8C                     LATD            equ	3980	;# 
   325   000F8D                     LATE            equ	3981	;# 
   326   000F92                     TRISA           equ	3986	;# 
   327   000F92                     DDRA            equ	3986	;# 
   328   000F93                     TRISB           equ	3987	;# 
   329   000F93                     DDRB            equ	3987	;# 
   330   000F94                     TRISC           equ	3988	;# 
   331   000F94                     DDRC            equ	3988	;# 
   332   000F95                     TRISD           equ	3989	;# 
   333   000F95                     DDRD            equ	3989	;# 
   334   000F96                     TRISE           equ	3990	;# 
   335   000F96                     DDRE            equ	3990	;# 
   336   000F9B                     OSCTUNE         equ	3995	;# 
   337   000F9D                     PIE1            equ	3997	;# 
   338   000F9E                     PIR1            equ	3998	;# 
   339   000F9F                     IPR1            equ	3999	;# 
   340   000FA0                     PIE2            equ	4000	;# 
   341   000FA1                     PIR2            equ	4001	;# 
   342   000FA2                     IPR2            equ	4002	;# 
   343   000FA6                     EECON1          equ	4006	;# 
   344   000FA7                     EECON2          equ	4007	;# 
   345   000FA8                     EEDATA          equ	4008	;# 
   346   000FA9                     EEADR           equ	4009	;# 
   347   000FAB                     RCSTA           equ	4011	;# 
   348   000FAB                     RCSTA1          equ	4011	;# 
   349   000FAC                     TXSTA           equ	4012	;# 
   350   000FAC                     TXSTA1          equ	4012	;# 
   351   000FAD                     TXREG           equ	4013	;# 
   352   000FAD                     TXREG1          equ	4013	;# 
   353   000FAE                     RCREG           equ	4014	;# 
   354   000FAE                     RCREG1          equ	4014	;# 
   355   000FAF                     SPBRG           equ	4015	;# 
   356   000FAF                     SPBRG1          equ	4015	;# 
   357   000FB0                     SPBRGH          equ	4016	;# 
   358   000FB1                     T3CON           equ	4017	;# 
   359   000FB2                     TMR3            equ	4018	;# 
   360   000FB2                     TMR3L           equ	4018	;# 
   361   000FB3                     TMR3H           equ	4019	;# 
   362   000FB4                     CMCON           equ	4020	;# 
   363   000FB5                     CVRCON          equ	4021	;# 
   364   000FB6                     ECCP1AS         equ	4022	;# 
   365   000FB6                     CCP1AS          equ	4022	;# 
   366   000FB7                     ECCP1DEL        equ	4023	;# 
   367   000FB7                     CCP1DEL         equ	4023	;# 
   368   000FB8                     BAUDCON         equ	4024	;# 
   369   000FB8                     BAUDCTL         equ	4024	;# 
   370   000FBA                     CCP2CON         equ	4026	;# 
   371   000FBB                     CCPR2           equ	4027	;# 
   372   000FBB                     CCPR2L          equ	4027	;# 
   373   000FBC                     CCPR2H          equ	4028	;# 
   374   000FBD                     CCP1CON         equ	4029	;# 
   375   000FBD                     ECCP1CON        equ	4029	;# 
   376   000FBE                     CCPR1           equ	4030	;# 
   377   000FBE                     CCPR1L          equ	4030	;# 
   378   000FBF                     CCPR1H          equ	4031	;# 
   379   000FC0                     ADCON2          equ	4032	;# 
   380   000FC1                     ADCON1          equ	4033	;# 
   381   000FC2                     ADCON0          equ	4034	;# 
   382   000FC3                     ADRES           equ	4035	;# 
   383   000FC3                     ADRESL          equ	4035	;# 
   384   000FC4                     ADRESH          equ	4036	;# 
   385   000FC5                     SSPCON2         equ	4037	;# 
   386   000FC6                     SSPCON1         equ	4038	;# 
   387   000FC7                     SSPSTAT         equ	4039	;# 
   388   000FC8                     SSPADD          equ	4040	;# 
   389   000FC9                     SSPBUF          equ	4041	;# 
   390   000FCA                     T2CON           equ	4042	;# 
   391   000FCB                     PR2             equ	4043	;# 
   392   000FCB                     MEMCON          equ	4043	;# 
   393   000FCC                     TMR2            equ	4044	;# 
   394   000FCD                     T1CON           equ	4045	;# 
   395   000FCE                     TMR1            equ	4046	;# 
   396   000FCE                     TMR1L           equ	4046	;# 
   397   000FCF                     TMR1H           equ	4047	;# 
   398   000FD0                     RCON            equ	4048	;# 
   399   000FD1                     WDTCON          equ	4049	;# 
   400   000FD2                     HLVDCON         equ	4050	;# 
   401   000FD2                     LVDCON          equ	4050	;# 
   402   000FD3                     OSCCON          equ	4051	;# 
   403   000FD5                     T0CON           equ	4053	;# 
   404   000FD6                     TMR0            equ	4054	;# 
   405   000FD6                     TMR0L           equ	4054	;# 
   406   000FD7                     TMR0H           equ	4055	;# 
   407   000FD8                     STATUS          equ	4056	;# 
   408   000FD9                     FSR2            equ	4057	;# 
   409   000FD9                     FSR2L           equ	4057	;# 
   410   000FDA                     FSR2H           equ	4058	;# 
   411   000FDB                     PLUSW2          equ	4059	;# 
   412   000FDC                     PREINC2         equ	4060	;# 
   413   000FDD                     POSTDEC2        equ	4061	;# 
   414   000FDE                     POSTINC2        equ	4062	;# 
   415   000FDF                     INDF2           equ	4063	;# 
   416   000FE0                     BSR             equ	4064	;# 
   417   000FE1                     FSR1            equ	4065	;# 
   418   000FE1                     FSR1L           equ	4065	;# 
   419   000FE2                     FSR1H           equ	4066	;# 
   420   000FE3                     PLUSW1          equ	4067	;# 
   421   000FE4                     PREINC1         equ	4068	;# 
   422   000FE5                     POSTDEC1        equ	4069	;# 
   423   000FE6                     POSTINC1        equ	4070	;# 
   424   000FE7                     INDF1           equ	4071	;# 
   425   000FE8                     WREG            equ	4072	;# 
   426   000FE9                     FSR0            equ	4073	;# 
   427   000FE9                     FSR0L           equ	4073	;# 
   428   000FEA                     FSR0H           equ	4074	;# 
   429   000FEB                     PLUSW0          equ	4075	;# 
   430   000FEC                     PREINC0         equ	4076	;# 
   431   000FED                     POSTDEC0        equ	4077	;# 
   432   000FEE                     POSTINC0        equ	4078	;# 
   433   000FEF                     INDF0           equ	4079	;# 
   434   000FF0                     INTCON3         equ	4080	;# 
   435   000FF1                     INTCON2         equ	4081	;# 
   436   000FF2                     INTCON          equ	4082	;# 
   437   000FF3                     PROD            equ	4083	;# 
   438   000FF3                     PRODL           equ	4083	;# 
   439   000FF4                     PRODH           equ	4084	;# 
   440   000FF5                     TABLAT          equ	4085	;# 
   441   000FF6                     TBLPTR          equ	4086	;# 
   442   000FF6                     TBLPTRL         equ	4086	;# 
   443   000FF7                     TBLPTRH         equ	4087	;# 
   444   000FF8                     TBLPTRU         equ	4088	;# 
   445   000FF9                     PCLAT           equ	4089	;# 
   446   000FF9                     PC              equ	4089	;# 
   447   000FF9                     PCL             equ	4089	;# 
   448   000FFA                     PCLATH          equ	4090	;# 
   449   000FFB                     PCLATU          equ	4091	;# 
   450   000FFC                     STKPTR          equ	4092	;# 
   451   000FFD                     TOS             equ	4093	;# 
   452   000FFD                     TOSL            equ	4093	;# 
   453   000FFE                     TOSH            equ	4094	;# 
   454   000FFF                     TOSU            equ	4095	;# 
   455                           
   456                           	psect	smallconst
   457   000800                     __psmallconst:
   458                           	callstack 0
   459   000800  00                 	db	0
   460   000801                     _figura_2:
   461                           	callstack 0
   462   000801  1B                 	db	27
   463   000802  11                 	db	17
   464   000803  1F                 	db	31
   465   000804  1F                 	db	31
   466   000805  1F                 	db	31
   467   000806  11                 	db	17
   468   000807  1B                 	db	27
   469   000808  00                 	db	0
   470   000809                     __end_of_figura_2:
   471                           	callstack 0
   472   000809                     _figura_1:
   473                           	callstack 0
   474   000809  1B                 	db	27
   475   00080A  11                 	db	17
   476   00080B  11                 	db	17
   477   00080C  11                 	db	17
   478   00080D  11                 	db	17
   479   00080E  11                 	db	17
   480   00080F  1B                 	db	27
   481   000810  1F                 	db	31
   482   000811                     __end_of_figura_1:
   483                           	callstack 0
   484   000F95                     _TRISDbits      set	3989
   485   000F8D                     _LATEbits       set	3981
   486   000F8B                     _LATCbits       set	3979
   487   000F81                     _PORTBbits      set	3969
   488   000F81                     _PORTB          set	3969
   489   000FD5                     _T0CONbits      set	4053
   490   000FD6                     _TMR0L          set	4054
   491   000F82                     _PORTCbits      set	3970
   492   000F8C                     _LATDbits       set	3980
   493   000F80                     _PORTAbits      set	3968
   494   000FF2                     _INTCON         set	4082
   495   000FD5                     _T0CON          set	4053
   496   000FF1                     _INTCON2bits    set	4081
   497   000FF2                     _INTCONbits     set	4082
   498   000FD0                     _RCONbits       set	4048
   499   000F8D                     _LATE           set	3981
   500   000F8C                     _LATD           set	3980
   501   000F8B                     _LATC           set	3979
   502   000F8A                     _LATB           set	3978
   503   000F89                     _LATA           set	3977
   504   000F94                     _TRISCbits      set	3988
   505   000F94                     _TRISC          set	3988
   506   000F96                     _TRISE          set	3990
   507   000F95                     _TRISD          set	3989
   508   000F92                     _TRISA          set	3986
   509   000F93                     _TRISB          set	3987
   510   000FC1                     _ADCON1bits     set	4033
   511   000811                     STR_2:
   512   000811  42                 	db	66	;'B'
   513   000812  6C                 	db	108	;'l'
   514   000813  61                 	db	97	;'a'
   515   000814  6E                 	db	110	;'n'
   516   000815  63                 	db	99	;'c'
   517   000816  61                 	db	97	;'a'
   518   000817  73                 	db	115	;'s'
   519   000818  00                 	db	0
   520   000819                     STR_1:
   521   000819  4E                 	db	78	;'N'
   522   00081A  65                 	db	101	;'e'
   523   00081B  67                 	db	103	;'g'
   524   00081C  72                 	db	114	;'r'
   525   00081D  61                 	db	97	;'a'
   526   00081E  73                 	db	115	;'s'
   527   00081F  00                 	db	0
   528   000820                     STR_3:
   529   000820  4D                 	db	77	;'M'
   530   000821  65                 	db	101	;'e'
   531   000822  74                 	db	116	;'t'
   532   000823  61                 	db	97	;'a'
   533   000824  6C                 	db	108	;'l'
   534   000825  00                 	db	0
   535   000826  00                 	db	0	; dummy byte at the end
   536   000800                     __smallconst    set	__psmallconst
   537   000800                     __mediumconst   set	__psmallconst
   538   000002                     __activetblptr  equ	2
   539                           
   540                           ; #config settings
   541                           
   542                           	psect	cinit
   543   0011BE                     __pcinit:
   544                           	callstack 0
   545   0011BE                     start_initialization:
   546                           	callstack 0
   547   0011BE                     __initialization:
   548                           	callstack 0
   549                           
   550                           ; Clear objects allocated to COMRAM (29 bytes)
   551   0011BE  EE00  F01F         	lfsr	0,__pbssCOMRAM
   552   0011C2  0E1D               	movlw	29
   553   0011C4                     clear_0:
   554   0011C4  6AEE               	clrf	postinc0,c
   555   0011C6  06E8               	decf	wreg,f,c
   556   0011C8  E1FD               	bnz	clear_0
   557   0011CA                     end_of_initialization:
   558                           	callstack 0
   559   0011CA                     __end_of__initialization:
   560                           	callstack 0
   561   0011CA  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   562   0011CC  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   563   0011CE  0E00               	movlw	low (__Lmediumconst shr (0+16))
   564   0011D0  6EF8               	movwf	tblptru,c
   565   0011D2  0100               	movlb	0
   566   0011D4  EFA2  F005         	goto	_main	;jump to C main() function
   567                           
   568                           	psect	bssCOMRAM
   569   00001F                     __pbssCOMRAM:
   570                           	callstack 0
   571   00001F                     _Fila3:
   572                           	callstack 0
   573   00001F                     	ds	8
   574   000027                     _Fila2:
   575                           	callstack 0
   576   000027                     	ds	8
   577   00002F                     _Fila1:
   578                           	callstack 0
   579   00002F                     	ds	8
   580   000037                     _c:
   581                           	callstack 0
   582   000037                     	ds	1
   583   000038                     _f:
   584                           	callstack 0
   585   000038                     	ds	1
   586   000039                     _NEGRA:
   587                           	callstack 0
   588   000039                     	ds	1
   589   00003A                     _BLANCA:
   590                           	callstack 0
   591   00003A                     	ds	1
   592   00003B                     _METAL:
   593                           	callstack 0
   594   00003B                     	ds	1
   595                           
   596                           	psect	cstackCOMRAM
   597   000001                     __pcstackCOMRAM:
   598                           	callstack 0
   599   000001                     i1Lcd_Port@a:
   600                           	callstack 0
   601   000001                     
   602                           ; 1 bytes @ 0x0
   603   000001                     	ds	1
   604   000002                     ??i1_Lcd_Cmd:
   605                           
   606                           ; 1 bytes @ 0x1
   607   000002                     	ds	1
   608   000003                     i1Lcd_Cmd@a:
   609                           	callstack 0
   610                           
   611                           ; 1 bytes @ 0x2
   612   000003                     	ds	1
   613   000004                     i1Lcd_Set_Cursor@b:
   614                           	callstack 0
   615   000004                     
   616                           ; 1 bytes @ 0x3
   617   000004                     	ds	1
   618   000005                     i1Lcd_Set_Cursor@a:
   619                           	callstack 0
   620   000005                     
   621                           ; 1 bytes @ 0x4
   622   000005                     	ds	1
   623   000006                     i1Lcd_Set_Cursor@z:
   624                           	callstack 0
   625                           
   626                           ; 1 bytes @ 0x5
   627   000006                     	ds	1
   628   000007                     i1Lcd_Set_Cursor@y:
   629                           	callstack 0
   630                           
   631                           ; 1 bytes @ 0x6
   632   000007                     	ds	1
   633   000008                     i1Lcd_Set_Cursor@temp:
   634                           	callstack 0
   635                           
   636                           ; 1 bytes @ 0x7
   637   000008                     	ds	1
   638   000009                     ??_LowISR:
   639                           
   640                           ; 1 bytes @ 0x8
   641   000009                     	ds	3
   642   00000C                     LowISR@dummy:
   643                           	callstack 0
   644                           
   645                           ; 1 bytes @ 0xB
   646   00000C                     	ds	1
   647   00000D                     Lcd_Port@a:
   648                           	callstack 0
   649   00000D                     ??_dejar:
   650   00000D                     
   651                           ; 1 bytes @ 0xC
   652   00000D                     	ds	1
   653   00000E                     Lcd_Write_Char@temp:
   654                           	callstack 0
   655   00000E                     ??_Lcd_Cmd:
   656                           
   657                           ; 1 bytes @ 0xD
   658   00000E                     	ds	1
   659   00000F                     Lcd_Cmd@a:
   660                           	callstack 0
   661   00000F                     Lcd_Write_Char@y:
   662                           	callstack 0
   663                           
   664                           ; 1 bytes @ 0xE
   665   00000F                     	ds	1
   666   000010                     Lcd_Set_Cursor@b:
   667                           	callstack 0
   668   000010                     Lcd_Write_Char@a:
   669                           	callstack 0
   670   000010                     ??_Lcd_Init:
   671   000010                     
   672                           ; 1 bytes @ 0xF
   673   000010                     	ds	1
   674   000011                     Lcd_Set_Cursor@a:
   675                           	callstack 0
   676   000011                     Lcd_Write_String@a:
   677                           	callstack 0
   678   000011                     Lcd_CGRAM_CreateChar@chardata:
   679                           	callstack 0
   680   000011                     
   681                           ; 1 bytes @ 0x10
   682   000011                     	ds	1
   683   000012                     Lcd_Set_Cursor@z:
   684                           	callstack 0
   685   000012                     ??_Lcd_CGRAM_CreateChar:
   686   000012                     ??_Lcd_Write_String:
   687                           
   688                           ; 1 bytes @ 0x11
   689   000012                     	ds	1
   690   000013                     Lcd_Set_Cursor@y:
   691                           	callstack 0
   692   000013                     Lcd_CGRAM_CreateChar@add:
   693                           	callstack 0
   694   000013                     Lcd_Write_String@i:
   695                           	callstack 0
   696                           
   697                           ; 2 bytes @ 0x12
   698   000013                     	ds	1
   699   000014                     Lcd_Set_Cursor@temp:
   700                           	callstack 0
   701   000014                     Lcd_CGRAM_CreateChar@i:
   702                           	callstack 0
   703                           
   704                           ; 1 bytes @ 0x13
   705   000014                     	ds	1
   706   000015                     Lcd_CGRAM_CreateChar@i_850:
   707                           	callstack 0
   708   000015                     
   709                           ; 1 bytes @ 0x14
   710   000015                     	ds	1
   711   000016                     Lcd_CGRAM_CreateChar@i_851:
   712                           	callstack 0
   713                           
   714                           ; 1 bytes @ 0x15
   715   000016                     	ds	1
   716   000017                     Lcd_CGRAM_CreateChar@i_852:
   717                           	callstack 0
   718   000017                     Actualizar_Matriz@i:
   719                           	callstack 0
   720                           
   721                           ; 2 bytes @ 0x16
   722   000017                     	ds	1
   723   000018                     Lcd_CGRAM_CreateChar@i_853:
   724                           	callstack 0
   725                           
   726                           ; 1 bytes @ 0x17
   727   000018                     	ds	1
   728   000019                     Lcd_CGRAM_CreateChar@i_854:
   729                           	callstack 0
   730   000019                     Actualizar_Matriz@i_671:
   731                           	callstack 0
   732                           
   733                           ; 2 bytes @ 0x18
   734   000019                     	ds	1
   735   00001A                     Lcd_CGRAM_CreateChar@i_855:
   736                           	callstack 0
   737                           
   738                           ; 1 bytes @ 0x19
   739   00001A                     	ds	1
   740   00001B                     Lcd_CGRAM_CreateChar@i_856:
   741                           	callstack 0
   742   00001B                     Actualizar_Matriz@i_672:
   743                           	callstack 0
   744                           
   745                           ; 2 bytes @ 0x1A
   746   00001B                     	ds	2
   747   00001D                     ??_main:
   748                           
   749                           ; 1 bytes @ 0x1C
   750   00001D                     	ds	2
   751                           
   752 ;;
   753 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   754 ;;
   755 ;; *************** function _main *****************
   756 ;; Defined at:
   757 ;;		line 208 in file "ASCENSOR.c"
   758 ;; Parameters:    Size  Location     Type
   759 ;;		None
   760 ;; Auto vars:     Size  Location     Type
   761 ;;		None
   762 ;; Return value:  Size  Location     Type
   763 ;;                  1    wreg      void 
   764 ;; Registers used:
   765 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   766 ;; Tracked objects:
   767 ;;		On entry : 0/0
   768 ;;		On exit  : 0/0
   769 ;;		Unchanged: 0/0
   770 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   771 ;;      Params:         0       0       0       0       0       0       0       0       0
   772 ;;      Locals:         0       0       0       0       0       0       0       0       0
   773 ;;      Temps:          2       0       0       0       0       0       0       0       0
   774 ;;      Totals:         2       0       0       0       0       0       0       0       0
   775 ;;Total ram usage:        2 bytes
   776 ;; Hardware stack levels required when called: 9
   777 ;; This function calls:
   778 ;;		_Actualizar_Matriz
   779 ;;		_Lcd_CGRAM_Close
   780 ;;		_Lcd_CGRAM_CreateChar
   781 ;;		_Lcd_CGRAM_Init
   782 ;;		_Lcd_Clear
   783 ;;		_Lcd_Init
   784 ;;		_Lcd_Set_Cursor
   785 ;;		_Lcd_Write_Char
   786 ;;		_Lcd_Write_String
   787 ;;		_Modificar
   788 ;;		_dejar
   789 ;;		_detectar
   790 ;;		_init_int
   791 ;;		_init_ports
   792 ;;		_reposo
   793 ;; This function is called by:
   794 ;;		Startup code after reset
   795 ;; This function uses a non-reentrant model
   796 ;;
   797                           
   798                           	psect	text0
   799   000B44                     __ptext0:
   800                           	callstack 0
   801   000B44                     _main:
   802                           	callstack 22
   803   000B44                     
   804                           ;ASCENSOR.c: 209:     init_ports();
   805   000B44  ECD0  F008         	call	_init_ports	;wreg free
   806                           
   807                           ;ASCENSOR.c: 210:     init_int();
   808   000B48  ECEC  F008         	call	_init_int	;wreg free
   809                           
   810                           ;ASCENSOR.c: 211:     Lcd_Init();
   811   000B4C  EC4A  F007         	call	_Lcd_Init	;wreg free
   812                           
   813                           ;ASCENSOR.c: 212:     Lcd_CGRAM_Init();
   814   000B50  EC0D  F009         	call	_Lcd_CGRAM_Init	;wreg free
   815   000B54                     
   816                           ;ASCENSOR.c: 213:     Lcd_CGRAM_CreateChar(0,figura_1);
   817   000B54  0E09               	movlw	low _figura_1
   818   000B56  6E11               	movwf	Lcd_CGRAM_CreateChar@chardata^0,c
   819   000B58  0E00               	movlw	0
   820   000B5A  EC14  F004         	call	_Lcd_CGRAM_CreateChar
   821   000B5E                     
   822                           ;ASCENSOR.c: 214:     Lcd_CGRAM_CreateChar(1,figura_2);
   823   000B5E  0E01               	movlw	low _figura_2
   824   000B60  6E11               	movwf	Lcd_CGRAM_CreateChar@chardata^0,c
   825   000B62  0E01               	movlw	1
   826   000B64  EC14  F004         	call	_Lcd_CGRAM_CreateChar
   827                           
   828                           ;ASCENSOR.c: 215:     Lcd_CGRAM_Close();
   829   000B68  EC14  F009         	call	_Lcd_CGRAM_Close	;wreg free
   830                           
   831                           ;ASCENSOR.c: 216:     Lcd_Clear();
   832   000B6C  EC06  F009         	call	_Lcd_Clear	;wreg free
   833   000B70                     
   834                           ;ASCENSOR.c: 217:     Lcd_Set_Cursor(1,1);
   835   000B70  0E01               	movlw	1
   836   000B72  6E10               	movwf	Lcd_Set_Cursor@b^0,c
   837   000B74  0E01               	movlw	1
   838   000B76  EC33  F006         	call	_Lcd_Set_Cursor
   839   000B7A                     
   840                           ;ASCENSOR.c: 218:     Lcd_Write_String("Negras");
   841   000B7A  0E19               	movlw	low STR_1
   842   000B7C  6E11               	movwf	Lcd_Write_String@a^0,c
   843   000B7E  EC4E  F008         	call	_Lcd_Write_String	;wreg free
   844   000B82                     
   845                           ;ASCENSOR.c: 219:     Lcd_Set_Cursor(2,1);
   846   000B82  0E01               	movlw	1
   847   000B84  6E10               	movwf	Lcd_Set_Cursor@b^0,c
   848   000B86  0E02               	movlw	2
   849   000B88  EC33  F006         	call	_Lcd_Set_Cursor
   850   000B8C                     
   851                           ;ASCENSOR.c: 220:     Lcd_Write_String("Blancas");
   852   000B8C  0E11               	movlw	low STR_2
   853   000B8E  6E11               	movwf	Lcd_Write_String@a^0,c
   854   000B90  EC4E  F008         	call	_Lcd_Write_String	;wreg free
   855   000B94                     
   856                           ;ASCENSOR.c: 221:     Lcd_Set_Cursor(3,1);
   857   000B94  0E01               	movlw	1
   858   000B96  6E10               	movwf	Lcd_Set_Cursor@b^0,c
   859   000B98  0E03               	movlw	3
   860   000B9A  EC33  F006         	call	_Lcd_Set_Cursor
   861   000B9E                     
   862                           ;ASCENSOR.c: 222:     Lcd_Write_String("Metal");
   863   000B9E  0E20               	movlw	low STR_3
   864   000BA0  6E11               	movwf	Lcd_Write_String@a^0,c
   865   000BA2  EC4E  F008         	call	_Lcd_Write_String	;wreg free
   866   000BA6                     
   867                           ;ASCENSOR.c: 223:     _delay((unsigned long)((200)*(4000000/4000.0)));
   868   000BA6  0E02               	movlw	2
   869   000BA8  6E1E               	movwf	(??_main+1)^0,c
   870   000BAA  0E04               	movlw	4
   871   000BAC  6E1D               	movwf	??_main^0,c
   872   000BAE  0EBA               	movlw	186
   873   000BB0                     u1097:
   874   000BB0  2EE8               	decfsz	wreg,f,c
   875   000BB2  D7FE               	bra	u1097
   876   000BB4  2E1D               	decfsz	??_main^0,f,c
   877   000BB6  D7FC               	bra	u1097
   878   000BB8  2E1E               	decfsz	(??_main+1)^0,f,c
   879   000BBA  D7FA               	bra	u1097
   880   000BBC  D000               	nop2	
   881   000BBE                     l1800:
   882                           
   883                           ;ASCENSOR.c: 226:         Actualizar_Matriz();
   884   000BBE  EC08  F005         	call	_Actualizar_Matriz	;wreg free
   885   000BC2                     
   886                           ;ASCENSOR.c: 227:         INTCONbits.GIEL=1;
   887   000BC2  8CF2               	bsf	242,6,c	;volatile
   888                           
   889                           ;ASCENSOR.c: 228:     while(PORTBbits.RB0==0){
   890   000BC4  EF04  F006         	goto	l1814
   891   000BC8                     l174:
   892                           
   893                           ;ASCENSOR.c: 229:   if(PORTAbits.RA2==1 || PORTAbits.RA1==1){
   894   000BC8  B480               	btfsc	128,2,c	;volatile
   895   000BCA  EFE9  F005         	goto	u1011
   896   000BCE  EFEB  F005         	goto	u1010
   897   000BD2                     u1011:
   898   000BD2  EFF2  F005         	goto	l1806
   899   000BD6                     u1010:
   900   000BD6  A280               	btfss	128,1,c	;volatile
   901   000BD8  EFF0  F005         	goto	u1021
   902   000BDC  EFF2  F005         	goto	u1020
   903   000BE0                     u1021:
   904   000BE0  EFF4  F005         	goto	l1808
   905   000BE4                     u1020:
   906   000BE4                     l1806:
   907                           
   908                           ;ASCENSOR.c: 230:       reposo();
   909   000BE4  EC73  F008         	call	_reposo	;wreg free
   910   000BE8                     l1808:
   911                           
   912                           ;ASCENSOR.c: 232:         if( PORTBbits.RB2==1 || PORTBbits.RB3==1){
   913   000BE8  B481               	btfsc	129,2,c	;volatile
   914   000BEA  EFF9  F005         	goto	u1031
   915   000BEE  EFFB  F005         	goto	u1030
   916   000BF2                     u1031:
   917   000BF2  EF02  F006         	goto	l1812
   918   000BF6                     u1030:
   919   000BF6  A681               	btfss	129,3,c	;volatile
   920   000BF8  EF00  F006         	goto	u1041
   921   000BFC  EF02  F006         	goto	u1040
   922   000C00                     u1041:
   923   000C00  EF04  F006         	goto	l1814
   924   000C04                     u1040:
   925   000C04                     l1812:
   926                           
   927                           ;ASCENSOR.c: 233:             Modificar();
   928   000C04  EC27  F008         	call	_Modificar	;wreg free
   929   000C08                     l1814:
   930                           
   931                           ;ASCENSOR.c: 228:     while(PORTBbits.RB0==0){
   932   000C08  A081               	btfss	129,0,c	;volatile
   933   000C0A  EF09  F006         	goto	u1051
   934   000C0E  EF0B  F006         	goto	u1050
   935   000C12                     u1051:
   936   000C12  EFE4  F005         	goto	l174
   937   000C16                     u1050:
   938   000C16                     
   939                           ;ASCENSOR.c: 236:     Lcd_Set_Cursor(2,1);
   940   000C16  0E01               	movlw	1
   941   000C18  6E10               	movwf	Lcd_Set_Cursor@b^0,c
   942   000C1A  0E02               	movlw	2
   943   000C1C  EC33  F006         	call	_Lcd_Set_Cursor
   944                           
   945                           ;ASCENSOR.c: 237:     Lcd_Write_Char(1);
   946   000C20  0E01               	movlw	1
   947   000C22  EC94  F008         	call	_Lcd_Write_Char
   948   000C26                     
   949                           ;ASCENSOR.c: 238:     detectar();
   950   000C26  EC8B  F007         	call	_detectar	;wreg free
   951   000C2A                     
   952                           ;ASCENSOR.c: 239:     if(METAL==1 || BLANCA==1 || NEGRA==1){
   953   000C2A  043B               	decf	_METAL^0,w,c
   954   000C2C  B4D8               	btfsc	status,2,c
   955   000C2E  EF1B  F006         	goto	u1061
   956   000C32  EF1D  F006         	goto	u1060
   957   000C36                     u1061:
   958   000C36  EF2D  F006         	goto	l1826
   959   000C3A                     u1060:
   960   000C3A  043A               	decf	_BLANCA^0,w,c
   961   000C3C  B4D8               	btfsc	status,2,c
   962   000C3E  EF23  F006         	goto	u1071
   963   000C42  EF25  F006         	goto	u1070
   964   000C46                     u1071:
   965   000C46  EF2D  F006         	goto	l1826
   966   000C4A                     u1070:
   967   000C4A  0439               	decf	_NEGRA^0,w,c
   968   000C4C  A4D8               	btfss	status,2,c
   969   000C4E  EF2B  F006         	goto	u1081
   970   000C52  EF2D  F006         	goto	u1080
   971   000C56                     u1081:
   972   000C56  EFDF  F005         	goto	l1800
   973   000C5A                     u1080:
   974   000C5A                     l1826:
   975                           
   976                           ;ASCENSOR.c: 240:     dejar();
   977   000C5A  EC05  F007         	call	_dejar	;wreg free
   978                           
   979                           ;ASCENSOR.c: 241:      }
   980   000C5E  EFDF  F005         	goto	l1800
   981   000C62  EF6C  F000         	goto	start
   982   000C66                     __end_of_main:
   983                           	callstack 0
   984                           
   985 ;; *************** function _reposo *****************
   986 ;; Defined at:
   987 ;;		line 72 in file "ASCENSOR.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;		None
   990 ;; Auto vars:     Size  Location     Type
   991 ;;		None
   992 ;; Return value:  Size  Location     Type
   993 ;;                  1    wreg      void 
   994 ;; Registers used:
   995 ;;		None
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1001 ;;      Params:         0       0       0       0       0       0       0       0       0
  1002 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1003 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1004 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1005 ;;Total ram usage:        0 bytes
  1006 ;; Hardware stack levels used: 1
  1007 ;; Hardware stack levels required when called: 5
  1008 ;; This function calls:
  1009 ;;		Nothing
  1010 ;; This function is called by:
  1011 ;;		_main
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           	psect	text1
  1016   0010E6                     __ptext1:
  1017                           	callstack 0
  1018   0010E6                     _reposo:
  1019                           	callstack 25
  1020   0010E6                     
  1021                           ;ASCENSOR.c: 73:  if(PORTAbits.RA1==1){
  1022   0010E6  A280               	btfss	128,1,c	;volatile
  1023   0010E8  EF78  F008         	goto	u131
  1024   0010EC  EF7A  F008         	goto	u130
  1025   0010F0                     u131:
  1026   0010F0  EF83  F008         	goto	l101
  1027   0010F4                     u130:
  1028   0010F4                     
  1029                           ;ASCENSOR.c: 74:   LATDbits.LATD3=1;
  1030   0010F4  868C               	bsf	140,3,c	;volatile
  1031   0010F6                     l102:
  1032   0010F6  B280               	btfsc	128,1,c	;volatile
  1033   0010F8  EF80  F008         	goto	u141
  1034   0010FC  EF82  F008         	goto	u140
  1035   001100                     u141:
  1036   001100  EF7B  F008         	goto	l102
  1037   001104                     u140:
  1038   001104                     
  1039                           ;ASCENSOR.c: 76:      LATDbits.LATD3=0;
  1040   001104  968C               	bcf	140,3,c	;volatile
  1041   001106                     l101:
  1042                           
  1043                           ;ASCENSOR.c: 79:     if(PORTAbits.RA2==1){
  1044   001106  A480               	btfss	128,2,c	;volatile
  1045   001108  EF88  F008         	goto	u151
  1046   00110C  EF8A  F008         	goto	u150
  1047   001110                     u151:
  1048   001110  EF93  F008         	goto	l109
  1049   001114                     u150:
  1050   001114                     
  1051                           ;ASCENSOR.c: 80:      LATDbits.LATD0=1;
  1052   001114  808C               	bsf	140,0,c	;volatile
  1053   001116                     l106:
  1054   001116  B480               	btfsc	128,2,c	;volatile
  1055   001118  EF90  F008         	goto	u161
  1056   00111C  EF92  F008         	goto	u160
  1057   001120                     u161:
  1058   001120  EF8B  F008         	goto	l106
  1059   001124                     u160:
  1060   001124                     
  1061                           ;ASCENSOR.c: 82:      LATDbits.LATD0=0;
  1062   001124  908C               	bcf	140,0,c	;volatile
  1063   001126                     l109:
  1064   001126  0012               	return		;funcret
  1065   001128                     __end_of_reposo:
  1066                           	callstack 0
  1067                           
  1068 ;; *************** function _init_ports *****************
  1069 ;; Defined at:
  1070 ;;		line 41 in file "ASCENSOR.c"
  1071 ;; Parameters:    Size  Location     Type
  1072 ;;		None
  1073 ;; Auto vars:     Size  Location     Type
  1074 ;;		None
  1075 ;; Return value:  Size  Location     Type
  1076 ;;                  1    wreg      void 
  1077 ;; Registers used:
  1078 ;;		wreg, status,2
  1079 ;; Tracked objects:
  1080 ;;		On entry : 0/0
  1081 ;;		On exit  : 0/0
  1082 ;;		Unchanged: 0/0
  1083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1084 ;;      Params:         0       0       0       0       0       0       0       0       0
  1085 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1086 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1087 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1088 ;;Total ram usage:        0 bytes
  1089 ;; Hardware stack levels used: 1
  1090 ;; Hardware stack levels required when called: 5
  1091 ;; This function calls:
  1092 ;;		Nothing
  1093 ;; This function is called by:
  1094 ;;		_main
  1095 ;; This function uses a non-reentrant model
  1096 ;;
  1097                           
  1098                           	psect	text2
  1099   0011A0                     __ptext2:
  1100                           	callstack 0
  1101   0011A0                     _init_ports:
  1102                           	callstack 25
  1103   0011A0                     
  1104                           ;ASCENSOR.c: 42:     ADCON1bits.PCFG=0x0F;
  1105   0011A0  0E0F               	movlw	15
  1106   0011A2  12C1               	iorwf	193,f,c	;volatile
  1107   0011A4                     
  1108                           ;ASCENSOR.c: 43:     TRISB=0XFF;
  1109   0011A4  6893               	setf	147,c	;volatile
  1110   0011A6                     
  1111                           ;ASCENSOR.c: 44:     TRISA=0XFF;
  1112   0011A6  6892               	setf	146,c	;volatile
  1113   0011A8                     
  1114                           ;ASCENSOR.c: 45:     TRISD=0X00;
  1115   0011A8  6A95               	clrf	149,c	;volatile
  1116   0011AA                     
  1117                           ;ASCENSOR.c: 46:     TRISE=0X00;
  1118   0011AA  6A96               	clrf	150,c	;volatile
  1119   0011AC                     
  1120                           ;ASCENSOR.c: 47:     TRISC=0XFF;
  1121   0011AC  6894               	setf	148,c	;volatile
  1122   0011AE                     
  1123                           ;ASCENSOR.c: 48:     TRISCbits.RC0=0;
  1124   0011AE  9094               	bcf	148,0,c	;volatile
  1125   0011B0                     
  1126                           ;ASCENSOR.c: 49:     TRISCbits.RC6=0;
  1127   0011B0  9C94               	bcf	148,6,c	;volatile
  1128   0011B2                     
  1129                           ;ASCENSOR.c: 51:     LATA=0X00;
  1130   0011B2  6A89               	clrf	137,c	;volatile
  1131   0011B4                     
  1132                           ;ASCENSOR.c: 52:     LATB=0X00;
  1133   0011B4  6A8A               	clrf	138,c	;volatile
  1134   0011B6                     
  1135                           ;ASCENSOR.c: 53:     LATC=0X00;
  1136   0011B6  6A8B               	clrf	139,c	;volatile
  1137   0011B8                     
  1138                           ;ASCENSOR.c: 54:     LATD=0X00;
  1139   0011B8  6A8C               	clrf	140,c	;volatile
  1140   0011BA                     
  1141                           ;ASCENSOR.c: 55:     LATE=0X00;
  1142   0011BA  6A8D               	clrf	141,c	;volatile
  1143   0011BC  0012               	return		;funcret
  1144   0011BE                     __end_of_init_ports:
  1145                           	callstack 0
  1146                           
  1147 ;; *************** function _init_int *****************
  1148 ;; Defined at:
  1149 ;;		line 59 in file "ASCENSOR.c"
  1150 ;; Parameters:    Size  Location     Type
  1151 ;;		None
  1152 ;; Auto vars:     Size  Location     Type
  1153 ;;		None
  1154 ;; Return value:  Size  Location     Type
  1155 ;;                  1    wreg      void 
  1156 ;; Registers used:
  1157 ;;		wreg, status,2
  1158 ;; Tracked objects:
  1159 ;;		On entry : 0/0
  1160 ;;		On exit  : 0/0
  1161 ;;		Unchanged: 0/0
  1162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1163 ;;      Params:         0       0       0       0       0       0       0       0       0
  1164 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1165 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1166 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1167 ;;Total ram usage:        0 bytes
  1168 ;; Hardware stack levels used: 1
  1169 ;; Hardware stack levels required when called: 5
  1170 ;; This function calls:
  1171 ;;		Nothing
  1172 ;; This function is called by:
  1173 ;;		_main
  1174 ;; This function uses a non-reentrant model
  1175 ;;
  1176                           
  1177                           	psect	text3
  1178   0011D8                     __ptext3:
  1179                           	callstack 0
  1180   0011D8                     _init_int:
  1181                           	callstack 25
  1182   0011D8                     
  1183                           ;ASCENSOR.c: 61:     RCONbits.IPEN= 1;
  1184   0011D8  8ED0               	bsf	208,7,c	;volatile
  1185                           
  1186                           ;ASCENSOR.c: 62:     INTCONbits.RBIE=1;
  1187   0011DA  86F2               	bsf	242,3,c	;volatile
  1188                           
  1189                           ;ASCENSOR.c: 63:     INTCONbits.RBIF=0;
  1190   0011DC  90F2               	bcf	242,0,c	;volatile
  1191                           
  1192                           ;ASCENSOR.c: 64:     INTCON2bits.RBIP=0;
  1193   0011DE  90F1               	bcf	241,0,c	;volatile
  1194   0011E0                     
  1195                           ;ASCENSOR.c: 65:     T0CON = 0B01111000;
  1196   0011E0  0E78               	movlw	120
  1197   0011E2  6ED5               	movwf	213,c	;volatile
  1198                           
  1199                           ;ASCENSOR.c: 66:     INTCON = 0B10101000;
  1200   0011E4  0EA8               	movlw	168
  1201   0011E6  6EF2               	movwf	242,c	;volatile
  1202   0011E8                     
  1203                           ;ASCENSOR.c: 67:     INTCON2bits.TMR0IP = 1;
  1204   0011E8  84F1               	bsf	241,2,c	;volatile
  1205   0011EA  0012               	return		;funcret
  1206   0011EC                     __end_of_init_int:
  1207                           	callstack 0
  1208                           
  1209 ;; *************** function _detectar *****************
  1210 ;; Defined at:
  1211 ;;		line 87 in file "ASCENSOR.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;		None
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, status,2
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1225 ;;      Params:         0       0       0       0       0       0       0       0       0
  1226 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1227 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1228 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1229 ;;Total ram usage:        0 bytes
  1230 ;; Hardware stack levels used: 1
  1231 ;; Hardware stack levels required when called: 5
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		_main
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           	psect	text4
  1240   000F16                     __ptext4:
  1241                           	callstack 0
  1242   000F16                     _detectar:
  1243                           	callstack 25
  1244   000F16                     
  1245                           ;ASCENSOR.c: 88:  if(PORTCbits.RC1==0 && PORTCbits.RC2==1){
  1246   000F16  B282               	btfsc	130,1,c	;volatile
  1247   000F18  EF90  F007         	goto	u171
  1248   000F1C  EF92  F007         	goto	u170
  1249   000F20                     u171:
  1250   000F20  EFA0  F007         	goto	l112
  1251   000F24                     u170:
  1252   000F24  A482               	btfss	130,2,c	;volatile
  1253   000F26  EF97  F007         	goto	u181
  1254   000F2A  EF99  F007         	goto	u180
  1255   000F2E                     u181:
  1256   000F2E  EFA0  F007         	goto	l112
  1257   000F32                     u180:
  1258   000F32                     
  1259                           ;ASCENSOR.c: 89:   METAL=1;
  1260   000F32  0E01               	movlw	1
  1261   000F34  6E3B               	movwf	_METAL^0,c
  1262                           
  1263                           ;ASCENSOR.c: 90:   TMR0L= 250;
  1264   000F36  0EFA               	movlw	250
  1265   000F38  6ED6               	movwf	214,c	;volatile
  1266   000F3A                     
  1267                           ;ASCENSOR.c: 91:         T0CONbits.TMR0ON = 1;
  1268   000F3A  8ED5               	bsf	213,7,c	;volatile
  1269                           
  1270                           ;ASCENSOR.c: 92:  }
  1271   000F3C  EFCA  F007         	goto	l117
  1272   000F40                     l112:
  1273   000F40  A282               	btfss	130,1,c	;volatile
  1274   000F42  EFA5  F007         	goto	u191
  1275   000F46  EFA7  F007         	goto	u190
  1276   000F4A                     u191:
  1277   000F4A  EFB5  F007         	goto	l114
  1278   000F4E                     u190:
  1279   000F4E  B482               	btfsc	130,2,c	;volatile
  1280   000F50  EFAC  F007         	goto	u201
  1281   000F54  EFAE  F007         	goto	u200
  1282   000F58                     u201:
  1283   000F58  EFB5  F007         	goto	l114
  1284   000F5C                     u200:
  1285   000F5C                     
  1286                           ;ASCENSOR.c: 94:   BLANCA=1;
  1287   000F5C  0E01               	movlw	1
  1288   000F5E  6E3A               	movwf	_BLANCA^0,c
  1289                           
  1290                           ;ASCENSOR.c: 95:         TMR0L= 233;
  1291   000F60  0EE9               	movlw	233
  1292   000F62  6ED6               	movwf	214,c	;volatile
  1293   000F64                     
  1294                           ;ASCENSOR.c: 96:         T0CONbits.TMR0ON = 1;
  1295   000F64  8ED5               	bsf	213,7,c	;volatile
  1296                           
  1297                           ;ASCENSOR.c: 97:  }
  1298   000F66  EFCA  F007         	goto	l117
  1299   000F6A                     l114:
  1300   000F6A  B282               	btfsc	130,1,c	;volatile
  1301   000F6C  EFBA  F007         	goto	u211
  1302   000F70  EFBC  F007         	goto	u210
  1303   000F74                     u211:
  1304   000F74  EFCA  F007         	goto	l113
  1305   000F78                     u210:
  1306   000F78  B482               	btfsc	130,2,c	;volatile
  1307   000F7A  EFC1  F007         	goto	u221
  1308   000F7E  EFC3  F007         	goto	u220
  1309   000F82                     u221:
  1310   000F82  EFCA  F007         	goto	l113
  1311   000F86                     u220:
  1312   000F86                     
  1313                           ;ASCENSOR.c: 99:   NEGRA=1;
  1314   000F86  0E01               	movlw	1
  1315   000F88  6E39               	movwf	_NEGRA^0,c
  1316                           
  1317                           ;ASCENSOR.c: 100:         TMR0L= 222;
  1318   000F8A  0EDE               	movlw	222
  1319   000F8C  6ED6               	movwf	214,c	;volatile
  1320   000F8E                     
  1321                           ;ASCENSOR.c: 101:         T0CONbits.TMR0ON = 1;
  1322   000F8E  8ED5               	bsf	213,7,c	;volatile
  1323   000F90  EFCA  F007         	goto	l117
  1324   000F94                     l113:
  1325   000F94                     l117:
  1326   000F94  0012               	return		;funcret
  1327   000F96                     __end_of_detectar:
  1328                           	callstack 0
  1329                           
  1330 ;; *************** function _dejar *****************
  1331 ;; Defined at:
  1332 ;;		line 188 in file "ASCENSOR.c"
  1333 ;; Parameters:    Size  Location     Type
  1334 ;;		None
  1335 ;; Auto vars:     Size  Location     Type
  1336 ;;		None
  1337 ;; Return value:  Size  Location     Type
  1338 ;;                  1    wreg      void 
  1339 ;; Registers used:
  1340 ;;		wreg, status,2
  1341 ;; Tracked objects:
  1342 ;;		On entry : 0/0
  1343 ;;		On exit  : 0/0
  1344 ;;		Unchanged: 0/0
  1345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1346 ;;      Params:         0       0       0       0       0       0       0       0       0
  1347 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1348 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1349 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1350 ;;Total ram usage:        2 bytes
  1351 ;; Hardware stack levels used: 1
  1352 ;; Hardware stack levels required when called: 5
  1353 ;; This function calls:
  1354 ;;		Nothing
  1355 ;; This function is called by:
  1356 ;;		_main
  1357 ;; This function uses a non-reentrant model
  1358 ;;
  1359                           
  1360                           	psect	text5
  1361   000E0A                     __ptext5:
  1362                           	callstack 0
  1363   000E0A                     _dejar:
  1364                           	callstack 25
  1365   000E0A                     
  1366                           ;ASCENSOR.c: 190:     LATDbits.LATD1=1;
  1367   000E0A  828C               	bsf	140,1,c	;volatile
  1368                           
  1369                           ;ASCENSOR.c: 191:     LATDbits.LATD1=0;
  1370   000E0C  928C               	bcf	140,1,c	;volatile
  1371                           
  1372                           ;ASCENSOR.c: 193:     LATDbits.LATD2= 1;
  1373   000E0E  848C               	bsf	140,2,c	;volatile
  1374   000E10                     l161:
  1375   000E10  B48C               	btfsc	140,2,c	;volatile
  1376   000E12  EF0D  F007         	goto	u331
  1377   000E16  EF0F  F007         	goto	u330
  1378   000E1A                     u331:
  1379   000E1A  EF08  F007         	goto	l161
  1380   000E1E                     u330:
  1381   000E1E                     
  1382                           ;ASCENSOR.c: 195:     _delay((unsigned long)((500)*(4000000/4000.0)));
  1383   000E1E  0E03               	movlw	3
  1384   000E20  6E0E               	movwf	(??_dejar+1)^0,c
  1385   000E22  0E8A               	movlw	138
  1386   000E24  6E0D               	movwf	??_dejar^0,c
  1387   000E26  0E56               	movlw	86
  1388   000E28                     u1107:
  1389   000E28  2EE8               	decfsz	wreg,f,c
  1390   000E2A  D7FE               	bra	u1107
  1391   000E2C  2E0D               	decfsz	??_dejar^0,f,c
  1392   000E2E  D7FC               	bra	u1107
  1393   000E30  2E0E               	decfsz	(??_dejar+1)^0,f,c
  1394   000E32  D7FA               	bra	u1107
  1395   000E34                     
  1396                           ;ASCENSOR.c: 196:     LATCbits.LC0=1;
  1397   000E34  808B               	bsf	139,0,c	;volatile
  1398                           
  1399                           ;ASCENSOR.c: 197:     _delay((unsigned long)((250)*(4000000/4000.0)));
  1400   000E36  0E02               	movlw	2
  1401   000E38  6E0E               	movwf	(??_dejar+1)^0,c
  1402   000E3A  0E45               	movlw	69
  1403   000E3C  6E0D               	movwf	??_dejar^0,c
  1404   000E3E  0EAA               	movlw	170
  1405   000E40                     u1117:
  1406   000E40  2EE8               	decfsz	wreg,f,c
  1407   000E42  D7FE               	bra	u1117
  1408   000E44  2E0D               	decfsz	??_dejar^0,f,c
  1409   000E46  D7FC               	bra	u1117
  1410   000E48  2E0E               	decfsz	(??_dejar+1)^0,f,c
  1411   000E4A  D7FA               	bra	u1117
  1412   000E4C                     
  1413                           ;ASCENSOR.c: 198:     TMR0L= 253;
  1414   000E4C  0EFD               	movlw	253
  1415   000E4E  6ED6               	movwf	214,c	;volatile
  1416   000E50                     
  1417                           ;ASCENSOR.c: 199:     T0CONbits.TMR0ON = 1;
  1418   000E50  8ED5               	bsf	213,7,c	;volatile
  1419   000E52                     
  1420                           ;ASCENSOR.c: 200:     LATDbits.LATD3=1;
  1421   000E52  868C               	bsf	140,3,c	;volatile
  1422   000E54                     l164:
  1423   000E54  B68C               	btfsc	140,3,c	;volatile
  1424   000E56  EF2F  F007         	goto	u341
  1425   000E5A  EF31  F007         	goto	u340
  1426   000E5E                     u341:
  1427   000E5E  EF2A  F007         	goto	l164
  1428   000E62                     u340:
  1429   000E62                     
  1430                           ;ASCENSOR.c: 202:     _delay((unsigned long)((500)*(4000000/4000.0)));
  1431   000E62  0E03               	movlw	3
  1432   000E64  6E0E               	movwf	(??_dejar+1)^0,c
  1433   000E66  0E8A               	movlw	138
  1434   000E68  6E0D               	movwf	??_dejar^0,c
  1435   000E6A  0E56               	movlw	86
  1436   000E6C                     u1127:
  1437   000E6C  2EE8               	decfsz	wreg,f,c
  1438   000E6E  D7FE               	bra	u1127
  1439   000E70  2E0D               	decfsz	??_dejar^0,f,c
  1440   000E72  D7FC               	bra	u1127
  1441   000E74  2E0E               	decfsz	(??_dejar+1)^0,f,c
  1442   000E76  D7FA               	bra	u1127
  1443   000E78                     
  1444                           ;ASCENSOR.c: 203:     LATCbits.LC0=0;
  1445   000E78  908B               	bcf	139,0,c	;volatile
  1446                           
  1447                           ;ASCENSOR.c: 204:     _delay((unsigned long)((200)*(4000000/4000.0)));
  1448   000E7A  0E02               	movlw	2
  1449   000E7C  6E0E               	movwf	(??_dejar+1)^0,c
  1450   000E7E  0E04               	movlw	4
  1451   000E80  6E0D               	movwf	??_dejar^0,c
  1452   000E82  0EBA               	movlw	186
  1453   000E84                     u1137:
  1454   000E84  2EE8               	decfsz	wreg,f,c
  1455   000E86  D7FE               	bra	u1137
  1456   000E88  2E0D               	decfsz	??_dejar^0,f,c
  1457   000E8A  D7FC               	bra	u1137
  1458   000E8C  2E0E               	decfsz	(??_dejar+1)^0,f,c
  1459   000E8E  D7FA               	bra	u1137
  1460   000E90  D000               	nop2	
  1461   000E92  0012               	return		;funcret
  1462   000E94                     __end_of_dejar:
  1463                           	callstack 0
  1464                           
  1465 ;; *************** function _Modificar *****************
  1466 ;; Defined at:
  1467 ;;		line 173 in file "ASCENSOR.c"
  1468 ;; Parameters:    Size  Location     Type
  1469 ;;		None
  1470 ;; Auto vars:     Size  Location     Type
  1471 ;;		None
  1472 ;; Return value:  Size  Location     Type
  1473 ;;                  1    wreg      void 
  1474 ;; Registers used:
  1475 ;;		wreg, status,2, status,0, cstack
  1476 ;; Tracked objects:
  1477 ;;		On entry : 0/0
  1478 ;;		On exit  : 0/0
  1479 ;;		Unchanged: 0/0
  1480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1481 ;;      Params:         0       0       0       0       0       0       0       0       0
  1482 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1483 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1484 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1485 ;;Total ram usage:        0 bytes
  1486 ;; Hardware stack levels used: 1
  1487 ;; Hardware stack levels required when called: 8
  1488 ;; This function calls:
  1489 ;;		_Lcd_NoBlink
  1490 ;;		_Lcd_Write_Char
  1491 ;; This function is called by:
  1492 ;;		_main
  1493 ;; This function uses a non-reentrant model
  1494 ;;
  1495                           
  1496                           	psect	text6
  1497   00104E                     __ptext6:
  1498                           	callstack 0
  1499   00104E                     _Modificar:
  1500                           	callstack 22
  1501   00104E                     
  1502                           ;ASCENSOR.c: 174:     if (PORTBbits.RB3==1){
  1503   00104E  A681               	btfss	129,3,c	;volatile
  1504   001050  EF2C  F008         	goto	u291
  1505   001054  EF2E  F008         	goto	u290
  1506   001058                     u291:
  1507   001058  EF39  F008         	goto	l150
  1508   00105C                     u290:
  1509   00105C                     
  1510                           ;ASCENSOR.c: 175:         Lcd_Write_Char(1);
  1511   00105C  0E01               	movlw	1
  1512   00105E  EC94  F008         	call	_Lcd_Write_Char
  1513   001062                     
  1514                           ;ASCENSOR.c: 177:         c++;
  1515   001062  2A37               	incf	_c^0,f,c
  1516   001064                     l151:
  1517   001064  B681               	btfsc	129,3,c	;volatile
  1518   001066  EF37  F008         	goto	u301
  1519   00106A  EF39  F008         	goto	u300
  1520   00106E                     u301:
  1521   00106E  EF32  F008         	goto	l151
  1522   001072                     u300:
  1523   001072                     l150:
  1524                           
  1525                           ;ASCENSOR.c: 180:     if (PORTBbits.RB2==1){
  1526   001072  A481               	btfss	129,2,c	;volatile
  1527   001074  EF3E  F008         	goto	u311
  1528   001078  EF40  F008         	goto	u310
  1529   00107C                     u311:
  1530   00107C  EF4B  F008         	goto	l1210
  1531   001080                     u310:
  1532   001080                     
  1533                           ;ASCENSOR.c: 181:         Lcd_Write_Char(0);
  1534   001080  0E00               	movlw	0
  1535   001082  EC94  F008         	call	_Lcd_Write_Char
  1536   001086                     
  1537                           ;ASCENSOR.c: 183:         c++;
  1538   001086  2A37               	incf	_c^0,f,c
  1539   001088                     l155:
  1540   001088  B481               	btfsc	129,2,c	;volatile
  1541   00108A  EF49  F008         	goto	u321
  1542   00108E  EF4B  F008         	goto	u320
  1543   001092                     u321:
  1544   001092  EF44  F008         	goto	l155
  1545   001096                     u320:
  1546   001096                     l1210:
  1547                           
  1548                           ;ASCENSOR.c: 186:     Lcd_NoBlink();
  1549   001096  ECFF  F008         	call	_Lcd_NoBlink	;wreg free
  1550   00109A  0012               	return		;funcret
  1551   00109C                     __end_of_Modificar:
  1552                           	callstack 0
  1553                           
  1554 ;; *************** function _Lcd_NoBlink *****************
  1555 ;; Defined at:
  1556 ;;		line 129 in file "lcd.c"
  1557 ;; Parameters:    Size  Location     Type
  1558 ;;		None
  1559 ;; Auto vars:     Size  Location     Type
  1560 ;;		None
  1561 ;; Return value:  Size  Location     Type
  1562 ;;                  1    wreg      void 
  1563 ;; Registers used:
  1564 ;;		wreg, status,2, cstack
  1565 ;; Tracked objects:
  1566 ;;		On entry : 0/0
  1567 ;;		On exit  : 0/0
  1568 ;;		Unchanged: 0/0
  1569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1570 ;;      Params:         0       0       0       0       0       0       0       0       0
  1571 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1572 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1573 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1574 ;;Total ram usage:        0 bytes
  1575 ;; Hardware stack levels used: 1
  1576 ;; Hardware stack levels required when called: 7
  1577 ;; This function calls:
  1578 ;;		_Lcd_Cmd
  1579 ;; This function is called by:
  1580 ;;		_Modificar
  1581 ;; This function uses a non-reentrant model
  1582 ;;
  1583                           
  1584                           	psect	text7
  1585   0011FE                     __ptext7:
  1586                           	callstack 0
  1587   0011FE                     _Lcd_NoBlink:
  1588                           	callstack 22
  1589   0011FE                     
  1590                           ;lcd.c: 131:     Lcd_Cmd(0x00);
  1591   0011FE  0E00               	movlw	0
  1592   001200  ECB0  F008         	call	_Lcd_Cmd
  1593                           
  1594                           ;lcd.c: 132:     Lcd_Cmd(0x0C);
  1595   001204  0E0C               	movlw	12
  1596   001206  ECB0  F008         	call	_Lcd_Cmd
  1597   00120A  0012               	return		;funcret
  1598   00120C                     __end_of_Lcd_NoBlink:
  1599                           	callstack 0
  1600                           
  1601 ;; *************** function _Lcd_Write_String *****************
  1602 ;; Defined at:
  1603 ;;		line 104 in file "lcd.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;  a               1   16[COMRAM] PTR const unsigned char 
  1606 ;;		 -> STR_3(6), STR_2(8), STR_1(7), 
  1607 ;; Auto vars:     Size  Location     Type
  1608 ;;  i               2   18[COMRAM] int 
  1609 ;; Return value:  Size  Location     Type
  1610 ;;                  1    wreg      void 
  1611 ;; Registers used:
  1612 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1613 ;; Tracked objects:
  1614 ;;		On entry : 0/0
  1615 ;;		On exit  : 0/0
  1616 ;;		Unchanged: 0/0
  1617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1618 ;;      Params:         1       0       0       0       0       0       0       0       0
  1619 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1620 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1621 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1622 ;;Total ram usage:        4 bytes
  1623 ;; Hardware stack levels used: 1
  1624 ;; Hardware stack levels required when called: 7
  1625 ;; This function calls:
  1626 ;;		_Lcd_Write_Char
  1627 ;; This function is called by:
  1628 ;;		_main
  1629 ;; This function uses a non-reentrant model
  1630 ;;
  1631                           
  1632                           	psect	text8
  1633   00109C                     __ptext8:
  1634                           	callstack 0
  1635   00109C                     _Lcd_Write_String:
  1636                           	callstack 23
  1637   00109C                     
  1638                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
  1639   00109C  0E00               	movlw	0
  1640   00109E  6E14               	movwf	(Lcd_Write_String@i+1)^0,c
  1641   0010A0  0E00               	movlw	0
  1642   0010A2  6E13               	movwf	Lcd_Write_String@i^0,c
  1643   0010A4  EF61  F008         	goto	l1716
  1644   0010A8                     l1712:
  1645                           
  1646                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
  1647   0010A8  5011               	movf	Lcd_Write_String@a^0,w,c
  1648   0010AA  2413               	addwf	Lcd_Write_String@i^0,w,c
  1649   0010AC  6E12               	movwf	??_Lcd_Write_String^0,c
  1650   0010AE  C012  FFF6         	movff	??_Lcd_Write_String,tblptrl
  1651   0010B2                     	if	1	;There is more than 1 active tblptr byte
  1652   0010B2  0E08               	movlw	high __smallconst
  1653   0010B4  6EF7               	movwf	tblptrh,c
  1654   0010B6                     	endif
  1655   0010B6                     	if	0	;tblptru may be non-zero
  1656   0010B6                     	endif
  1657   0010B6                     	if	0	;tblptru may be non-zero
  1658   0010B6                     	endif
  1659   0010B6  0008               	tblrd		*
  1660   0010B8  50F5               	movf	tablat,w,c
  1661   0010BA  EC94  F008         	call	_Lcd_Write_Char
  1662   0010BE  4A13               	infsnz	Lcd_Write_String@i^0,f,c
  1663   0010C0  2A14               	incf	(Lcd_Write_String@i+1)^0,f,c
  1664   0010C2                     l1716:
  1665   0010C2  5011               	movf	Lcd_Write_String@a^0,w,c
  1666   0010C4  2413               	addwf	Lcd_Write_String@i^0,w,c
  1667   0010C6  6E12               	movwf	??_Lcd_Write_String^0,c
  1668   0010C8  C012  FFF6         	movff	??_Lcd_Write_String,tblptrl
  1669   0010CC                     	if	1	;There is more than 1 active tblptr byte
  1670   0010CC  0E08               	movlw	high __smallconst
  1671   0010CE  6EF7               	movwf	tblptrh,c
  1672   0010D0                     	endif
  1673   0010D0                     	if	0	;tblptru may be non-zero
  1674   0010D0                     	endif
  1675   0010D0                     	if	0	;tblptru may be non-zero
  1676   0010D0                     	endif
  1677   0010D0  0008               	tblrd		*
  1678   0010D2  50F5               	movf	tablat,w,c
  1679   0010D4  0900               	iorlw	0
  1680   0010D6  A4D8               	btfss	status,2,c
  1681   0010D8  EF70  F008         	goto	u871
  1682   0010DC  EF72  F008         	goto	u870
  1683   0010E0                     u871:
  1684   0010E0  EF54  F008         	goto	l1712
  1685   0010E4                     u870:
  1686   0010E4  0012               	return		;funcret
  1687   0010E6                     __end_of_Lcd_Write_String:
  1688                           	callstack 0
  1689                           
  1690 ;; *************** function _Lcd_Init *****************
  1691 ;; Defined at:
  1692 ;;		line 63 in file "lcd.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;		None
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;		None
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  1    wreg      void 
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1706 ;;      Params:         0       0       0       0       0       0       0       0       0
  1707 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1708 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1709 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1710 ;;Total ram usage:        1 bytes
  1711 ;; Hardware stack levels used: 1
  1712 ;; Hardware stack levels required when called: 8
  1713 ;; This function calls:
  1714 ;;		_Lcd_Clear
  1715 ;;		_Lcd_Cmd
  1716 ;;		_Lcd_Port
  1717 ;; This function is called by:
  1718 ;;		_main
  1719 ;; This function uses a non-reentrant model
  1720 ;;
  1721                           
  1722                           	psect	text9
  1723   000E94                     __ptext9:
  1724                           	callstack 0
  1725   000E94                     _Lcd_Init:
  1726                           	callstack 22
  1727   000E94                     
  1728                           ;lcd.c: 65:  TRISDbits.TRISD2 = 0;
  1729   000E94  9495               	bcf	149,2,c	;volatile
  1730                           
  1731                           ;lcd.c: 66:  TRISDbits.TRISD3 = 0;
  1732   000E96  9695               	bcf	149,3,c	;volatile
  1733                           
  1734                           ;lcd.c: 67:  TRISDbits.TRISD4 = 0;
  1735   000E98  9895               	bcf	149,4,c	;volatile
  1736                           
  1737                           ;lcd.c: 68:  TRISDbits.TRISD5 = 0;
  1738   000E9A  9A95               	bcf	149,5,c	;volatile
  1739                           
  1740                           ;lcd.c: 69:  TRISDbits.TRISD6 = 0;
  1741   000E9C  9C95               	bcf	149,6,c	;volatile
  1742                           
  1743                           ;lcd.c: 70:  TRISDbits.TRISD7 = 0;
  1744   000E9E  9E95               	bcf	149,7,c	;volatile
  1745   000EA0                     
  1746                           ;lcd.c: 71:     Lcd_Port(0x00);
  1747   000EA0  0E00               	movlw	0
  1748   000EA2  ECCB  F007         	call	_Lcd_Port
  1749   000EA6                     
  1750                           ;lcd.c: 72:     _delay((unsigned long)((20)*(4000000/4000.0)));
  1751   000EA6  0E1A               	movlw	26
  1752   000EA8  6E10               	movwf	??_Lcd_Init^0,c
  1753   000EAA  0EF8               	movlw	248
  1754   000EAC                     u1147:
  1755   000EAC  2EE8               	decfsz	wreg,f,c
  1756   000EAE  D7FE               	bra	u1147
  1757   000EB0  2E10               	decfsz	??_Lcd_Init^0,f,c
  1758   000EB2  D7FC               	bra	u1147
  1759   000EB4  D000               	nop2	
  1760   000EB6                     
  1761                           ;lcd.c: 73:     Lcd_Cmd(0x03);
  1762   000EB6  0E03               	movlw	3
  1763   000EB8  ECB0  F008         	call	_Lcd_Cmd
  1764   000EBC                     
  1765                           ;lcd.c: 74:     _delay((unsigned long)((5)*(4000000/4000.0)));
  1766   000EBC  0E07               	movlw	7
  1767   000EBE  6E10               	movwf	??_Lcd_Init^0,c
  1768   000EC0  0E7D               	movlw	125
  1769   000EC2                     u1157:
  1770   000EC2  2EE8               	decfsz	wreg,f,c
  1771   000EC4  D7FE               	bra	u1157
  1772   000EC6  2E10               	decfsz	??_Lcd_Init^0,f,c
  1773   000EC8  D7FC               	bra	u1157
  1774   000ECA  0000               	nop	
  1775   000ECC                     
  1776                           ;lcd.c: 75:     Lcd_Cmd(0x03);
  1777   000ECC  0E03               	movlw	3
  1778   000ECE  ECB0  F008         	call	_Lcd_Cmd
  1779   000ED2                     
  1780                           ;lcd.c: 76:     _delay((unsigned long)((11)*(4000000/4000.0)));
  1781   000ED2  0E0F               	movlw	15
  1782   000ED4  6E10               	movwf	??_Lcd_Init^0,c
  1783   000ED6  0E48               	movlw	72
  1784   000ED8                     u1167:
  1785   000ED8  2EE8               	decfsz	wreg,f,c
  1786   000EDA  D7FE               	bra	u1167
  1787   000EDC  2E10               	decfsz	??_Lcd_Init^0,f,c
  1788   000EDE  D7FC               	bra	u1167
  1789   000EE0                     
  1790                           ;lcd.c: 77:     Lcd_Cmd(0x03);
  1791   000EE0  0E03               	movlw	3
  1792   000EE2  ECB0  F008         	call	_Lcd_Cmd
  1793   000EE6                     
  1794                           ;lcd.c: 78:     Lcd_Cmd(0x02);
  1795   000EE6  0E02               	movlw	2
  1796   000EE8  ECB0  F008         	call	_Lcd_Cmd
  1797   000EEC                     
  1798                           ;lcd.c: 79:     Lcd_Cmd(0x02);
  1799   000EEC  0E02               	movlw	2
  1800   000EEE  ECB0  F008         	call	_Lcd_Cmd
  1801   000EF2                     
  1802                           ;lcd.c: 80:     Lcd_Cmd(0x08);
  1803   000EF2  0E08               	movlw	8
  1804   000EF4  ECB0  F008         	call	_Lcd_Cmd
  1805   000EF8                     
  1806                           ;lcd.c: 81:     Lcd_Cmd(0x00);
  1807   000EF8  0E00               	movlw	0
  1808   000EFA  ECB0  F008         	call	_Lcd_Cmd
  1809   000EFE                     
  1810                           ;lcd.c: 82:     Lcd_Cmd(0x0C);
  1811   000EFE  0E0C               	movlw	12
  1812   000F00  ECB0  F008         	call	_Lcd_Cmd
  1813   000F04                     
  1814                           ;lcd.c: 83:     Lcd_Cmd(0x00);
  1815   000F04  0E00               	movlw	0
  1816   000F06  ECB0  F008         	call	_Lcd_Cmd
  1817   000F0A                     
  1818                           ;lcd.c: 84:     Lcd_Cmd(0x06);
  1819   000F0A  0E06               	movlw	6
  1820   000F0C  ECB0  F008         	call	_Lcd_Cmd
  1821   000F10                     
  1822                           ;lcd.c: 85:     Lcd_Clear();
  1823   000F10  EC06  F009         	call	_Lcd_Clear	;wreg free
  1824   000F14  0012               	return		;funcret
  1825   000F16                     __end_of_Lcd_Init:
  1826                           	callstack 0
  1827                           
  1828 ;; *************** function _Lcd_Clear *****************
  1829 ;; Defined at:
  1830 ;;		line 20 in file "lcd.c"
  1831 ;; Parameters:    Size  Location     Type
  1832 ;;		None
  1833 ;; Auto vars:     Size  Location     Type
  1834 ;;		None
  1835 ;; Return value:  Size  Location     Type
  1836 ;;                  1    wreg      void 
  1837 ;; Registers used:
  1838 ;;		wreg, status,2, cstack
  1839 ;; Tracked objects:
  1840 ;;		On entry : 0/0
  1841 ;;		On exit  : 0/0
  1842 ;;		Unchanged: 0/0
  1843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1844 ;;      Params:         0       0       0       0       0       0       0       0       0
  1845 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1846 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1847 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1848 ;;Total ram usage:        0 bytes
  1849 ;; Hardware stack levels used: 1
  1850 ;; Hardware stack levels required when called: 7
  1851 ;; This function calls:
  1852 ;;		_Lcd_Cmd
  1853 ;; This function is called by:
  1854 ;;		_main
  1855 ;;		_Lcd_Init
  1856 ;; This function uses a non-reentrant model
  1857 ;;
  1858                           
  1859                           	psect	text10
  1860   00120C                     __ptext10:
  1861                           	callstack 0
  1862   00120C                     _Lcd_Clear:
  1863                           	callstack 22
  1864   00120C                     
  1865                           ;lcd.c: 22:     Lcd_Cmd(0);
  1866   00120C  0E00               	movlw	0
  1867   00120E  ECB0  F008         	call	_Lcd_Cmd
  1868                           
  1869                           ;lcd.c: 23:     Lcd_Cmd(1);
  1870   001212  0E01               	movlw	1
  1871   001214  ECB0  F008         	call	_Lcd_Cmd
  1872   001218  0012               	return		;funcret
  1873   00121A                     __end_of_Lcd_Clear:
  1874                           	callstack 0
  1875                           
  1876 ;; *************** function _Lcd_CGRAM_Init *****************
  1877 ;; Defined at:
  1878 ;;		line 175 in file "lcd.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;		None
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  1    wreg      void 
  1885 ;; Registers used:
  1886 ;;		wreg, status,2, cstack
  1887 ;; Tracked objects:
  1888 ;;		On entry : 0/0
  1889 ;;		On exit  : 0/0
  1890 ;;		Unchanged: 0/0
  1891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1892 ;;      Params:         0       0       0       0       0       0       0       0       0
  1893 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1894 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1895 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1896 ;;Total ram usage:        0 bytes
  1897 ;; Hardware stack levels used: 1
  1898 ;; Hardware stack levels required when called: 7
  1899 ;; This function calls:
  1900 ;;		_Lcd_Cmd
  1901 ;; This function is called by:
  1902 ;;		_main
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905                           
  1906                           	psect	text11
  1907   00121A                     __ptext11:
  1908                           	callstack 0
  1909   00121A                     _Lcd_CGRAM_Init:
  1910                           	callstack 23
  1911   00121A                     
  1912                           ;lcd.c: 177:     Lcd_Cmd(0x04);
  1913   00121A  0E04               	movlw	4
  1914   00121C  ECB0  F008         	call	_Lcd_Cmd
  1915                           
  1916                           ;lcd.c: 178:     Lcd_Cmd(0x00);
  1917   001220  0E00               	movlw	0
  1918   001222  ECB0  F008         	call	_Lcd_Cmd
  1919   001226  0012               	return		;funcret
  1920   001228                     __end_of_Lcd_CGRAM_Init:
  1921                           	callstack 0
  1922                           
  1923 ;; *************** function _Lcd_CGRAM_CreateChar *****************
  1924 ;; Defined at:
  1925 ;;		line 136 in file "lcd.c"
  1926 ;; Parameters:    Size  Location     Type
  1927 ;;  add             1    wreg     unsigned char 
  1928 ;;  chardata        1   16[COMRAM] PTR const unsigned char 
  1929 ;;		 -> figura_2(8), figura_1(8), 
  1930 ;; Auto vars:     Size  Location     Type
  1931 ;;  add             1   18[COMRAM] unsigned char 
  1932 ;;  i               1   26[COMRAM] unsigned char 
  1933 ;;  i               1   25[COMRAM] unsigned char 
  1934 ;;  i               1   24[COMRAM] unsigned char 
  1935 ;;  i               1   23[COMRAM] unsigned char 
  1936 ;;  i               1   22[COMRAM] unsigned char 
  1937 ;;  i               1   21[COMRAM] unsigned char 
  1938 ;;  i               1   20[COMRAM] unsigned char 
  1939 ;;  i               1   19[COMRAM] unsigned char 
  1940 ;; Return value:  Size  Location     Type
  1941 ;;                  1    wreg      void 
  1942 ;; Registers used:
  1943 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1944 ;; Tracked objects:
  1945 ;;		On entry : 0/0
  1946 ;;		On exit  : 0/0
  1947 ;;		Unchanged: 0/0
  1948 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1949 ;;      Params:         1       0       0       0       0       0       0       0       0
  1950 ;;      Locals:         9       0       0       0       0       0       0       0       0
  1951 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1952 ;;      Totals:        11       0       0       0       0       0       0       0       0
  1953 ;;Total ram usage:       11 bytes
  1954 ;; Hardware stack levels used: 1
  1955 ;; Hardware stack levels required when called: 7
  1956 ;; This function calls:
  1957 ;;		_Lcd_Write_Char
  1958 ;; This function is called by:
  1959 ;;		_main
  1960 ;; This function uses a non-reentrant model
  1961 ;;
  1962                           
  1963                           	psect	text12
  1964   000828                     __ptext12:
  1965                           	callstack 0
  1966   000828                     _Lcd_CGRAM_CreateChar:
  1967                           	callstack 23
  1968                           
  1969                           ;incstack = 0
  1970                           ;Lcd_CGRAM_CreateChar@add stored from wreg
  1971   000828  6E13               	movwf	Lcd_CGRAM_CreateChar@add^0,c
  1972   00082A                     
  1973                           ;lcd.c: 136: void Lcd_CGRAM_CreateChar(char add, const char* chardata);lcd.c: 137: {;lcd
      +                          .c: 138:     switch(add)
  1974   00082A  EFE4  F004         	goto	l1708
  1975   00082E                     l259:
  1976                           
  1977                           ;lcd.c: 141:             for(char i=0; i<=7; i++)
  1978   00082E  6A14               	clrf	Lcd_CGRAM_CreateChar@i^0,c
  1979   000830                     l1616:
  1980                           
  1981                           ;lcd.c: 142:                 Lcd_Write_Char(chardata[i]);
  1982   000830  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  1983   000832  2414               	addwf	Lcd_CGRAM_CreateChar@i^0,w,c
  1984   000834  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  1985   000836  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  1986   00083A                     	if	1	;There is more than 1 active tblptr byte
  1987   00083A  0E08               	movlw	high __smallconst
  1988   00083C  6EF7               	movwf	tblptrh,c
  1989   00083E                     	endif
  1990   00083E                     	if	0	;tblptru may be non-zero
  1991   00083E                     	endif
  1992   00083E                     	if	0	;tblptru may be non-zero
  1993   00083E                     	endif
  1994   00083E  0008               	tblrd		*
  1995   000840  50F5               	movf	tablat,w,c
  1996   000842  EC94  F008         	call	_Lcd_Write_Char
  1997   000846  2A14               	incf	Lcd_CGRAM_CreateChar@i^0,f,c
  1998   000848  0E07               	movlw	7
  1999   00084A  6414               	cpfsgt	Lcd_CGRAM_CreateChar@i^0,c
  2000   00084C  EF2A  F004         	goto	u791
  2001   000850  EF2C  F004         	goto	u790
  2002   000854                     u791:
  2003   000854  EF18  F004         	goto	l1616
  2004   000858                     u790:
  2005   000858  EF07  F005         	goto	l284
  2006   00085C                     l1622:
  2007                           
  2008                           ;lcd.c: 145:             for(char i=8; i<=15; i++)
  2009   00085C  0E08               	movlw	8
  2010   00085E  6E15               	movwf	Lcd_CGRAM_CreateChar@i_850^0,c
  2011   000860                     l1628:
  2012                           
  2013                           ;lcd.c: 146:                 Lcd_Write_Char(chardata[i-8]);
  2014   000860  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2015   000862  2415               	addwf	Lcd_CGRAM_CreateChar@i_850^0,w,c
  2016   000864  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2017   000866  0EF8               	movlw	-8
  2018   000868  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2019   00086A  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2020   00086E                     	if	1	;There is more than 1 active tblptr byte
  2021   00086E  0E08               	movlw	high __smallconst
  2022   000870  6EF7               	movwf	tblptrh,c
  2023   000872                     	endif
  2024   000872                     	if	0	;tblptru may be non-zero
  2025   000872                     	endif
  2026   000872                     	if	0	;tblptru may be non-zero
  2027   000872                     	endif
  2028   000872  0008               	tblrd		*
  2029   000874  50F5               	movf	tablat,w,c
  2030   000876  EC94  F008         	call	_Lcd_Write_Char
  2031   00087A  2A15               	incf	Lcd_CGRAM_CreateChar@i_850^0,f,c
  2032   00087C  0E0F               	movlw	15
  2033   00087E  6415               	cpfsgt	Lcd_CGRAM_CreateChar@i_850^0,c
  2034   000880  EF44  F004         	goto	u801
  2035   000884  EF46  F004         	goto	u800
  2036   000888                     u801:
  2037   000888  EF30  F004         	goto	l1628
  2038   00088C                     u800:
  2039   00088C  EF07  F005         	goto	l284
  2040   000890                     l1634:
  2041                           
  2042                           ;lcd.c: 149:             for(char i=16; i<=23; i++)
  2043   000890  0E10               	movlw	16
  2044   000892  6E16               	movwf	Lcd_CGRAM_CreateChar@i_851^0,c
  2045   000894                     l1640:
  2046                           
  2047                           ;lcd.c: 150:                 Lcd_Write_Char(chardata[i-16]);
  2048   000894  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2049   000896  2416               	addwf	Lcd_CGRAM_CreateChar@i_851^0,w,c
  2050   000898  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2051   00089A  0EF0               	movlw	-16
  2052   00089C  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2053   00089E  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2054   0008A2                     	if	1	;There is more than 1 active tblptr byte
  2055   0008A2  0E08               	movlw	high __smallconst
  2056   0008A4  6EF7               	movwf	tblptrh,c
  2057   0008A6                     	endif
  2058   0008A6                     	if	0	;tblptru may be non-zero
  2059   0008A6                     	endif
  2060   0008A6                     	if	0	;tblptru may be non-zero
  2061   0008A6                     	endif
  2062   0008A6  0008               	tblrd		*
  2063   0008A8  50F5               	movf	tablat,w,c
  2064   0008AA  EC94  F008         	call	_Lcd_Write_Char
  2065   0008AE  2A16               	incf	Lcd_CGRAM_CreateChar@i_851^0,f,c
  2066   0008B0  0E17               	movlw	23
  2067   0008B2  6416               	cpfsgt	Lcd_CGRAM_CreateChar@i_851^0,c
  2068   0008B4  EF5E  F004         	goto	u811
  2069   0008B8  EF60  F004         	goto	u810
  2070   0008BC                     u811:
  2071   0008BC  EF4A  F004         	goto	l1640
  2072   0008C0                     u810:
  2073   0008C0  EF07  F005         	goto	l284
  2074   0008C4                     l1646:
  2075                           
  2076                           ;lcd.c: 153:             for(char i=24; i<=31; i++)
  2077   0008C4  0E18               	movlw	24
  2078   0008C6  6E17               	movwf	Lcd_CGRAM_CreateChar@i_852^0,c
  2079   0008C8                     l1652:
  2080                           
  2081                           ;lcd.c: 154:                 Lcd_Write_Char(chardata[i-24]);
  2082   0008C8  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2083   0008CA  2417               	addwf	Lcd_CGRAM_CreateChar@i_852^0,w,c
  2084   0008CC  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2085   0008CE  0EE8               	movlw	-24
  2086   0008D0  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2087   0008D2  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2088   0008D6                     	if	1	;There is more than 1 active tblptr byte
  2089   0008D6  0E08               	movlw	high __smallconst
  2090   0008D8  6EF7               	movwf	tblptrh,c
  2091   0008DA                     	endif
  2092   0008DA                     	if	0	;tblptru may be non-zero
  2093   0008DA                     	endif
  2094   0008DA                     	if	0	;tblptru may be non-zero
  2095   0008DA                     	endif
  2096   0008DA  0008               	tblrd		*
  2097   0008DC  50F5               	movf	tablat,w,c
  2098   0008DE  EC94  F008         	call	_Lcd_Write_Char
  2099   0008E2  2A17               	incf	Lcd_CGRAM_CreateChar@i_852^0,f,c
  2100   0008E4  0E1F               	movlw	31
  2101   0008E6  6417               	cpfsgt	Lcd_CGRAM_CreateChar@i_852^0,c
  2102   0008E8  EF78  F004         	goto	u821
  2103   0008EC  EF7A  F004         	goto	u820
  2104   0008F0                     u821:
  2105   0008F0  EF64  F004         	goto	l1652
  2106   0008F4                     u820:
  2107   0008F4  EF07  F005         	goto	l284
  2108   0008F8                     l1658:
  2109                           
  2110                           ;lcd.c: 157:             for(char i=32; i<=39; i++)
  2111   0008F8  0E20               	movlw	32
  2112   0008FA  6E18               	movwf	Lcd_CGRAM_CreateChar@i_853^0,c
  2113   0008FC                     l1664:
  2114                           
  2115                           ;lcd.c: 158:                 Lcd_Write_Char(chardata[i-32]);
  2116   0008FC  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2117   0008FE  2418               	addwf	Lcd_CGRAM_CreateChar@i_853^0,w,c
  2118   000900  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2119   000902  0EE0               	movlw	-32
  2120   000904  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2121   000906  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2122   00090A                     	if	1	;There is more than 1 active tblptr byte
  2123   00090A  0E08               	movlw	high __smallconst
  2124   00090C  6EF7               	movwf	tblptrh,c
  2125   00090E                     	endif
  2126   00090E                     	if	0	;tblptru may be non-zero
  2127   00090E                     	endif
  2128   00090E                     	if	0	;tblptru may be non-zero
  2129   00090E                     	endif
  2130   00090E  0008               	tblrd		*
  2131   000910  50F5               	movf	tablat,w,c
  2132   000912  EC94  F008         	call	_Lcd_Write_Char
  2133   000916  2A18               	incf	Lcd_CGRAM_CreateChar@i_853^0,f,c
  2134   000918  0E27               	movlw	39
  2135   00091A  6418               	cpfsgt	Lcd_CGRAM_CreateChar@i_853^0,c
  2136   00091C  EF92  F004         	goto	u831
  2137   000920  EF94  F004         	goto	u830
  2138   000924                     u831:
  2139   000924  EF7E  F004         	goto	l1664
  2140   000928                     u830:
  2141   000928  EF07  F005         	goto	l284
  2142   00092C                     l1670:
  2143                           
  2144                           ;lcd.c: 161:             for(char i=40; i<=47; i++)
  2145   00092C  0E28               	movlw	40
  2146   00092E  6E19               	movwf	Lcd_CGRAM_CreateChar@i_854^0,c
  2147   000930                     l1676:
  2148                           
  2149                           ;lcd.c: 162:                 Lcd_Write_Char(chardata[i-40]);
  2150   000930  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2151   000932  2419               	addwf	Lcd_CGRAM_CreateChar@i_854^0,w,c
  2152   000934  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2153   000936  0ED8               	movlw	-40
  2154   000938  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2155   00093A  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2156   00093E                     	if	1	;There is more than 1 active tblptr byte
  2157   00093E  0E08               	movlw	high __smallconst
  2158   000940  6EF7               	movwf	tblptrh,c
  2159   000942                     	endif
  2160   000942                     	if	0	;tblptru may be non-zero
  2161   000942                     	endif
  2162   000942                     	if	0	;tblptru may be non-zero
  2163   000942                     	endif
  2164   000942  0008               	tblrd		*
  2165   000944  50F5               	movf	tablat,w,c
  2166   000946  EC94  F008         	call	_Lcd_Write_Char
  2167   00094A  2A19               	incf	Lcd_CGRAM_CreateChar@i_854^0,f,c
  2168   00094C  0E2F               	movlw	47
  2169   00094E  6419               	cpfsgt	Lcd_CGRAM_CreateChar@i_854^0,c
  2170   000950  EFAC  F004         	goto	u841
  2171   000954  EFAE  F004         	goto	u840
  2172   000958                     u841:
  2173   000958  EF98  F004         	goto	l1676
  2174   00095C                     u840:
  2175   00095C  EF07  F005         	goto	l284
  2176   000960                     l1682:
  2177                           
  2178                           ;lcd.c: 165:             for(char i=48; i<=55; i++)
  2179   000960  0E30               	movlw	48
  2180   000962  6E1A               	movwf	Lcd_CGRAM_CreateChar@i_855^0,c
  2181   000964                     l1688:
  2182                           
  2183                           ;lcd.c: 166:                 Lcd_Write_Char(chardata[i-48]);
  2184   000964  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2185   000966  241A               	addwf	Lcd_CGRAM_CreateChar@i_855^0,w,c
  2186   000968  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2187   00096A  0ED0               	movlw	-48
  2188   00096C  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2189   00096E  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2190   000972                     	if	1	;There is more than 1 active tblptr byte
  2191   000972  0E08               	movlw	high __smallconst
  2192   000974  6EF7               	movwf	tblptrh,c
  2193   000976                     	endif
  2194   000976                     	if	0	;tblptru may be non-zero
  2195   000976                     	endif
  2196   000976                     	if	0	;tblptru may be non-zero
  2197   000976                     	endif
  2198   000976  0008               	tblrd		*
  2199   000978  50F5               	movf	tablat,w,c
  2200   00097A  EC94  F008         	call	_Lcd_Write_Char
  2201   00097E  2A1A               	incf	Lcd_CGRAM_CreateChar@i_855^0,f,c
  2202   000980  0E37               	movlw	55
  2203   000982  641A               	cpfsgt	Lcd_CGRAM_CreateChar@i_855^0,c
  2204   000984  EFC6  F004         	goto	u851
  2205   000988  EFC8  F004         	goto	u850
  2206   00098C                     u851:
  2207   00098C  EFB2  F004         	goto	l1688
  2208   000990                     u850:
  2209   000990  EF07  F005         	goto	l284
  2210   000994                     l1694:
  2211                           
  2212                           ;lcd.c: 169:             for(char i=56; i<=63; i++)
  2213   000994  0E38               	movlw	56
  2214   000996  6E1B               	movwf	Lcd_CGRAM_CreateChar@i_856^0,c
  2215   000998                     l1700:
  2216                           
  2217                           ;lcd.c: 170:                 Lcd_Write_Char(chardata[i-56]);
  2218   000998  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2219   00099A  241B               	addwf	Lcd_CGRAM_CreateChar@i_856^0,w,c
  2220   00099C  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2221   00099E  0EC8               	movlw	-56
  2222   0009A0  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2223   0009A2  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2224   0009A6                     	if	1	;There is more than 1 active tblptr byte
  2225   0009A6  0E08               	movlw	high __smallconst
  2226   0009A8  6EF7               	movwf	tblptrh,c
  2227   0009AA                     	endif
  2228   0009AA                     	if	0	;tblptru may be non-zero
  2229   0009AA                     	endif
  2230   0009AA                     	if	0	;tblptru may be non-zero
  2231   0009AA                     	endif
  2232   0009AA  0008               	tblrd		*
  2233   0009AC  50F5               	movf	tablat,w,c
  2234   0009AE  EC94  F008         	call	_Lcd_Write_Char
  2235   0009B2  2A1B               	incf	Lcd_CGRAM_CreateChar@i_856^0,f,c
  2236   0009B4  0E3F               	movlw	63
  2237   0009B6  641B               	cpfsgt	Lcd_CGRAM_CreateChar@i_856^0,c
  2238   0009B8  EFE0  F004         	goto	u861
  2239   0009BC  EFE2  F004         	goto	u860
  2240   0009C0                     u861:
  2241   0009C0  EFCC  F004         	goto	l1700
  2242   0009C4                     u860:
  2243   0009C4  EF07  F005         	goto	l284
  2244   0009C8                     l1708:
  2245   0009C8  5013               	movf	Lcd_CGRAM_CreateChar@add^0,w,c
  2246                           
  2247                           ; Switch size 1, requested type "simple"
  2248                           ; Number of cases is 8, Range of values is 0 to 7
  2249                           ; switch strategies available:
  2250                           ; Name         Instructions Cycles
  2251                           ; simple_byte           25    13 (average)
  2252                           ;	Chosen strategy is simple_byte
  2253   0009CA  0A00               	xorlw	0	; case 0
  2254   0009CC  B4D8               	btfsc	status,2,c
  2255   0009CE  EF17  F004         	goto	l259
  2256   0009D2  0A01               	xorlw	1	; case 1
  2257   0009D4  B4D8               	btfsc	status,2,c
  2258   0009D6  EF2E  F004         	goto	l1622
  2259   0009DA  0A03               	xorlw	3	; case 2
  2260   0009DC  B4D8               	btfsc	status,2,c
  2261   0009DE  EF48  F004         	goto	l1634
  2262   0009E2  0A01               	xorlw	1	; case 3
  2263   0009E4  B4D8               	btfsc	status,2,c
  2264   0009E6  EF62  F004         	goto	l1646
  2265   0009EA  0A07               	xorlw	7	; case 4
  2266   0009EC  B4D8               	btfsc	status,2,c
  2267   0009EE  EF7C  F004         	goto	l1658
  2268   0009F2  0A01               	xorlw	1	; case 5
  2269   0009F4  B4D8               	btfsc	status,2,c
  2270   0009F6  EF96  F004         	goto	l1670
  2271   0009FA  0A03               	xorlw	3	; case 6
  2272   0009FC  B4D8               	btfsc	status,2,c
  2273   0009FE  EFB0  F004         	goto	l1682
  2274   000A02  0A01               	xorlw	1	; case 7
  2275   000A04  B4D8               	btfsc	status,2,c
  2276   000A06  EFCA  F004         	goto	l1694
  2277   000A0A  EF07  F005         	goto	l284
  2278   000A0E                     l284:
  2279   000A0E  0012               	return		;funcret
  2280   000A10                     __end_of_Lcd_CGRAM_CreateChar:
  2281                           	callstack 0
  2282                           
  2283 ;; *************** function _Lcd_CGRAM_Close *****************
  2284 ;; Defined at:
  2285 ;;		line 181 in file "lcd.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;		None
  2288 ;; Auto vars:     Size  Location     Type
  2289 ;;		None
  2290 ;; Return value:  Size  Location     Type
  2291 ;;                  1    wreg      void 
  2292 ;; Registers used:
  2293 ;;		wreg, status,2, cstack
  2294 ;; Tracked objects:
  2295 ;;		On entry : 0/0
  2296 ;;		On exit  : 0/0
  2297 ;;		Unchanged: 0/0
  2298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2299 ;;      Params:         0       0       0       0       0       0       0       0       0
  2300 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2301 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2302 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2303 ;;Total ram usage:        0 bytes
  2304 ;; Hardware stack levels used: 1
  2305 ;; Hardware stack levels required when called: 7
  2306 ;; This function calls:
  2307 ;;		_Lcd_Cmd
  2308 ;; This function is called by:
  2309 ;;		_main
  2310 ;; This function uses a non-reentrant model
  2311 ;;
  2312                           
  2313                           	psect	text13
  2314   001228                     __ptext13:
  2315                           	callstack 0
  2316   001228                     _Lcd_CGRAM_Close:
  2317                           	callstack 23
  2318   001228                     
  2319                           ;lcd.c: 183:     Lcd_Cmd(0x00);
  2320   001228  0E00               	movlw	0
  2321   00122A  ECB0  F008         	call	_Lcd_Cmd
  2322                           
  2323                           ;lcd.c: 184:     Lcd_Cmd(0x02);
  2324   00122E  0E02               	movlw	2
  2325   001230  ECB0  F008         	call	_Lcd_Cmd
  2326   001234  0012               	return		;funcret
  2327   001236                     __end_of_Lcd_CGRAM_Close:
  2328                           	callstack 0
  2329                           
  2330 ;; *************** function _Actualizar_Matriz *****************
  2331 ;; Defined at:
  2332 ;;		line 105 in file "ASCENSOR.c"
  2333 ;; Parameters:    Size  Location     Type
  2334 ;;		None
  2335 ;; Auto vars:     Size  Location     Type
  2336 ;;  i               2   26[COMRAM] int 
  2337 ;;  i               2   24[COMRAM] int 
  2338 ;;  i               2   22[COMRAM] int 
  2339 ;; Return value:  Size  Location     Type
  2340 ;;                  1    wreg      void 
  2341 ;; Registers used:
  2342 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2343 ;; Tracked objects:
  2344 ;;		On entry : 0/0
  2345 ;;		On exit  : 0/0
  2346 ;;		Unchanged: 0/0
  2347 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2348 ;;      Params:         0       0       0       0       0       0       0       0       0
  2349 ;;      Locals:         6       0       0       0       0       0       0       0       0
  2350 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2351 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2352 ;;Total ram usage:        8 bytes
  2353 ;; Hardware stack levels used: 1
  2354 ;; Hardware stack levels required when called: 8
  2355 ;; This function calls:
  2356 ;;		_Lcd_Set_Cursor
  2357 ;;		_Lcd_Write_Char
  2358 ;; This function is called by:
  2359 ;;		_main
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362                           
  2363                           	psect	text14
  2364   000A10                     __ptext14:
  2365                           	callstack 0
  2366   000A10                     _Actualizar_Matriz:
  2367                           	callstack 22
  2368   000A10                     
  2369                           ;ASCENSOR.c: 106:     Lcd_Set_Cursor(1,12);
  2370   000A10  0E0C               	movlw	12
  2371   000A12  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  2372   000A14  0E01               	movlw	1
  2373   000A16  EC33  F006         	call	_Lcd_Set_Cursor
  2374   000A1A                     
  2375                           ;ASCENSOR.c: 107:     for(int i=0;i<=3;i++){
  2376   000A1A  0E00               	movlw	0
  2377   000A1C  6E18               	movwf	(Actualizar_Matriz@i+1)^0,c
  2378   000A1E  0E00               	movlw	0
  2379   000A20  6E17               	movwf	Actualizar_Matriz@i^0,c
  2380   000A22                     l1556:
  2381                           
  2382                           ;ASCENSOR.c: 108:         if (Fila1[i]==0){
  2383   000A22  5017               	movf	Actualizar_Matriz@i^0,w,c
  2384   000A24  0D02               	mullw	2
  2385   000A26  50F3               	movf	243,w,c
  2386   000A28  0F2F               	addlw	low _Fila1
  2387   000A2A  6ED9               	movwf	fsr2l,c
  2388   000A2C  6ADA               	clrf	fsr2h,c
  2389   000A2E  50DE               	movf	postinc2,w,c
  2390   000A30  10DE               	iorwf	postinc2,w,c
  2391   000A32  A4D8               	btfss	status,2,c
  2392   000A34  EF1E  F005         	goto	u731
  2393   000A38  EF20  F005         	goto	u730
  2394   000A3C                     u731:
  2395   000A3C  EF25  F005         	goto	l1560
  2396   000A40                     u730:
  2397   000A40                     
  2398                           ;ASCENSOR.c: 109:             Lcd_Write_Char(0);
  2399   000A40  0E00               	movlw	0
  2400   000A42  EC94  F008         	call	_Lcd_Write_Char
  2401                           
  2402                           ;ASCENSOR.c: 110:         }
  2403   000A46  EF28  F005         	goto	l1562
  2404   000A4A                     l1560:
  2405                           
  2406                           ;ASCENSOR.c: 112:         {;ASCENSOR.c: 113:             Lcd_Write_Char(1);
  2407   000A4A  0E01               	movlw	1
  2408   000A4C  EC94  F008         	call	_Lcd_Write_Char
  2409   000A50                     l1562:
  2410                           
  2411                           ;ASCENSOR.c: 115:     }
  2412   000A50  4A17               	infsnz	Actualizar_Matriz@i^0,f,c
  2413   000A52  2A18               	incf	(Actualizar_Matriz@i+1)^0,f,c
  2414   000A54  BE18               	btfsc	(Actualizar_Matriz@i+1)^0,7,c
  2415   000A56  EF36  F005         	goto	u741
  2416   000A5A  5018               	movf	(Actualizar_Matriz@i+1)^0,w,c
  2417   000A5C  E109               	bnz	u740
  2418   000A5E  0E04               	movlw	4
  2419   000A60  5C17               	subwf	Actualizar_Matriz@i^0,w,c
  2420   000A62  A0D8               	btfss	status,0,c
  2421   000A64  EF36  F005         	goto	u741
  2422   000A68  EF38  F005         	goto	u740
  2423   000A6C                     u741:
  2424   000A6C  EF11  F005         	goto	l1556
  2425   000A70                     u740:
  2426   000A70                     
  2427                           ;ASCENSOR.c: 116:     Lcd_Set_Cursor(2,12);
  2428   000A70  0E0C               	movlw	12
  2429   000A72  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  2430   000A74  0E02               	movlw	2
  2431   000A76  EC33  F006         	call	_Lcd_Set_Cursor
  2432   000A7A                     
  2433                           ;ASCENSOR.c: 117:     for(int i=0;i<=3;i++){
  2434   000A7A  0E00               	movlw	0
  2435   000A7C  6E1A               	movwf	(Actualizar_Matriz@i_671+1)^0,c
  2436   000A7E  0E00               	movlw	0
  2437   000A80  6E19               	movwf	Actualizar_Matriz@i_671^0,c
  2438   000A82                     l1574:
  2439                           
  2440                           ;ASCENSOR.c: 118:         if (Fila2[i]==0){
  2441   000A82  5019               	movf	Actualizar_Matriz@i_671^0,w,c
  2442   000A84  0D02               	mullw	2
  2443   000A86  50F3               	movf	243,w,c
  2444   000A88  0F27               	addlw	low _Fila2
  2445   000A8A  6ED9               	movwf	fsr2l,c
  2446   000A8C  6ADA               	clrf	fsr2h,c
  2447   000A8E  50DE               	movf	postinc2,w,c
  2448   000A90  10DE               	iorwf	postinc2,w,c
  2449   000A92  A4D8               	btfss	status,2,c
  2450   000A94  EF4E  F005         	goto	u751
  2451   000A98  EF50  F005         	goto	u750
  2452   000A9C                     u751:
  2453   000A9C  EF55  F005         	goto	l1578
  2454   000AA0                     u750:
  2455   000AA0                     
  2456                           ;ASCENSOR.c: 119:             Lcd_Write_Char(0);
  2457   000AA0  0E00               	movlw	0
  2458   000AA2  EC94  F008         	call	_Lcd_Write_Char
  2459                           
  2460                           ;ASCENSOR.c: 120:         }
  2461   000AA6  EF58  F005         	goto	l1580
  2462   000AAA                     l1578:
  2463                           
  2464                           ;ASCENSOR.c: 122:         {;ASCENSOR.c: 123:             Lcd_Write_Char(1);
  2465   000AAA  0E01               	movlw	1
  2466   000AAC  EC94  F008         	call	_Lcd_Write_Char
  2467   000AB0                     l1580:
  2468                           
  2469                           ;ASCENSOR.c: 125:     }
  2470   000AB0  4A19               	infsnz	Actualizar_Matriz@i_671^0,f,c
  2471   000AB2  2A1A               	incf	(Actualizar_Matriz@i_671+1)^0,f,c
  2472   000AB4  BE1A               	btfsc	(Actualizar_Matriz@i_671+1)^0,7,c
  2473   000AB6  EF66  F005         	goto	u761
  2474   000ABA  501A               	movf	(Actualizar_Matriz@i_671+1)^0,w,c
  2475   000ABC  E109               	bnz	u760
  2476   000ABE  0E04               	movlw	4
  2477   000AC0  5C19               	subwf	Actualizar_Matriz@i_671^0,w,c
  2478   000AC2  A0D8               	btfss	status,0,c
  2479   000AC4  EF66  F005         	goto	u761
  2480   000AC8  EF68  F005         	goto	u760
  2481   000ACC                     u761:
  2482   000ACC  EF41  F005         	goto	l1574
  2483   000AD0                     u760:
  2484   000AD0                     
  2485                           ;ASCENSOR.c: 126:     Lcd_Set_Cursor(3,12);
  2486   000AD0  0E0C               	movlw	12
  2487   000AD2  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  2488   000AD4  0E03               	movlw	3
  2489   000AD6  EC33  F006         	call	_Lcd_Set_Cursor
  2490   000ADA                     
  2491                           ;ASCENSOR.c: 127:     for(int i=0;i<=3;i++){
  2492   000ADA  0E00               	movlw	0
  2493   000ADC  6E1C               	movwf	(Actualizar_Matriz@i_672+1)^0,c
  2494   000ADE  0E00               	movlw	0
  2495   000AE0  6E1B               	movwf	Actualizar_Matriz@i_672^0,c
  2496   000AE2                     l1592:
  2497                           
  2498                           ;ASCENSOR.c: 128:         if (Fila3[i]==0){
  2499   000AE2  501B               	movf	Actualizar_Matriz@i_672^0,w,c
  2500   000AE4  0D02               	mullw	2
  2501   000AE6  50F3               	movf	243,w,c
  2502   000AE8  0F1F               	addlw	low _Fila3
  2503   000AEA  6ED9               	movwf	fsr2l,c
  2504   000AEC  6ADA               	clrf	fsr2h,c
  2505   000AEE  50DE               	movf	postinc2,w,c
  2506   000AF0  10DE               	iorwf	postinc2,w,c
  2507   000AF2  A4D8               	btfss	status,2,c
  2508   000AF4  EF7E  F005         	goto	u771
  2509   000AF8  EF80  F005         	goto	u770
  2510   000AFC                     u771:
  2511   000AFC  EF85  F005         	goto	l1596
  2512   000B00                     u770:
  2513   000B00                     
  2514                           ;ASCENSOR.c: 129:             Lcd_Write_Char(0);
  2515   000B00  0E00               	movlw	0
  2516   000B02  EC94  F008         	call	_Lcd_Write_Char
  2517                           
  2518                           ;ASCENSOR.c: 130:         }
  2519   000B06  EF88  F005         	goto	l1598
  2520   000B0A                     l1596:
  2521                           
  2522                           ;ASCENSOR.c: 132:         {;ASCENSOR.c: 133:             Lcd_Write_Char(1);
  2523   000B0A  0E01               	movlw	1
  2524   000B0C  EC94  F008         	call	_Lcd_Write_Char
  2525   000B10                     l1598:
  2526                           
  2527                           ;ASCENSOR.c: 135:     }
  2528   000B10  4A1B               	infsnz	Actualizar_Matriz@i_672^0,f,c
  2529   000B12  2A1C               	incf	(Actualizar_Matriz@i_672+1)^0,f,c
  2530   000B14  BE1C               	btfsc	(Actualizar_Matriz@i_672+1)^0,7,c
  2531   000B16  EF96  F005         	goto	u781
  2532   000B1A  501C               	movf	(Actualizar_Matriz@i_672+1)^0,w,c
  2533   000B1C  E109               	bnz	u780
  2534   000B1E  0E04               	movlw	4
  2535   000B20  5C1B               	subwf	Actualizar_Matriz@i_672^0,w,c
  2536   000B22  A0D8               	btfss	status,0,c
  2537   000B24  EF96  F005         	goto	u781
  2538   000B28  EF98  F005         	goto	u780
  2539   000B2C                     u781:
  2540   000B2C  EF71  F005         	goto	l1592
  2541   000B30                     u780:
  2542   000B30                     
  2543                           ;ASCENSOR.c: 136:     Lcd_Set_Cursor(1,12);
  2544   000B30  0E0C               	movlw	12
  2545   000B32  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  2546   000B34  0E01               	movlw	1
  2547   000B36  EC33  F006         	call	_Lcd_Set_Cursor
  2548   000B3A                     
  2549                           ;ASCENSOR.c: 137:     f=1;
  2550   000B3A  0E01               	movlw	1
  2551   000B3C  6E38               	movwf	_f^0,c
  2552   000B3E                     
  2553                           ;ASCENSOR.c: 138:     c=12;
  2554   000B3E  0E0C               	movlw	12
  2555   000B40  6E37               	movwf	_c^0,c
  2556   000B42  0012               	return		;funcret
  2557   000B44                     __end_of_Actualizar_Matriz:
  2558                           	callstack 0
  2559                           
  2560 ;; *************** function _Lcd_Write_Char *****************
  2561 ;; Defined at:
  2562 ;;		line 88 in file "lcd.c"
  2563 ;; Parameters:    Size  Location     Type
  2564 ;;  a               1    wreg     unsigned char 
  2565 ;; Auto vars:     Size  Location     Type
  2566 ;;  a               1   15[COMRAM] unsigned char 
  2567 ;;  y               1   14[COMRAM] unsigned char 
  2568 ;;  temp            1   13[COMRAM] unsigned char 
  2569 ;; Return value:  Size  Location     Type
  2570 ;;                  1    wreg      void 
  2571 ;; Registers used:
  2572 ;;		wreg, status,2, status,0, cstack
  2573 ;; Tracked objects:
  2574 ;;		On entry : 0/0
  2575 ;;		On exit  : 0/0
  2576 ;;		Unchanged: 0/0
  2577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2578 ;;      Params:         0       0       0       0       0       0       0       0       0
  2579 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2580 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2581 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2582 ;;Total ram usage:        3 bytes
  2583 ;; Hardware stack levels used: 1
  2584 ;; Hardware stack levels required when called: 6
  2585 ;; This function calls:
  2586 ;;		_Lcd_Port
  2587 ;; This function is called by:
  2588 ;;		_Actualizar_Matriz
  2589 ;;		_Modificar
  2590 ;;		_main
  2591 ;;		_Lcd_Write_String
  2592 ;;		_Lcd_CGRAM_CreateChar
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           	psect	text15
  2597   001128                     __ptext15:
  2598                           	callstack 0
  2599   001128                     _Lcd_Write_Char:
  2600                           	callstack 23
  2601                           
  2602                           ;incstack = 0
  2603                           ;Lcd_Write_Char@a stored from wreg
  2604   001128  6E10               	movwf	Lcd_Write_Char@a^0,c
  2605   00112A                     
  2606                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
  2607   00112A  5010               	movf	Lcd_Write_Char@a^0,w,c
  2608   00112C  0B0F               	andlw	15
  2609   00112E  6E0E               	movwf	Lcd_Write_Char@temp^0,c
  2610                           
  2611                           ;lcd.c: 92:     y = a&0xF0;
  2612   001130  5010               	movf	Lcd_Write_Char@a^0,w,c
  2613   001132  0BF0               	andlw	240
  2614   001134  6E0F               	movwf	Lcd_Write_Char@y^0,c
  2615   001136                     
  2616                           ;lcd.c: 93:     LATEbits.LE0 = 1;
  2617   001136  808D               	bsf	141,0,c	;volatile
  2618   001138                     
  2619                           ;lcd.c: 94:     Lcd_Port(y>>4);
  2620   001138  380F               	swapf	Lcd_Write_Char@y^0,w,c
  2621   00113A  0B0F               	andlw	15
  2622   00113C  ECCB  F007         	call	_Lcd_Port
  2623   001140                     
  2624                           ;lcd.c: 95:     LATEbits.LE1 = 1;
  2625   001140  828D               	bsf	141,1,c	;volatile
  2626   001142                     
  2627                           ;lcd.c: 96:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2628   001142  0E0D               	movlw	13
  2629   001144                     u1177:
  2630   001144  2EE8               	decfsz	wreg,f,c
  2631   001146  D7FE               	bra	u1177
  2632   001148  0000               	nop	
  2633   00114A                     
  2634                           ;lcd.c: 97:     LATEbits.LE1 = 0;
  2635   00114A  928D               	bcf	141,1,c	;volatile
  2636   00114C                     
  2637                           ;lcd.c: 98:     Lcd_Port(temp);
  2638   00114C  500E               	movf	Lcd_Write_Char@temp^0,w,c
  2639   00114E  ECCB  F007         	call	_Lcd_Port
  2640   001152                     
  2641                           ;lcd.c: 99:     LATEbits.LE1 = 1;
  2642   001152  828D               	bsf	141,1,c	;volatile
  2643   001154                     
  2644                           ;lcd.c: 100:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2645   001154  0E0D               	movlw	13
  2646   001156                     u1187:
  2647   001156  2EE8               	decfsz	wreg,f,c
  2648   001158  D7FE               	bra	u1187
  2649   00115A  0000               	nop	
  2650   00115C                     
  2651                           ;lcd.c: 101:     LATEbits.LE1 = 0;
  2652   00115C  928D               	bcf	141,1,c	;volatile
  2653   00115E  0012               	return		;funcret
  2654   001160                     __end_of_Lcd_Write_Char:
  2655                           	callstack 0
  2656                           
  2657 ;; *************** function _Lcd_Set_Cursor *****************
  2658 ;; Defined at:
  2659 ;;		line 26 in file "lcd.c"
  2660 ;; Parameters:    Size  Location     Type
  2661 ;;  a               1    wreg     unsigned char 
  2662 ;;  b               1   15[COMRAM] unsigned char 
  2663 ;; Auto vars:     Size  Location     Type
  2664 ;;  a               1   16[COMRAM] unsigned char 
  2665 ;;  temp            1   19[COMRAM] unsigned char 
  2666 ;;  y               1   18[COMRAM] unsigned char 
  2667 ;;  z               1   17[COMRAM] unsigned char 
  2668 ;; Return value:  Size  Location     Type
  2669 ;;                  1    wreg      void 
  2670 ;; Registers used:
  2671 ;;		wreg, status,2, status,0, cstack
  2672 ;; Tracked objects:
  2673 ;;		On entry : 0/0
  2674 ;;		On exit  : 0/0
  2675 ;;		Unchanged: 0/0
  2676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2677 ;;      Params:         1       0       0       0       0       0       0       0       0
  2678 ;;      Locals:         4       0       0       0       0       0       0       0       0
  2679 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2680 ;;      Totals:         5       0       0       0       0       0       0       0       0
  2681 ;;Total ram usage:        5 bytes
  2682 ;; Hardware stack levels used: 1
  2683 ;; Hardware stack levels required when called: 7
  2684 ;; This function calls:
  2685 ;;		_Lcd_Cmd
  2686 ;; This function is called by:
  2687 ;;		_Actualizar_Matriz
  2688 ;;		_main
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           	psect	text16
  2693   000C66                     __ptext16:
  2694                           	callstack 0
  2695   000C66                     _Lcd_Set_Cursor:
  2696                           	callstack 23
  2697                           
  2698                           ;incstack = 0
  2699                           ;Lcd_Set_Cursor@a stored from wreg
  2700   000C66  6E11               	movwf	Lcd_Set_Cursor@a^0,c
  2701   000C68                     
  2702                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
  2703   000C68  0411               	decf	Lcd_Set_Cursor@a^0,w,c
  2704   000C6A  A4D8               	btfss	status,2,c
  2705   000C6C  EF3A  F006         	goto	u691
  2706   000C70  EF3C  F006         	goto	u690
  2707   000C74                     u691:
  2708   000C74  EF4D  F006         	goto	l1514
  2709   000C78                     u690:
  2710   000C78                     
  2711                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
  2712   000C78  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  2713   000C7A  0F7F               	addlw	127
  2714   000C7C  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  2715                           
  2716                           ;lcd.c: 32:         z = temp>>4;
  2717   000C7E  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  2718   000C80  0B0F               	andlw	15
  2719   000C82  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  2720                           
  2721                           ;lcd.c: 33:         y = temp & 0x0F;
  2722   000C84  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  2723   000C86  0B0F               	andlw	15
  2724   000C88  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  2725   000C8A                     
  2726                           ;lcd.c: 34:         Lcd_Cmd(z);
  2727   000C8A  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  2728   000C8C  ECB0  F008         	call	_Lcd_Cmd
  2729   000C90                     
  2730                           ;lcd.c: 35:         Lcd_Cmd(y);
  2731   000C90  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  2732   000C92  ECB0  F008         	call	_Lcd_Cmd
  2733                           
  2734                           ;lcd.c: 36:     }
  2735   000C96  EF9B  F006         	goto	l231
  2736   000C9A                     l1514:
  2737   000C9A  0E02               	movlw	2
  2738   000C9C  1811               	xorwf	Lcd_Set_Cursor@a^0,w,c
  2739   000C9E  A4D8               	btfss	status,2,c
  2740   000CA0  EF54  F006         	goto	u701
  2741   000CA4  EF56  F006         	goto	u700
  2742   000CA8                     u701:
  2743   000CA8  EF67  F006         	goto	l1522
  2744   000CAC                     u700:
  2745   000CAC                     
  2746                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
  2747   000CAC  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  2748   000CAE  0FBF               	addlw	191
  2749   000CB0  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  2750                           
  2751                           ;lcd.c: 40:         z = temp>>4;
  2752   000CB2  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  2753   000CB4  0B0F               	andlw	15
  2754   000CB6  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  2755                           
  2756                           ;lcd.c: 41:         y = temp & 0x0F;
  2757   000CB8  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  2758   000CBA  0B0F               	andlw	15
  2759   000CBC  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  2760   000CBE                     
  2761                           ;lcd.c: 42:         Lcd_Cmd(z);
  2762   000CBE  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  2763   000CC0  ECB0  F008         	call	_Lcd_Cmd
  2764   000CC4                     
  2765                           ;lcd.c: 43:         Lcd_Cmd(y);
  2766   000CC4  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  2767   000CC6  ECB0  F008         	call	_Lcd_Cmd
  2768                           
  2769                           ;lcd.c: 44:     }
  2770   000CCA  EF9B  F006         	goto	l231
  2771   000CCE                     l1522:
  2772   000CCE  0E03               	movlw	3
  2773   000CD0  1811               	xorwf	Lcd_Set_Cursor@a^0,w,c
  2774   000CD2  A4D8               	btfss	status,2,c
  2775   000CD4  EF6E  F006         	goto	u711
  2776   000CD8  EF70  F006         	goto	u710
  2777   000CDC                     u711:
  2778   000CDC  EF81  F006         	goto	l1530
  2779   000CE0                     u710:
  2780   000CE0                     
  2781                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x90 + b - 1;
  2782   000CE0  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  2783   000CE2  0F8F               	addlw	143
  2784   000CE4  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  2785                           
  2786                           ;lcd.c: 48:         z = temp>>4;
  2787   000CE6  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  2788   000CE8  0B0F               	andlw	15
  2789   000CEA  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  2790                           
  2791                           ;lcd.c: 49:         y = temp & 0x0F;
  2792   000CEC  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  2793   000CEE  0B0F               	andlw	15
  2794   000CF0  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  2795   000CF2                     
  2796                           ;lcd.c: 50:         Lcd_Cmd(z);
  2797   000CF2  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  2798   000CF4  ECB0  F008         	call	_Lcd_Cmd
  2799   000CF8                     
  2800                           ;lcd.c: 51:         Lcd_Cmd(y);
  2801   000CF8  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  2802   000CFA  ECB0  F008         	call	_Lcd_Cmd
  2803                           
  2804                           ;lcd.c: 52:     }
  2805   000CFE  EF9B  F006         	goto	l231
  2806   000D02                     l1530:
  2807   000D02  0E04               	movlw	4
  2808   000D04  1811               	xorwf	Lcd_Set_Cursor@a^0,w,c
  2809   000D06  A4D8               	btfss	status,2,c
  2810   000D08  EF88  F006         	goto	u721
  2811   000D0C  EF8A  F006         	goto	u720
  2812   000D10                     u721:
  2813   000D10  EF9B  F006         	goto	l227
  2814   000D14                     u720:
  2815   000D14                     
  2816                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD0 + b - 1;
  2817   000D14  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  2818   000D16  0FCF               	addlw	207
  2819   000D18  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  2820                           
  2821                           ;lcd.c: 56:         z = temp>>4;
  2822   000D1A  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  2823   000D1C  0B0F               	andlw	15
  2824   000D1E  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  2825                           
  2826                           ;lcd.c: 57:         y = temp & 0x0F;
  2827   000D20  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  2828   000D22  0B0F               	andlw	15
  2829   000D24  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  2830   000D26                     
  2831                           ;lcd.c: 58:         Lcd_Cmd(z);
  2832   000D26  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  2833   000D28  ECB0  F008         	call	_Lcd_Cmd
  2834   000D2C                     
  2835                           ;lcd.c: 59:         Lcd_Cmd(y);
  2836   000D2C  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  2837   000D2E  ECB0  F008         	call	_Lcd_Cmd
  2838   000D32  EF9B  F006         	goto	l231
  2839   000D36                     l227:
  2840   000D36                     l231:
  2841   000D36  0012               	return		;funcret
  2842   000D38                     __end_of_Lcd_Set_Cursor:
  2843                           	callstack 0
  2844                           
  2845 ;; *************** function _Lcd_Cmd *****************
  2846 ;; Defined at:
  2847 ;;		line 11 in file "lcd.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  a               1    wreg     unsigned char 
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;  a               1   14[COMRAM] unsigned char 
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  1    wreg      void 
  2854 ;; Registers used:
  2855 ;;		wreg, status,2, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 0/0
  2858 ;;		On exit  : 0/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2861 ;;      Params:         0       0       0       0       0       0       0       0       0
  2862 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2863 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2864 ;;      Totals:         2       0       0       0       0       0       0       0       0
  2865 ;;Total ram usage:        2 bytes
  2866 ;; Hardware stack levels used: 1
  2867 ;; Hardware stack levels required when called: 6
  2868 ;; This function calls:
  2869 ;;		_Lcd_Port
  2870 ;; This function is called by:
  2871 ;;		_Lcd_Clear
  2872 ;;		_Lcd_Set_Cursor
  2873 ;;		_Lcd_Init
  2874 ;;		_Lcd_NoBlink
  2875 ;;		_Lcd_CGRAM_Init
  2876 ;;		_Lcd_CGRAM_Close
  2877 ;;		_Lcd_Shift_Right
  2878 ;;		_Lcd_Shift_Left
  2879 ;; This function uses a non-reentrant model
  2880 ;;
  2881                           
  2882                           	psect	text17
  2883   001160                     __ptext17:
  2884                           	callstack 0
  2885   001160                     _Lcd_Cmd:
  2886                           	callstack 22
  2887                           
  2888                           ;incstack = 0
  2889                           ;Lcd_Cmd@a stored from wreg
  2890   001160  6E0F               	movwf	Lcd_Cmd@a^0,c
  2891   001162                     
  2892                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATEbits.LE0 = 0;
  2893   001162  908D               	bcf	141,0,c	;volatile
  2894   001164                     
  2895                           ;lcd.c: 14:     Lcd_Port(a);
  2896   001164  500F               	movf	Lcd_Cmd@a^0,w,c
  2897   001166  ECCB  F007         	call	_Lcd_Port
  2898   00116A                     
  2899                           ;lcd.c: 15:     LATEbits.LE1 = 1;
  2900   00116A  828D               	bsf	141,1,c	;volatile
  2901   00116C                     
  2902                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
  2903   00116C  0E06               	movlw	6
  2904   00116E  6E0E               	movwf	??_Lcd_Cmd^0,c
  2905   001170  0E30               	movlw	48
  2906   001172                     u1197:
  2907   001172  2EE8               	decfsz	wreg,f,c
  2908   001174  D7FE               	bra	u1197
  2909   001176  2E0E               	decfsz	??_Lcd_Cmd^0,f,c
  2910   001178  D7FC               	bra	u1197
  2911   00117A  D000               	nop2	
  2912   00117C                     
  2913                           ;lcd.c: 17:     LATEbits.LE1 = 0;
  2914   00117C  928D               	bcf	141,1,c	;volatile
  2915   00117E  0012               	return		;funcret
  2916   001180                     __end_of_Lcd_Cmd:
  2917                           	callstack 0
  2918                           
  2919 ;; *************** function _Lcd_Port *****************
  2920 ;; Defined at:
  2921 ;;		line 3 in file "lcd.c"
  2922 ;; Parameters:    Size  Location     Type
  2923 ;;  a               1    wreg     unsigned char 
  2924 ;; Auto vars:     Size  Location     Type
  2925 ;;  a               1   12[COMRAM] unsigned char 
  2926 ;; Return value:  Size  Location     Type
  2927 ;;                  1    wreg      void 
  2928 ;; Registers used:
  2929 ;;		wreg
  2930 ;; Tracked objects:
  2931 ;;		On entry : 0/0
  2932 ;;		On exit  : 0/0
  2933 ;;		Unchanged: 0/0
  2934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2935 ;;      Params:         0       0       0       0       0       0       0       0       0
  2936 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2937 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2938 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2939 ;;Total ram usage:        1 bytes
  2940 ;; Hardware stack levels used: 1
  2941 ;; Hardware stack levels required when called: 5
  2942 ;; This function calls:
  2943 ;;		Nothing
  2944 ;; This function is called by:
  2945 ;;		_Lcd_Cmd
  2946 ;;		_Lcd_Init
  2947 ;;		_Lcd_Write_Char
  2948 ;; This function uses a non-reentrant model
  2949 ;;
  2950                           
  2951                           	psect	text18
  2952   000F96                     __ptext18:
  2953                           	callstack 0
  2954   000F96                     _Lcd_Port:
  2955                           	callstack 23
  2956                           
  2957                           ;incstack = 0
  2958                           ;Lcd_Port@a stored from wreg
  2959   000F96  6E0D               	movwf	Lcd_Port@a^0,c
  2960   000F98                     
  2961                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LD4 = 1) 
      +                          : (LATDbits.LD4 = 0);
  2962   000F98  A00D               	btfss	Lcd_Port@a^0,0,c
  2963   000F9A  EFD1  F007         	goto	u11
  2964   000F9E  EFD3  F007         	goto	u10
  2965   000FA2                     u11:
  2966   000FA2  EFD6  F007         	goto	l200
  2967   000FA6                     u10:
  2968   000FA6  888C               	bsf	140,4,c	;volatile
  2969   000FA8  EFD7  F007         	goto	l970
  2970   000FAC                     l200:
  2971   000FAC  988C               	bcf	140,4,c	;volatile
  2972   000FAE                     l970:
  2973                           
  2974                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LD5 = 1) : (LATDbits.LD5 = 0);
  2975   000FAE  A20D               	btfss	Lcd_Port@a^0,1,c
  2976   000FB0  EFDC  F007         	goto	u21
  2977   000FB4  EFDE  F007         	goto	u20
  2978   000FB8                     u21:
  2979   000FB8  EFE1  F007         	goto	l204
  2980   000FBC                     u20:
  2981   000FBC  8A8C               	bsf	140,5,c	;volatile
  2982   000FBE  EFE2  F007         	goto	l974
  2983   000FC2                     l204:
  2984   000FC2  9A8C               	bcf	140,5,c	;volatile
  2985   000FC4                     l974:
  2986                           
  2987                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LD6 = 1) : (LATDbits.LD6 = 0);
  2988   000FC4  A40D               	btfss	Lcd_Port@a^0,2,c
  2989   000FC6  EFE7  F007         	goto	u31
  2990   000FCA  EFE9  F007         	goto	u30
  2991   000FCE                     u31:
  2992   000FCE  EFEC  F007         	goto	l208
  2993   000FD2                     u30:
  2994   000FD2  8C8C               	bsf	140,6,c	;volatile
  2995   000FD4  EFED  F007         	goto	l978
  2996   000FD8                     l208:
  2997   000FD8  9C8C               	bcf	140,6,c	;volatile
  2998   000FDA                     l978:
  2999                           
  3000                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LD7 = 1) : (LATDbits.LD7 = 0);
  3001   000FDA  A60D               	btfss	Lcd_Port@a^0,3,c
  3002   000FDC  EFF2  F007         	goto	u41
  3003   000FE0  EFF4  F007         	goto	u40
  3004   000FE4                     u41:
  3005   000FE4  EFF7  F007         	goto	l212
  3006   000FE8                     u40:
  3007   000FE8  8E8C               	bsf	140,7,c	;volatile
  3008   000FEA  EFF8  F007         	goto	l215
  3009   000FEE                     l212:
  3010   000FEE  9E8C               	bcf	140,7,c	;volatile
  3011   000FF0                     l215:
  3012   000FF0  0012               	return		;funcret
  3013   000FF2                     __end_of_Lcd_Port:
  3014                           	callstack 0
  3015                           
  3016 ;; *************** function _LowISR *****************
  3017 ;; Defined at:
  3018 ;;		line 151 in file "ASCENSOR.c"
  3019 ;; Parameters:    Size  Location     Type
  3020 ;;		None
  3021 ;; Auto vars:     Size  Location     Type
  3022 ;;  dummy           1   11[COMRAM] volatile unsigned char 
  3023 ;; Return value:  Size  Location     Type
  3024 ;;                  1    wreg      void 
  3025 ;; Registers used:
  3026 ;;		wreg, status,2, status,0, cstack
  3027 ;; Tracked objects:
  3028 ;;		On entry : 0/0
  3029 ;;		On exit  : 0/0
  3030 ;;		Unchanged: 0/0
  3031 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3032 ;;      Params:         0       0       0       0       0       0       0       0       0
  3033 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3034 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3035 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3036 ;;Total ram usage:        4 bytes
  3037 ;; Hardware stack levels used: 1
  3038 ;; Hardware stack levels required when called: 4
  3039 ;; This function calls:
  3040 ;;		_Lcd_Blink
  3041 ;;		i1_Lcd_Set_Cursor
  3042 ;; This function is called by:
  3043 ;;		Interrupt level 1
  3044 ;; This function uses a non-reentrant model
  3045 ;;
  3046                           
  3047                           	psect	intcodelo
  3048   000018                     __pintcodelo:
  3049                           	callstack 0
  3050   000018                     _LowISR:
  3051                           	callstack 22
  3052                           
  3053                           ;incstack = 0
  3054   000018  803C               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  3055   00001A  CFD8 F009          	movff	status,??_LowISR
  3056   00001E  CFE8 F00A          	movff	wreg,??_LowISR+1
  3057   000022  CFE0 F00B          	movff	bsr,??_LowISR+2
  3058   000026                     
  3059                           ;ASCENSOR.c: 152:     Lcd_Blink();
  3060   000026  EC1B  F009         	call	_Lcd_Blink	;wreg free
  3061   00002A                     
  3062                           ;ASCENSOR.c: 153:     if (INTCONbits.RBIF){
  3063   00002A  A0F2               	btfss	242,0,c	;volatile
  3064   00002C  EF1A  F000         	goto	i1u92_21
  3065   000030  EF1C  F000         	goto	i1u92_20
  3066   000034                     i1u92_21:
  3067   000034  EF64  F000         	goto	i1l147
  3068   000038                     i1u92_20:
  3069   000038                     
  3070                           ;ASCENSOR.c: 154:        volatile unsigned char dummy = PORTB;
  3071   000038  CF81 F00C          	movff	3969,LowISR@dummy	;volatile
  3072                           
  3073                           ;ASCENSOR.c: 155:        INTCONbits.RBIF=0;
  3074   00003C  90F2               	bcf	242,0,c	;volatile
  3075                           
  3076                           ;ASCENSOR.c: 157:        if (PORTBbits.RB6==1 && f>1){
  3077   00003E  AC81               	btfss	129,6,c	;volatile
  3078   000040  EF24  F000         	goto	i1u93_21
  3079   000044  EF26  F000         	goto	i1u93_20
  3080   000048                     i1u93_21:
  3081   000048  EF2F  F000         	goto	i1l1760
  3082   00004C                     i1u93_20:
  3083   00004C  0E01               	movlw	1
  3084   00004E  6438               	cpfsgt	_f^0,c
  3085   000050  EF2C  F000         	goto	i1u94_21
  3086   000054  EF2E  F000         	goto	i1u94_20
  3087   000058                     i1u94_21:
  3088   000058  EF2F  F000         	goto	i1l1760
  3089   00005C                     i1u94_20:
  3090   00005C                     
  3091                           ;ASCENSOR.c: 158:            f--;
  3092   00005C  0638               	decf	_f^0,f,c
  3093   00005E                     i1l1760:
  3094                           
  3095                           ;ASCENSOR.c: 160:        if (PORTBbits.RB7==1 && f<3){
  3096   00005E  AE81               	btfss	129,7,c	;volatile
  3097   000060  EF34  F000         	goto	i1u95_21
  3098   000064  EF36  F000         	goto	i1u95_20
  3099   000068                     i1u95_21:
  3100   000068  EF3F  F000         	goto	i1l1766
  3101   00006C                     i1u95_20:
  3102   00006C  0E03               	movlw	3
  3103   00006E  6038               	cpfslt	_f^0,c
  3104   000070  EF3C  F000         	goto	i1u96_21
  3105   000074  EF3E  F000         	goto	i1u96_20
  3106   000078                     i1u96_21:
  3107   000078  EF3F  F000         	goto	i1l1766
  3108   00007C                     i1u96_20:
  3109   00007C                     
  3110                           ;ASCENSOR.c: 161:            f++;
  3111   00007C  2A38               	incf	_f^0,f,c
  3112   00007E                     i1l1766:
  3113                           
  3114                           ;ASCENSOR.c: 163:        if (PORTBbits.RB4==1 && c>12){
  3115   00007E  A881               	btfss	129,4,c	;volatile
  3116   000080  EF44  F000         	goto	i1u97_21
  3117   000084  EF46  F000         	goto	i1u97_20
  3118   000088                     i1u97_21:
  3119   000088  EF4F  F000         	goto	i1l1772
  3120   00008C                     i1u97_20:
  3121   00008C  0E0C               	movlw	12
  3122   00008E  6437               	cpfsgt	_c^0,c
  3123   000090  EF4C  F000         	goto	i1u98_21
  3124   000094  EF4E  F000         	goto	i1u98_20
  3125   000098                     i1u98_21:
  3126   000098  EF4F  F000         	goto	i1l1772
  3127   00009C                     i1u98_20:
  3128   00009C                     
  3129                           ;ASCENSOR.c: 164:           c--;
  3130   00009C  0637               	decf	_c^0,f,c
  3131   00009E                     i1l1772:
  3132                           
  3133                           ;ASCENSOR.c: 166:        if (PORTBbits.RB5==1 && c< 15){
  3134   00009E  AA81               	btfss	129,5,c	;volatile
  3135   0000A0  EF54  F000         	goto	i1u99_21
  3136   0000A4  EF56  F000         	goto	i1u99_20
  3137   0000A8                     i1u99_21:
  3138   0000A8  EF5F  F000         	goto	i1l1778
  3139   0000AC                     i1u99_20:
  3140   0000AC  0E0F               	movlw	15
  3141   0000AE  6037               	cpfslt	_c^0,c
  3142   0000B0  EF5C  F000         	goto	i1u100_21
  3143   0000B4  EF5E  F000         	goto	i1u100_20
  3144   0000B8                     i1u100_21:
  3145   0000B8  EF5F  F000         	goto	i1l1778
  3146   0000BC                     i1u100_20:
  3147   0000BC                     
  3148                           ;ASCENSOR.c: 167:            c++;
  3149   0000BC  2A37               	incf	_c^0,f,c
  3150   0000BE                     i1l1778:
  3151                           
  3152                           ;ASCENSOR.c: 170:        Lcd_Set_Cursor(f,c);
  3153   0000BE  C037  F004         	movff	_c,i1Lcd_Set_Cursor@b
  3154   0000C2  5038               	movf	_f^0,w,c
  3155   0000C4  EC9C  F006         	call	i1_Lcd_Set_Cursor
  3156   0000C8                     i1l147:
  3157   0000C8  C00B  FFE0         	movff	??_LowISR+2,bsr
  3158   0000CC  C00A  FFE8         	movff	??_LowISR+1,wreg
  3159   0000D0  C009  FFD8         	movff	??_LowISR,status
  3160   0000D4  903C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3161   0000D6  0010               	retfie	
  3162   0000D8                     __end_of_LowISR:
  3163                           	callstack 0
  3164                           
  3165 ;; *************** function i1_Lcd_Set_Cursor *****************
  3166 ;; Defined at:
  3167 ;;		line 26 in file "lcd.c"
  3168 ;; Parameters:    Size  Location     Type
  3169 ;;  a               1    wreg     unsigned char 
  3170 ;;  b               1    3[COMRAM] unsigned char 
  3171 ;; Auto vars:     Size  Location     Type
  3172 ;;  a               1    4[COMRAM] unsigned char 
  3173 ;;  temp            1    7[COMRAM] unsigned char 
  3174 ;;  y               1    6[COMRAM] unsigned char 
  3175 ;;  z               1    5[COMRAM] unsigned char 
  3176 ;; Return value:  Size  Location     Type
  3177 ;;                  1    wreg      void 
  3178 ;; Registers used:
  3179 ;;		wreg, status,2, status,0, cstack
  3180 ;; Tracked objects:
  3181 ;;		On entry : 0/0
  3182 ;;		On exit  : 0/0
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3185 ;;      Params:         1       0       0       0       0       0       0       0       0
  3186 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3187 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3188 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3189 ;;Total ram usage:        5 bytes
  3190 ;; Hardware stack levels used: 1
  3191 ;; Hardware stack levels required when called: 3
  3192 ;; This function calls:
  3193 ;;		i1_Lcd_Cmd
  3194 ;; This function is called by:
  3195 ;;		_LowISR
  3196 ;; This function uses a non-reentrant model
  3197 ;;
  3198                           
  3199                           	psect	text20
  3200   000D38                     __ptext20:
  3201                           	callstack 0
  3202   000D38                     i1_Lcd_Set_Cursor:
  3203                           	callstack 22
  3204                           
  3205                           ;incstack = 0
  3206                           ;i1Lcd_Set_Cursor@a stored from wreg
  3207   000D38  6E05               	movwf	i1Lcd_Set_Cursor@a^0,c
  3208   000D3A                     
  3209                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
  3210   000D3A  0405               	decf	i1Lcd_Set_Cursor@a^0,w,c
  3211   000D3C  A4D8               	btfss	status,2,c
  3212   000D3E  EFA3  F006         	goto	i1u88_21
  3213   000D42  EFA5  F006         	goto	i1u88_20
  3214   000D46                     i1u88_21:
  3215   000D46  EFB6  F006         	goto	i1l1726
  3216   000D4A                     i1u88_20:
  3217   000D4A                     
  3218                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
  3219   000D4A  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  3220   000D4C  0F7F               	addlw	127
  3221   000D4E  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  3222                           
  3223                           ;lcd.c: 32:         z = temp>>4;
  3224   000D50  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  3225   000D52  0B0F               	andlw	15
  3226   000D54  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  3227                           
  3228                           ;lcd.c: 33:         y = temp & 0x0F;
  3229   000D56  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  3230   000D58  0B0F               	andlw	15
  3231   000D5A  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  3232   000D5C                     
  3233                           ;lcd.c: 34:         Lcd_Cmd(z);
  3234   000D5C  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  3235   000D5E  ECC0  F008         	call	i1_Lcd_Cmd
  3236   000D62                     
  3237                           ;lcd.c: 35:         Lcd_Cmd(y);
  3238   000D62  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  3239   000D64  ECC0  F008         	call	i1_Lcd_Cmd
  3240                           
  3241                           ;lcd.c: 36:     }
  3242   000D68  EF04  F007         	goto	i1l231
  3243   000D6C                     i1l1726:
  3244   000D6C  0E02               	movlw	2
  3245   000D6E  1805               	xorwf	i1Lcd_Set_Cursor@a^0,w,c
  3246   000D70  A4D8               	btfss	status,2,c
  3247   000D72  EFBD  F006         	goto	i1u89_21
  3248   000D76  EFBF  F006         	goto	i1u89_20
  3249   000D7A                     i1u89_21:
  3250   000D7A  EFD0  F006         	goto	i1l1734
  3251   000D7E                     i1u89_20:
  3252   000D7E                     
  3253                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
  3254   000D7E  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  3255   000D80  0FBF               	addlw	191
  3256   000D82  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  3257                           
  3258                           ;lcd.c: 40:         z = temp>>4;
  3259   000D84  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  3260   000D86  0B0F               	andlw	15
  3261   000D88  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  3262                           
  3263                           ;lcd.c: 41:         y = temp & 0x0F;
  3264   000D8A  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  3265   000D8C  0B0F               	andlw	15
  3266   000D8E  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  3267   000D90                     
  3268                           ;lcd.c: 42:         Lcd_Cmd(z);
  3269   000D90  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  3270   000D92  ECC0  F008         	call	i1_Lcd_Cmd
  3271   000D96                     
  3272                           ;lcd.c: 43:         Lcd_Cmd(y);
  3273   000D96  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  3274   000D98  ECC0  F008         	call	i1_Lcd_Cmd
  3275                           
  3276                           ;lcd.c: 44:     }
  3277   000D9C  EF04  F007         	goto	i1l231
  3278   000DA0                     i1l1734:
  3279   000DA0  0E03               	movlw	3
  3280   000DA2  1805               	xorwf	i1Lcd_Set_Cursor@a^0,w,c
  3281   000DA4  A4D8               	btfss	status,2,c
  3282   000DA6  EFD7  F006         	goto	i1u90_21
  3283   000DAA  EFD9  F006         	goto	i1u90_20
  3284   000DAE                     i1u90_21:
  3285   000DAE  EFEA  F006         	goto	i1l1742
  3286   000DB2                     i1u90_20:
  3287   000DB2                     
  3288                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x90 + b - 1;
  3289   000DB2  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  3290   000DB4  0F8F               	addlw	143
  3291   000DB6  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  3292                           
  3293                           ;lcd.c: 48:         z = temp>>4;
  3294   000DB8  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  3295   000DBA  0B0F               	andlw	15
  3296   000DBC  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  3297                           
  3298                           ;lcd.c: 49:         y = temp & 0x0F;
  3299   000DBE  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  3300   000DC0  0B0F               	andlw	15
  3301   000DC2  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  3302   000DC4                     
  3303                           ;lcd.c: 50:         Lcd_Cmd(z);
  3304   000DC4  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  3305   000DC6  ECC0  F008         	call	i1_Lcd_Cmd
  3306   000DCA                     
  3307                           ;lcd.c: 51:         Lcd_Cmd(y);
  3308   000DCA  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  3309   000DCC  ECC0  F008         	call	i1_Lcd_Cmd
  3310                           
  3311                           ;lcd.c: 52:     }
  3312   000DD0  EF04  F007         	goto	i1l231
  3313   000DD4                     i1l1742:
  3314   000DD4  0E04               	movlw	4
  3315   000DD6  1805               	xorwf	i1Lcd_Set_Cursor@a^0,w,c
  3316   000DD8  A4D8               	btfss	status,2,c
  3317   000DDA  EFF1  F006         	goto	i1u91_21
  3318   000DDE  EFF3  F006         	goto	i1u91_20
  3319   000DE2                     i1u91_21:
  3320   000DE2  EF04  F007         	goto	i1l227
  3321   000DE6                     i1u91_20:
  3322   000DE6                     
  3323                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD0 + b - 1;
  3324   000DE6  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  3325   000DE8  0FCF               	addlw	207
  3326   000DEA  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  3327                           
  3328                           ;lcd.c: 56:         z = temp>>4;
  3329   000DEC  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  3330   000DEE  0B0F               	andlw	15
  3331   000DF0  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  3332                           
  3333                           ;lcd.c: 57:         y = temp & 0x0F;
  3334   000DF2  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  3335   000DF4  0B0F               	andlw	15
  3336   000DF6  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  3337   000DF8                     
  3338                           ;lcd.c: 58:         Lcd_Cmd(z);
  3339   000DF8  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  3340   000DFA  ECC0  F008         	call	i1_Lcd_Cmd
  3341   000DFE                     
  3342                           ;lcd.c: 59:         Lcd_Cmd(y);
  3343   000DFE  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  3344   000E00  ECC0  F008         	call	i1_Lcd_Cmd
  3345   000E04  EF04  F007         	goto	i1l231
  3346   000E08                     i1l227:
  3347   000E08                     i1l231:
  3348   000E08  0012               	return		;funcret
  3349   000E0A                     __end_ofi1_Lcd_Set_Cursor:
  3350                           	callstack 0
  3351                           
  3352 ;; *************** function _Lcd_Blink *****************
  3353 ;; Defined at:
  3354 ;;		line 123 in file "lcd.c"
  3355 ;; Parameters:    Size  Location     Type
  3356 ;;		None
  3357 ;; Auto vars:     Size  Location     Type
  3358 ;;		None
  3359 ;; Return value:  Size  Location     Type
  3360 ;;                  1    wreg      void 
  3361 ;; Registers used:
  3362 ;;		wreg, status,2, cstack
  3363 ;; Tracked objects:
  3364 ;;		On entry : 0/0
  3365 ;;		On exit  : 0/0
  3366 ;;		Unchanged: 0/0
  3367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3368 ;;      Params:         0       0       0       0       0       0       0       0       0
  3369 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3370 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3371 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3372 ;;Total ram usage:        0 bytes
  3373 ;; Hardware stack levels used: 1
  3374 ;; Hardware stack levels required when called: 3
  3375 ;; This function calls:
  3376 ;;		i1_Lcd_Cmd
  3377 ;; This function is called by:
  3378 ;;		_LowISR
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text21
  3383   001236                     __ptext21:
  3384                           	callstack 0
  3385   001236                     _Lcd_Blink:
  3386                           	callstack 22
  3387   001236                     
  3388                           ;lcd.c: 125:     Lcd_Cmd(0x00);
  3389   001236  0E00               	movlw	0
  3390   001238  ECC0  F008         	call	i1_Lcd_Cmd
  3391                           
  3392                           ;lcd.c: 126:     Lcd_Cmd(0x0F);
  3393   00123C  0E0F               	movlw	15
  3394   00123E  ECC0  F008         	call	i1_Lcd_Cmd
  3395   001242  0012               	return		;funcret
  3396   001244                     __end_of_Lcd_Blink:
  3397                           	callstack 0
  3398                           
  3399 ;; *************** function i1_Lcd_Cmd *****************
  3400 ;; Defined at:
  3401 ;;		line 11 in file "lcd.c"
  3402 ;; Parameters:    Size  Location     Type
  3403 ;;  a               1    wreg     unsigned char 
  3404 ;; Auto vars:     Size  Location     Type
  3405 ;;  a               1    2[COMRAM] unsigned char 
  3406 ;; Return value:  Size  Location     Type
  3407 ;;                  1    wreg      void 
  3408 ;; Registers used:
  3409 ;;		wreg, status,2, cstack
  3410 ;; Tracked objects:
  3411 ;;		On entry : 0/0
  3412 ;;		On exit  : 0/0
  3413 ;;		Unchanged: 0/0
  3414 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3415 ;;      Params:         0       0       0       0       0       0       0       0       0
  3416 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3417 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3418 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3419 ;;Total ram usage:        2 bytes
  3420 ;; Hardware stack levels used: 1
  3421 ;; Hardware stack levels required when called: 2
  3422 ;; This function calls:
  3423 ;;		i1_Lcd_Port
  3424 ;; This function is called by:
  3425 ;;		_Lcd_Blink
  3426 ;;		i1_Lcd_Set_Cursor
  3427 ;; This function uses a non-reentrant model
  3428 ;;
  3429                           
  3430                           	psect	text22
  3431   001180                     __ptext22:
  3432                           	callstack 0
  3433   001180                     i1_Lcd_Cmd:
  3434                           	callstack 22
  3435                           
  3436                           ;incstack = 0
  3437                           ;i1Lcd_Cmd@a stored from wreg
  3438   001180  6E03               	movwf	i1Lcd_Cmd@a^0,c
  3439   001182                     
  3440                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATEbits.LE0 = 0;
  3441   001182  908D               	bcf	141,0,c	;volatile
  3442   001184                     
  3443                           ;lcd.c: 14:     Lcd_Port(a);
  3444   001184  5003               	movf	i1Lcd_Cmd@a^0,w,c
  3445   001186  ECF9  F007         	call	i1_Lcd_Port
  3446   00118A                     
  3447                           ;lcd.c: 15:     LATEbits.LE1 = 1;
  3448   00118A  828D               	bsf	141,1,c	;volatile
  3449   00118C                     
  3450                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3451   00118C  0E06               	movlw	6
  3452   00118E  6E02               	movwf	??i1_Lcd_Cmd^0,c
  3453   001190  0E30               	movlw	48
  3454   001192                     i1u120_27:
  3455   001192  2EE8               	decfsz	wreg,f,c
  3456   001194  D7FE               	bra	i1u120_27
  3457   001196  2E02               	decfsz	??i1_Lcd_Cmd^0,f,c
  3458   001198  D7FC               	bra	i1u120_27
  3459   00119A  D000               	nop2	
  3460   00119C                     
  3461                           ;lcd.c: 17:     LATEbits.LE1 = 0;
  3462   00119C  928D               	bcf	141,1,c	;volatile
  3463   00119E  0012               	return		;funcret
  3464   0011A0                     __end_ofi1_Lcd_Cmd:
  3465                           	callstack 0
  3466                           
  3467 ;; *************** function i1_Lcd_Port *****************
  3468 ;; Defined at:
  3469 ;;		line 3 in file "lcd.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;  a               1    wreg     unsigned char 
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  a               1    0[COMRAM] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3483 ;;      Params:         0       0       0       0       0       0       0       0       0
  3484 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3485 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3486 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3487 ;;Total ram usage:        1 bytes
  3488 ;; Hardware stack levels used: 1
  3489 ;; Hardware stack levels required when called: 1
  3490 ;; This function calls:
  3491 ;;		Nothing
  3492 ;; This function is called by:
  3493 ;;		i1_Lcd_Cmd
  3494 ;; This function uses a non-reentrant model
  3495 ;;
  3496                           
  3497                           	psect	text23
  3498   000FF2                     __ptext23:
  3499                           	callstack 0
  3500   000FF2                     i1_Lcd_Port:
  3501                           	callstack 22
  3502                           
  3503                           ;incstack = 0
  3504                           ;i1Lcd_Port@a stored from wreg
  3505   000FF2  6E01               	movwf	i1Lcd_Port@a^0,c
  3506   000FF4                     
  3507                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LD4 = 1) 
      +                          : (LATDbits.LD4 = 0);
  3508   000FF4  A001               	btfss	i1Lcd_Port@a^0,0,c
  3509   000FF6  EFFF  F007         	goto	i1u65_21
  3510   000FFA  EF01  F008         	goto	i1u65_20
  3511   000FFE                     i1u65_21:
  3512   000FFE  EF04  F008         	goto	i1l200
  3513   001002                     i1u65_20:
  3514   001002  888C               	bsf	140,4,c	;volatile
  3515   001004  EF05  F008         	goto	i1l1494
  3516   001008                     i1l200:
  3517   001008  988C               	bcf	140,4,c	;volatile
  3518   00100A                     i1l1494:
  3519                           
  3520                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LD5 = 1) : (LATDbits.LD5 = 0);
  3521   00100A  A201               	btfss	i1Lcd_Port@a^0,1,c
  3522   00100C  EF0A  F008         	goto	i1u66_21
  3523   001010  EF0C  F008         	goto	i1u66_20
  3524   001014                     i1u66_21:
  3525   001014  EF0F  F008         	goto	i1l204
  3526   001018                     i1u66_20:
  3527   001018  8A8C               	bsf	140,5,c	;volatile
  3528   00101A  EF10  F008         	goto	i1l1498
  3529   00101E                     i1l204:
  3530   00101E  9A8C               	bcf	140,5,c	;volatile
  3531   001020                     i1l1498:
  3532                           
  3533                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LD6 = 1) : (LATDbits.LD6 = 0);
  3534   001020  A401               	btfss	i1Lcd_Port@a^0,2,c
  3535   001022  EF15  F008         	goto	i1u67_21
  3536   001026  EF17  F008         	goto	i1u67_20
  3537   00102A                     i1u67_21:
  3538   00102A  EF1A  F008         	goto	i1l208
  3539   00102E                     i1u67_20:
  3540   00102E  8C8C               	bsf	140,6,c	;volatile
  3541   001030  EF1B  F008         	goto	i1l1502
  3542   001034                     i1l208:
  3543   001034  9C8C               	bcf	140,6,c	;volatile
  3544   001036                     i1l1502:
  3545                           
  3546                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LD7 = 1) : (LATDbits.LD7 = 0);
  3547   001036  A601               	btfss	i1Lcd_Port@a^0,3,c
  3548   001038  EF20  F008         	goto	i1u68_21
  3549   00103C  EF22  F008         	goto	i1u68_20
  3550   001040                     i1u68_21:
  3551   001040  EF25  F008         	goto	i1l212
  3552   001044                     i1u68_20:
  3553   001044  8E8C               	bsf	140,7,c	;volatile
  3554   001046  EF26  F008         	goto	i1l215
  3555   00104A                     i1l212:
  3556   00104A  9E8C               	bcf	140,7,c	;volatile
  3557   00104C                     i1l215:
  3558   00104C  0012               	return		;funcret
  3559   00104E                     __end_ofi1_Lcd_Port:
  3560                           	callstack 0
  3561                           
  3562 ;; *************** function _Stop *****************
  3563 ;; Defined at:
  3564 ;;		line 142 in file "ASCENSOR.c"
  3565 ;; Parameters:    Size  Location     Type
  3566 ;;		None
  3567 ;; Auto vars:     Size  Location     Type
  3568 ;;		None
  3569 ;; Return value:  Size  Location     Type
  3570 ;;                  1    wreg      void 
  3571 ;; Registers used:
  3572 ;;		None
  3573 ;; Tracked objects:
  3574 ;;		On entry : 0/0
  3575 ;;		On exit  : 0/0
  3576 ;;		Unchanged: 0/0
  3577 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3578 ;;      Params:         0       0       0       0       0       0       0       0       0
  3579 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3580 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3581 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3582 ;;Total ram usage:        0 bytes
  3583 ;; Hardware stack levels used: 1
  3584 ;; This function calls:
  3585 ;;		Nothing
  3586 ;; This function is called by:
  3587 ;;		Interrupt level 2
  3588 ;; This function uses a non-reentrant model
  3589 ;;
  3590                           
  3591                           	psect	intcode
  3592   000008                     __pintcode:
  3593                           	callstack 0
  3594   000008                     _Stop:
  3595                           	callstack 22
  3596                           
  3597                           ;incstack = 0
  3598   000008  823C               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3599   00000A  EDF6  F008         	call	int_func,f	;refresh shadow registers
  3600                           
  3601                           	psect	intcode_body
  3602   0011EC                     __pintcode_body:
  3603                           	callstack 22
  3604   0011EC                     int_func:
  3605                           	callstack 22
  3606   0011EC  0006               	pop		; remove dummy address from shadow register refresh
  3607   0011EE                     
  3608                           ;ASCENSOR.c: 143: INTCONbits.GIEH = 0;
  3609   0011EE  9EF2               	bcf	242,7,c	;volatile
  3610                           
  3611                           ;ASCENSOR.c: 144: T0CONbits.TMR0ON = 0;
  3612   0011F0  9ED5               	bcf	213,7,c	;volatile
  3613                           
  3614                           ;ASCENSOR.c: 145: LATDbits.LATD2=0;
  3615   0011F2  948C               	bcf	140,2,c	;volatile
  3616                           
  3617                           ;ASCENSOR.c: 146: LATDbits.LATD3=0;
  3618   0011F4  968C               	bcf	140,3,c	;volatile
  3619                           
  3620                           ;ASCENSOR.c: 147: INTCONbits.TMR0IF = 0;
  3621   0011F6  94F2               	bcf	242,2,c	;volatile
  3622                           
  3623                           ;ASCENSOR.c: 148: INTCONbits.GIEH = 1;
  3624   0011F8  8EF2               	bsf	242,7,c	;volatile
  3625   0011FA  923C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3626   0011FC  0011               	retfie		f
  3627   0011FE                     __end_of_Stop:
  3628                           	callstack 0
  3629                           
  3630                           	psect	rparam
  3631   000001                     ___rparam_used  equ	1
  3632   000000                     ___param_bank   equ	0
  3633   000000                     __Lparam        equ	__Lrparam
  3634   000000                     __Hparam        equ	__Hrparam
  3635                           
  3636                           	psect	temp
  3637   00003C                     btemp:
  3638                           	callstack 0
  3639   00003C                     	ds	1
  3640   00003C                     int$flags       set	btemp
  3641   00003D                     wtemp8          set	btemp+1
  3642   00003D                     ttemp5          set	btemp+1
  3643   000040                     ttemp6          set	btemp+4
  3644   000044                     ttemp7          set	btemp+8
  3645                           
  3646                           	psect	config
  3647                           
  3648                           ;Config register CONFIG1L @ 0x300000
  3649                           ;	PLL Prescaler Selection bits
  3650                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  3651                           ;	System Clock Postscaler Selection bits
  3652                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  3653                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3654                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  3655   300000                     	org	3145728
  3656   300000  00                 	db	0
  3657                           
  3658                           ;Config register CONFIG1H @ 0x300001
  3659                           ;	Oscillator Selection bits
  3660                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
  3661                           ;	Fail-Safe Clock Monitor Enable bit
  3662                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3663                           ;	Internal/External Oscillator Switchover bit
  3664                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3665   300001                     	org	3145729
  3666   300001  08                 	db	8
  3667                           
  3668                           ;Config register CONFIG2L @ 0x300002
  3669                           ;	Power-up Timer Enable bit
  3670                           ;	PWRT = OFF, PWRT disabled
  3671                           ;	Brown-out Reset Enable bits
  3672                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3673                           ;	Brown-out Reset Voltage bits
  3674                           ;	BORV = 3, Minimum setting 2.05V
  3675                           ;	USB Voltage Regulator Enable bit
  3676                           ;	VREGEN = OFF, USB voltage regulator disabled
  3677   300002                     	org	3145730
  3678   300002  19                 	db	25
  3679                           
  3680                           ;Config register CONFIG2H @ 0x300003
  3681                           ;	Watchdog Timer Enable bit
  3682                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  3683                           ;	Watchdog Timer Postscale Select bits
  3684                           ;	WDTPS = 32768, 1:32768
  3685   300003                     	org	3145731
  3686   300003  1E                 	db	30
  3687                           
  3688                           ; Padding undefined space
  3689   300004                     	org	3145732
  3690   300004  FF                 	db	255
  3691                           
  3692                           ;Config register CONFIG3H @ 0x300005
  3693                           ;	CCP2 MUX bit
  3694                           ;	CCP2MX = OFF, CCP2 input/output is multiplexed with RB3
  3695                           ;	PORTB A/D Enable bit
  3696                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  3697                           ;	Low-Power Timer 1 Oscillator Enable bit
  3698                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  3699                           ;	MCLR Pin Enable bit
  3700                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  3701   300005                     	org	3145733
  3702   300005  00                 	db	0
  3703                           
  3704                           ;Config register CONFIG4L @ 0x300006
  3705                           ;	Stack Full/Underflow Reset Enable bit
  3706                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  3707                           ;	Single-Supply ICSP Enable bit
  3708                           ;	LVP = OFF, Single-Supply ICSP disabled
  3709                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  3710                           ;	ICPRT = ON, ICPORT enabled
  3711                           ;	Extended Instruction Set Enable bit
  3712                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  3713                           ;	Background Debugger Enable bit
  3714                           ;	DEBUG = 0x1, unprogrammed default
  3715   300006                     	org	3145734
  3716   300006  A0                 	db	160
  3717                           
  3718                           ; Padding undefined space
  3719   300007                     	org	3145735
  3720   300007  FF                 	db	255
  3721                           
  3722                           ;Config register CONFIG5L @ 0x300008
  3723                           ;	Code Protection bit
  3724                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  3725                           ;	Code Protection bit
  3726                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  3727                           ;	Code Protection bit
  3728                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  3729                           ;	Code Protection bit
  3730                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  3731   300008                     	org	3145736
  3732   300008  0F                 	db	15
  3733                           
  3734                           ;Config register CONFIG5H @ 0x300009
  3735                           ;	Boot Block Code Protection bit
  3736                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  3737                           ;	Data EEPROM Code Protection bit
  3738                           ;	CPD = OFF, Data EEPROM is not code-protected
  3739   300009                     	org	3145737
  3740   300009  C0                 	db	192
  3741                           
  3742                           ;Config register CONFIG6L @ 0x30000A
  3743                           ;	Write Protection bit
  3744                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  3745                           ;	Write Protection bit
  3746                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  3747                           ;	Write Protection bit
  3748                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  3749                           ;	Write Protection bit
  3750                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  3751   30000A                     	org	3145738
  3752   30000A  0F                 	db	15
  3753                           
  3754                           ;Config register CONFIG6H @ 0x30000B
  3755                           ;	Configuration Register Write Protection bit
  3756                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  3757                           ;	Boot Block Write Protection bit
  3758                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  3759                           ;	Data EEPROM Write Protection bit
  3760                           ;	WRTD = OFF, Data EEPROM is not write-protected
  3761   30000B                     	org	3145739
  3762   30000B  E0                 	db	224
  3763                           
  3764                           ;Config register CONFIG7L @ 0x30000C
  3765                           ;	Table Read Protection bit
  3766                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3767                           ;	Table Read Protection bit
  3768                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3769                           ;	Table Read Protection bit
  3770                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3771                           ;	Table Read Protection bit
  3772                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  3773   30000C                     	org	3145740
  3774   30000C  0F                 	db	15
  3775                           
  3776                           ;Config register CONFIG7H @ 0x30000D
  3777                           ;	Boot Block Table Read Protection bit
  3778                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  3779   30000D                     	org	3145741
  3780   30000D  40                 	db	64
  3781                           tosu	equ	0xFFF
  3782                           tosh	equ	0xFFE
  3783                           tosl	equ	0xFFD
  3784                           stkptr	equ	0xFFC
  3785                           pclatu	equ	0xFFB
  3786                           pclath	equ	0xFFA
  3787                           pcl	equ	0xFF9
  3788                           tblptru	equ	0xFF8
  3789                           tblptrh	equ	0xFF7
  3790                           tblptrl	equ	0xFF6
  3791                           tablat	equ	0xFF5
  3792                           prodh	equ	0xFF4
  3793                           prodl	equ	0xFF3
  3794                           indf0	equ	0xFEF
  3795                           postinc0	equ	0xFEE
  3796                           postdec0	equ	0xFED
  3797                           preinc0	equ	0xFEC
  3798                           plusw0	equ	0xFEB
  3799                           fsr0h	equ	0xFEA
  3800                           fsr0l	equ	0xFE9
  3801                           wreg	equ	0xFE8
  3802                           indf1	equ	0xFE7
  3803                           postinc1	equ	0xFE6
  3804                           postdec1	equ	0xFE5
  3805                           preinc1	equ	0xFE4
  3806                           plusw1	equ	0xFE3
  3807                           fsr1h	equ	0xFE2
  3808                           fsr1l	equ	0xFE1
  3809                           bsr	equ	0xFE0
  3810                           indf2	equ	0xFDF
  3811                           postinc2	equ	0xFDE
  3812                           postdec2	equ	0xFDD
  3813                           preinc2	equ	0xFDC
  3814                           plusw2	equ	0xFDB
  3815                           fsr2h	equ	0xFDA
  3816                           fsr2l	equ	0xFD9
  3817                           status	equ	0xFD8

Data Sizes:
    Strings     21
    Constant    16
    Data        0
    BSS         29
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     30      59
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_CGRAM_CreateChar@chardata	PTR const unsigned char  size(1) Largest target is 8
		 -> figura_1(CODE[8]), figura_2(CODE[8]), 

    Lcd_Write_String@a	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[7]), STR_2(CODE[8]), STR_3(CODE[6]), 


Critical Paths under _main in COMRAM

    _main->_Actualizar_Matriz
    _Modificar->_Lcd_Write_Char
    _Lcd_NoBlink->_Lcd_Cmd
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_CGRAM_Init->_Lcd_Cmd
    _Lcd_CGRAM_CreateChar->_Lcd_Write_Char
    _Lcd_CGRAM_Close->_Lcd_Cmd
    _Actualizar_Matriz->_Lcd_Set_Cursor
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _LowISR in COMRAM

    _LowISR->i1_Lcd_Set_Cursor
    i1_Lcd_Set_Cursor->i1_Lcd_Cmd
    _Lcd_Blink->i1_Lcd_Cmd
    i1_Lcd_Cmd->i1_Lcd_Port

Critical Paths under _Stop in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _Stop in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _Stop in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _Stop in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _Stop in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _Stop in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _Stop in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _Stop in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _Stop in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3460
                                             28 COMRAM     2     2      0
                  _Actualizar_Matriz
                    _Lcd_CGRAM_Close
               _Lcd_CGRAM_CreateChar
                     _Lcd_CGRAM_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                          _Modificar
                              _dejar
                           _detectar
                           _init_int
                         _init_ports
                             _reposo
 ---------------------------------------------------------------------------------
 (1) _reposo                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_int                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _detectar                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dejar                                                2     2      0       0
                                             12 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Modificar                                            0     0      0     195
                        _Lcd_NoBlink
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_NoBlink                                          0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     3      1     213
                                             16 COMRAM     4     3      1
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     210
                                             15 COMRAM     1     1      0
                          _Lcd_Clear
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_CGRAM_Init                                       0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_CGRAM_CreateChar                                11    10      1     871
                                             16 COMRAM    11    10      1
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _Lcd_CGRAM_Close                                      0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Actualizar_Matriz                                    8     8      0     975
                                             20 COMRAM     8     8      0
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                             13 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     651
                                             15 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0      75
                                             13 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                               4     4      0     860
                                              8 COMRAM     4     4      0
                          _Lcd_Blink
                   i1_Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (6) i1_Lcd_Set_Cursor                                     5     4      1     714
                                              3 COMRAM     5     4      1
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (6) _Lcd_Blink                                            0     0      0     145
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (7) i1_Lcd_Cmd                                            2     2      0     145
                                              1 COMRAM     2     2      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i1_Lcd_Port                                           1     1      0     116
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Stop                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Actualizar_Matriz
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _Lcd_CGRAM_Close
     _Lcd_Cmd
   _Lcd_CGRAM_CreateChar
     _Lcd_Write_Char
   _Lcd_CGRAM_Init
     _Lcd_Cmd
   _Lcd_Clear
     _Lcd_Cmd
   _Lcd_Init
     _Lcd_Clear
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
   _Lcd_Write_Char
   _Lcd_Write_String
     _Lcd_Write_Char
   _Modificar
     _Lcd_NoBlink
       _Lcd_Cmd
     _Lcd_Write_Char
   _dejar
   _detectar
   _init_int
   _init_ports
   _reposo

 _LowISR (ROOT)
   _Lcd_Blink
     i1_Lcd_Cmd
       i1_Lcd_Port
   i1_Lcd_Set_Cursor
     i1_Lcd_Cmd

 _Stop (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            2047      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITBIGSFRh         126      0       0      0.0%
BITCOMRAM           94      0       0      0.0%
COMRAM              94     30      59     62.8%
BITBIGSFRl          32      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      59      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Oct 01 16:18:12 2025

                           _c 0037                             _f 0038                            l95 11BC  
                          l98 11EA                            u10 0FA6                            u11 0FA2  
                          u20 0FBC                            u21 0FB8                            u30 0FD2  
                          u31 0FCE                            u40 0FE8                            u41 0FE4  
                          bsr 0FE0                           l101 1106                           l102 10F6  
                         l200 0FAC                           l112 0F40                           l104 1104  
                         l113 0F94                           l114 0F6A                           l106 1116  
                         l212 0FEE                           l204 0FC2                           l132 0B42  
                         l108 1124                           l221 1218                           l117 0F94  
                         l109 1126                           l150 1072                           l215 0FF0  
                         l231 0D36                           l151 1064                           l208 0FD8  
                         l161 0E10                           l218 117E                           l234 0F14  
                         l227 0D36                           l243 10E4                           l155 1088  
                         l164 0E54                           l237 115E                           l158 109A  
                         l174 0BC8                           l255 120A                           l167 0E92  
                         l290 1234                           l259 082E                           l284 0A0E  
                         l287 1226                           l970 0FAE                           l980 0FE8  
                         l972 0FBC                           l974 0FC4                           l966 0F98  
                         l990 117C                           l982 1162                           l976 0FD2  
                         l968 0FA6                           l984 1164                           l978 0FDA  
                         l986 116A                           l988 116C                           u200 0F5C  
                         u201 0F58                           u210 0F78                           u130 10F4  
                         u211 0F74                           u131 10F0                           u300 1072  
                         u220 0F86                           u140 1104                           u301 106E  
                         u221 0F82                           u141 1100                           u310 1080  
                         u150 1114                           u311 107C                           u151 1110  
                         u320 1096                           u160 1124                           u321 1092  
                         u161 1120                           u330 0E1E                           u170 0F24  
                         u331 0E1A                           u171 0F20                           u340 0E62  
                         u180 0F32                           u341 0E5E                           u181 0F2E  
                         u190 0F4E                           u191 0F4A                           u290 105C  
                         u291 1058                           u700 0CAC                           u701 0CA8  
                         u710 0CE0                           u711 0CDC                           u720 0D14  
                         u800 088C                           u721 0D10                           u801 0888  
                         u730 0A40                           u810 08C0                           u731 0A3C  
                         u811 08BC                           u740 0A70                           u820 08F4  
                         u741 0A6C                           u821 08F0                           u750 0AA0  
                         u830 0928                           u751 0A9C                           u831 0924  
                         u760 0AD0                           u840 095C                           u761 0ACC  
                         u841 0958                           u690 0C78                           u770 0B00  
                         u850 0990                           u691 0C74                           u771 0AFC  
                         u851 098C                           u780 0B30                           u860 09C4  
                         u781 0B2C                           u861 09C0                           u790 0858  
                         u870 10E4                           u791 0854                           u871 10E0  
           _Actualizar_Matriz 0A10                           wreg 0FE8           __end_of_Lcd_NoBlink 120C  
          ?_Actualizar_Matriz 0001         Lcd_CGRAM_CreateChar@i 0014                          l1102 11D8  
                        l1110 10E6                          l1040 112A                          l1200 104E  
                        l1120 0F32                          l1104 11E0                          l1112 10F4  
                        l1050 114A                          l1042 1136                          l1210 1096  
                        l1202 105C                          l1130 0F78                          l1122 0F3A  
                        l1106 11E8                          l1114 1114                          l1052 114C  
                        l1044 1138                          l1060 11FE                          l1204 1062  
                        l1220 0E50                          l1212 0E0A                          l1132 0F86  
                        l1124 0F4E                          l1116 0F16                          l1054 1152  
                        l1046 1140                          l1062 120C                          l1230 0E94  
                        l1206 1080                          l1222 0E52                          l1214 0E1E  
                        l1134 0F8E                          l1126 0F5C                          l1118 0F24  
                        l1056 1154                          l1048 1142                          l1240 0ECC  
                        l1232 0EA0                          l1208 1086                          l1224 0E62  
                        l1216 0E34                          l1128 0F64                          l1080 11A8  
                        l1058 115C                          l1250 0EF2                          l1242 0ED2  
                        l1234 0EA6                          l1226 0E78                          l1218 0E4C  
                        l1090 11B2                          l1082 11AA                          l1074 11A0  
                        l1260 0F10                          l1252 0EF8                          l1244 0EE0  
                        l1236 0EB6                          l1092 11B4                          l1084 11AC  
                        l1076 11A4                          l1510 0C8A                          l1262 121A  
                        l1254 0EFE                          l1246 0EE6                          l1238 0EBC  
                        l1094 11B6                          l1086 11AE                          l1078 11A6  
                        l1520 0CC4                          l1512 0C90                          l1600 0B14  
                        l1256 0F04                          l1248 0EEC                          l1096 11B8  
                        l1088 11B0                          l1530 0D02                          l1522 0CCE  
                        l1514 0C9A                          l1506 0C68                          l1602 0B30  
                        l1610 082A                          l1258 0F0A                          l1098 11BA  
                        l1532 0D14                          l1524 0CE0                          l1516 0CAC  
                        l1508 0C78                          l1604 0B3A                          l1364 1228  
                        l1700 0998                          l1620 0848                          l1534 0D26  
                        l1526 0CF2                          l1518 0CBE                          l1606 0B3E  
                        l1550 0A1A                          l1702 09B2                          l1630 087A  
                        l1622 085C                          l1710 109C                          l1536 0D2C  
                        l1528 0CF8                          l1560 0A4A                          l1704 09B4  
                        l1640 0894                          l1632 087C                          l1616 0830  
                        l1712 10A8                          l1800 0BBE                          l1562 0A50  
                        l1642 08AE                          l1634 0890                          l1618 0846  
                        l1714 10BE                          l1810 0BF6                          l1802 0BC2  
                        l1580 0AB0                          l1564 0A54                          l1556 0A22  
                        l1548 0A10                          l1652 08C8                          l1644 08B0  
                        l1628 0860                          l1708 09C8                          l1716 10C2  
                        l1820 0C2A                          l1812 0C04                          l1804 0BD6  
                        l1582 0AB4                          l1574 0A82                          l1566 0A70  
                        l1558 0A40                          l1670 092C                          l1654 08E2  
                        l1646 08C4                          l1822 0C3A                          l1806 0BE4  
                        l1814 0C08                          l1592 0AE2                          l1584 0AD0  
                        l1576 0AA0                          l1568 0A7A                          l1680 094C  
                        l1664 08FC                          l1656 08E4                          l1824 0C4A  
                        l1816 0C16                          l1808 0BE8                          l1594 0B00  
                        l1586 0ADA                          l1578 0AAA                          l1690 097E  
                        l1682 0960                          l1666 0916                          l1658 08F8  
                        l1826 0C5A                          l1818 0C26                          l1596 0B0A  
                        l1692 0980                          l1676 0930                          l1668 0918  
                        l1780 0B44                          l1598 0B10                          l1694 0994  
                        l1678 094A                          l1790 0B82                          l1782 0B54  
                        l1688 0964                          l1792 0B8C                          l1784 0B5E  
                        l1794 0B94                          l1786 0B70                          l1796 0B9E  
                        l1788 0B7A                          l1798 0BA6                          STR_1 0819  
                        STR_2 0811                          STR_3 0820               ?_Lcd_CGRAM_Init 0001  
                        u1010 0BD6                          u1011 0BD2                          u1020 0BE4  
                        u1021 0BE0                          u1030 0BF6                          u1031 0BF2  
                        u1040 0C04                          u1041 0C00                          u1050 0C16  
                        u1107 0E28                          u1051 0C12                          u1060 0C3A  
                        u1117 0E40                          u1061 0C36                          u1070 0C4A  
                        u1127 0E6C                          u1071 0C46                          u1080 0C5A  
                        u1137 0E84                          u1081 0C56                          u1147 0EAC  
                        u1157 0EC2                          _LATA 0F89                          _LATB 0F8A  
                        u1167 0ED8                          _LATC 0F8B                          _LATD 0F8C  
                        u1177 1144                          u1097 0BB0                          _LATE 0F8D  
                        u1187 1156                          u1197 1172                          _Stop 0008  
           ?_Lcd_Write_String 0011                          _main 0B44           ??_Actualizar_Matriz 0015  
                        fsr2h 0FDA                          fsr2l 0FD9                          btemp 003C  
                        prodl 0FF3                          start 00D8            ??_Lcd_Write_String 0012  
             __end_of_Lcd_Cmd 1180                  ___param_bank 0000                         ?_Stop 0001  
                       ?_main 0001              ?_Lcd_CGRAM_Close 0001     __end_of_Actualizar_Matriz 0B44  
                       _T0CON 0FD5                         i1l200 1008                         _NEGRA 0039  
                       i1l212 104A                         i1l204 101E                         i1l215 104C  
                       i1l231 0E08                         i1l208 1034                         i1l218 119E  
                       i1l227 0E08                         i1l147 00C8                         i1l252 1242  
                       _METAL 003B                         i2l137 11FA             ?i1_Lcd_Set_Cursor 0004  
                       _TMR0L 0FD6                         _PORTB 0F81                         _TRISA 0F92  
                       _TRISB 0F93                         _TRISC 0F94                         _TRISD 0F95  
                       _TRISE 0F96                         _Fila1 002F                         _Fila2 0027  
                       _Fila3 001F                   ?i1_Lcd_Port 0001            ??i1_Lcd_Set_Cursor 0005  
                       _dejar 0E0A                         tablat 0FF5                         ttemp5 003D  
                       ttemp6 0040                         ttemp7 0044                         status 0FD8  
                       wtemp8 003D                   LowISR@dummy 000C              __end_of_Lcd_Init 0F16  
            __end_of_Lcd_Port 0FF2        Actualizar_Matriz@i_671 0019        Actualizar_Matriz@i_672 001B  
             __initialization 11BE                  __end_of_Stop 11FE                  __end_of_main 0C66  
                      ??_Stop 0001                   _Lcd_NoBlink 11FE                        ??_main 001D  
               __activetblptr 0002       Lcd_CGRAM_CreateChar@add 0013                        ?_dejar 0001  
                      _BLANCA 003A                        i1l1500 102E                        i1l1502 1036  
                      i1l1504 1044                        i1l1540 1184                        i1l1542 118A  
                      i1l1544 118C                        i1l1608 1236                        i1l1720 0D4A  
                      i1l1490 0FF4                        i1l1546 119C                        i1l1538 1182  
                      i1l1730 0D90                        i1l1722 0D5C                        i1l1492 1002  
                      i1l1740 0DCA                        i1l1732 0D96                        i1l1724 0D62  
                      i1l1494 100A                        i1l1742 0DD4                        i1l1734 0DA0  
                      i1l1726 0D6C                        i1l1718 0D3A                        i1l1750 0026  
                      i1l1496 1018                        i1l1744 0DE6                        i1l1736 0DB2  
                      i1l1728 0D7E                        i1l1760 005E                        i1l1752 002A  
                      i1l1498 1020                        i1l1746 0DF8                        i1l1738 0DC4  
                      i1l1770 009C                        i1l1762 006C                        i1l1754 0038  
                      i1l1748 0DFE                        i1l1772 009E                        i1l1764 007C  
                      i1l1756 004C                        i1l1774 00AC                        i1l1766 007E  
                      i1l1758 005C                        i1l1776 00BC                        i1l1768 008C  
                      i1l1778 00BE                        i2l1406 11EE                        _INTCON 0FF2  
                   ??_Lcd_Cmd 000E              __end_of_detectar 0F96                        _LowISR 0018  
           __end_ofi1_Lcd_Cmd 11A0              __end_of_figura_1 0811              __end_of_figura_2 0809  
Lcd_CGRAM_CreateChar@chardata 0011              __end_of_init_int 11EC                        clear_0 11C4  
                      _reposo 10E6                        isa$std 0001                  __mediumconst 0800  
                      tblptrh 0FF7                        tblptrl 0FF6                        tblptru 0FF8  
             Lcd_Set_Cursor@a 0011               Lcd_Set_Cursor@b 0010               Lcd_Set_Cursor@y 0013  
             Lcd_Set_Cursor@z 0012     Lcd_CGRAM_CreateChar@i_850 0015     Lcd_CGRAM_CreateChar@i_851 0016  
   Lcd_CGRAM_CreateChar@i_852 0017     Lcd_CGRAM_CreateChar@i_853 0018     Lcd_CGRAM_CreateChar@i_854 0019  
   Lcd_CGRAM_CreateChar@i_855 001A     Lcd_CGRAM_CreateChar@i_856 001B                    __accesstop 0060  
     __end_of__initialization 11CA             __end_of_Lcd_Clear 121A             __end_of_Lcd_Blink 1244  
               ___rparam_used 0001                __pcstackCOMRAM 0001                 __end_of_dejar 0E94  
              _Lcd_Set_Cursor 0C66              ??_Lcd_CGRAM_Init 0010             __end_of_Modificar 109C  
                   ?_Lcd_Init 0001                       ??_dejar 000D                     ?_Lcd_Port 0001  
                     ?_LowISR 0001        __end_of_Lcd_Set_Cursor 0D38                       ?_reposo 0001  
                ??i1_Lcd_Port 0001                       i1u65_20 1002                       i1u65_21 0FFE  
                     i1u66_20 1018                       i1u90_20 0DB2                       i1u66_21 1014  
                     i1u90_21 0DAE                       i1u67_20 102E                       i1u91_20 0DE6  
                     i1u67_21 102A                       i1u91_21 0DE2                       i1u68_20 1044  
                     i1u92_20 0038                       i1u68_21 1040                       i1u92_21 0034  
                     i1u93_20 004C                       i1u93_21 0048                       i1u94_20 005C  
                     i1u94_21 0058                       i1u95_20 006C                       i1u95_21 0068  
                     i1u88_20 0D4A                       i1u96_20 007C                       i1u88_21 0D46  
                     i1u96_21 0078                       i1u89_20 0D7E                       i1u97_20 008C  
                     i1u89_21 0D7A                       i1u97_21 0088                       i1u98_20 009C  
                     i1u98_21 0098                       i1u99_20 00AC                       i1u99_21 00A8  
                  ??_Lcd_Init 0010                     ?_detectar 0001                    ??_Lcd_Port 000D  
              _Lcd_Write_Char 1128                       _Lcd_Cmd 1160                     ?_init_int 0001  
                     __Hparam 0000                       __Lparam 0000            __end_ofi1_Lcd_Port 104E  
                __psmallconst 0800                       __pcinit 11BE                    _init_ports 11A0  
                     __ramtop 0800               ?_Lcd_Set_Cursor 0010                  ?_Lcd_NoBlink 0001  
                     __ptext0 0B44                       __ptext1 10E6                       __ptext2 11A0  
                     __ptext3 11D8                       __ptext4 0F16                       __ptext5 0E0A  
                     __ptext6 104E                       __ptext7 11FE                       __ptext8 109C  
                     __ptext9 0E94                     _T0CONbits 0FD5                    ??_detectar 000D  
      __end_of_Lcd_Write_Char 1160                __pintcode_body 11EC          end_of_initialization 11CA  
               __Lmediumconst 0000                    ??_init_int 000D                       int_func 11EC  
                     postinc0 0FEE                       postinc2 0FDE                     Lcd_Port@a 000D  
                   i1_Lcd_Cmd 1180                     _PORTAbits 0F80                     _PORTBbits 0F81  
                   _PORTCbits 0F82                     _TRISCbits 0F94                     _TRISDbits 0F95  
             ?_Lcd_Write_Char 0001             Lcd_Write_String@a 0011             Lcd_Write_String@i 0013  
              __end_of_LowISR 00D8                     _Lcd_Clear 120C                     _Lcd_Blink 1236  
                  ?i1_Lcd_Cmd 0001              _Lcd_Write_String 109C                   ?_init_ports 0001  
__end_of_Lcd_CGRAM_CreateChar 0A10                __end_of_reposo 1128           start_initialization 11BE  
                   _Modificar 104E              i1_Lcd_Set_Cursor 0D38             ??_Lcd_CGRAM_Close 0010  
                    ??_LowISR 0009                    ?_Lcd_Clear 0001                    ?_Lcd_Blink 0001  
             Lcd_Write_Char@a 0010               Lcd_Write_Char@y 000F                      ??_reposo 000D  
                 __pbssCOMRAM 001F                    ?_Modificar 0001                      ?_Lcd_Cmd 0001  
            ??_Lcd_Set_Cursor 0011                     __pintcode 0008                   ??i1_Lcd_Cmd 0002  
        i1Lcd_Set_Cursor@temp 0008                   __pintcodelo 0018                   __smallconst 0800  
                    _LATCbits 0F8B                      _LATDbits 0F8C                      _LATEbits 0F8D  
        _Lcd_CGRAM_CreateChar 0828                      i1u100_20 00BC                      i1u100_21 00B8  
                    i1u120_27 1192                      Lcd_Cmd@a 000F                   ??_Lcd_Clear 0010  
                    _RCONbits 0FD0                   ??_Lcd_Blink 0004                    _ADCON1bits 0FC1  
          Actualizar_Matriz@i 0017              ??_Lcd_Write_Char 000E                      _Lcd_Init 0E94  
                    _Lcd_Port 0F96                   _INTCON2bits 0FF1                   ??_Modificar 0011  
    __end_of_Lcd_Write_String 10E6         ?_Lcd_CGRAM_CreateChar 0011                      __Hrparam 0000  
                    __Lrparam 0000                  ??_init_ports 000D      __end_ofi1_Lcd_Set_Cursor 0E0A  
           i1Lcd_Set_Cursor@a 0005             i1Lcd_Set_Cursor@b 0004             i1Lcd_Set_Cursor@y 0007  
           i1Lcd_Set_Cursor@z 0006               _Lcd_CGRAM_Close 1228                      _detectar 0F16  
                    __ptext10 120C                      __ptext11 121A                      __ptext20 0D38  
                    __ptext12 0828                      __ptext21 1236                      __ptext13 1228  
                    __ptext22 1180                      __ptext14 0A10                      __ptext23 0FF2  
                    __ptext15 1128                      __ptext16 0C66                      __ptext17 1160  
                    __ptext18 0F96                      _figura_1 0809                      _figura_2 0801  
                    _init_int 11D8            __end_of_init_ports 11BE                   i1Lcd_Port@a 0001  
                    isa$xinst 0000                      int$flags 003C                    _INTCONbits 0FF2  
          Lcd_Write_Char@temp 000E                      intlevel1 0000                      intlevel2 0000  
      ??_Lcd_CGRAM_CreateChar 0012                _Lcd_CGRAM_Init 121A                    i1Lcd_Cmd@a 0003  
          Lcd_Set_Cursor@temp 0014                 ??_Lcd_NoBlink 0010       __end_of_Lcd_CGRAM_Close 1236  
                  i1_Lcd_Port 0FF2        __end_of_Lcd_CGRAM_Init 1228  
