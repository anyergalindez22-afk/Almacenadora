

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Oct 01 21:41:07 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    41   000000                     
    42                           ; Generated 17/01/2025 GMT
    43                           ; 
    44                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F4550 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76   000FE0                     bsr             equ	4064
    77   000FE9                     fsr0            equ	4073
    78   000FEA                     fsr0h           equ	4074
    79   000FE9                     fsr0l           equ	4073
    80   000FE1                     fsr1            equ	4065
    81   000FE2                     fsr1h           equ	4066
    82   000FE1                     fsr1l           equ	4065
    83   000FD9                     fsr2            equ	4057
    84   000FDA                     fsr2h           equ	4058
    85   000FD9                     fsr2l           equ	4057
    86   000FEF                     indf0           equ	4079
    87   000FE7                     indf1           equ	4071
    88   000FDF                     indf2           equ	4063
    89   000FF2                     intcon          equ	4082
    90   000000                     nvmcon          equ	0
    91   000FF9                     pcl             equ	4089
    92   000FFA                     pclath          equ	4090
    93   000FFB                     pclatu          equ	4091
    94   000FEB                     plusw0          equ	4075
    95   000FE3                     plusw1          equ	4067
    96   000FDB                     plusw2          equ	4059
    97   000FED                     postdec0        equ	4077
    98   000FE5                     postdec1        equ	4069
    99   000FDD                     postdec2        equ	4061
   100   000FEE                     postinc0        equ	4078
   101   000FE6                     postinc1        equ	4070
   102   000FDE                     postinc2        equ	4062
   103   000FEC                     preinc0         equ	4076
   104   000FE4                     preinc1         equ	4068
   105   000FDC                     preinc2         equ	4060
   106   000FF3                     prod            equ	4083
   107   000FF4                     prodh           equ	4084
   108   000FF3                     prodl           equ	4083
   109   000FD8                     status          equ	4056
   110   000FF5                     tablat          equ	4085
   111   000FF6                     tblptr          equ	4086
   112   000FF7                     tblptrh         equ	4087
   113   000FF6                     tblptrl         equ	4086
   114   000FF8                     tblptru         equ	4088
   115   000FFD                     tosl            equ	4093
   116   000FE8                     wreg            equ	4072
   117   000F62                     SPPDATA         equ	3938	;# 
   118   000F63                     SPPCFG          equ	3939	;# 
   119   000F64                     SPPEPS          equ	3940	;# 
   120   000F65                     SPPCON          equ	3941	;# 
   121   000F66                     UFRM            equ	3942	;# 
   122   000F66                     UFRML           equ	3942	;# 
   123   000F67                     UFRMH           equ	3943	;# 
   124   000F68                     UIR             equ	3944	;# 
   125   000F69                     UIE             equ	3945	;# 
   126   000F6A                     UEIR            equ	3946	;# 
   127   000F6B                     UEIE            equ	3947	;# 
   128   000F6C                     USTAT           equ	3948	;# 
   129   000F6D                     UCON            equ	3949	;# 
   130   000F6E                     UADDR           equ	3950	;# 
   131   000F6F                     UCFG            equ	3951	;# 
   132   000F70                     UEP0            equ	3952	;# 
   133   000F71                     UEP1            equ	3953	;# 
   134   000F72                     UEP2            equ	3954	;# 
   135   000F73                     UEP3            equ	3955	;# 
   136   000F74                     UEP4            equ	3956	;# 
   137   000F75                     UEP5            equ	3957	;# 
   138   000F76                     UEP6            equ	3958	;# 
   139   000F77                     UEP7            equ	3959	;# 
   140   000F78                     UEP8            equ	3960	;# 
   141   000F79                     UEP9            equ	3961	;# 
   142   000F7A                     UEP10           equ	3962	;# 
   143   000F7B                     UEP11           equ	3963	;# 
   144   000F7C                     UEP12           equ	3964	;# 
   145   000F7D                     UEP13           equ	3965	;# 
   146   000F7E                     UEP14           equ	3966	;# 
   147   000F7F                     UEP15           equ	3967	;# 
   148   000F80                     PORTA           equ	3968	;# 
   149   000F81                     PORTB           equ	3969	;# 
   150   000F82                     PORTC           equ	3970	;# 
   151   000F83                     PORTD           equ	3971	;# 
   152   000F84                     PORTE           equ	3972	;# 
   153   000F89                     LATA            equ	3977	;# 
   154   000F8A                     LATB            equ	3978	;# 
   155   000F8B                     LATC            equ	3979	;# 
   156   000F8C                     LATD            equ	3980	;# 
   157   000F8D                     LATE            equ	3981	;# 
   158   000F92                     TRISA           equ	3986	;# 
   159   000F92                     DDRA            equ	3986	;# 
   160   000F93                     TRISB           equ	3987	;# 
   161   000F93                     DDRB            equ	3987	;# 
   162   000F94                     TRISC           equ	3988	;# 
   163   000F94                     DDRC            equ	3988	;# 
   164   000F95                     TRISD           equ	3989	;# 
   165   000F95                     DDRD            equ	3989	;# 
   166   000F96                     TRISE           equ	3990	;# 
   167   000F96                     DDRE            equ	3990	;# 
   168   000F9B                     OSCTUNE         equ	3995	;# 
   169   000F9D                     PIE1            equ	3997	;# 
   170   000F9E                     PIR1            equ	3998	;# 
   171   000F9F                     IPR1            equ	3999	;# 
   172   000FA0                     PIE2            equ	4000	;# 
   173   000FA1                     PIR2            equ	4001	;# 
   174   000FA2                     IPR2            equ	4002	;# 
   175   000FA6                     EECON1          equ	4006	;# 
   176   000FA7                     EECON2          equ	4007	;# 
   177   000FA8                     EEDATA          equ	4008	;# 
   178   000FA9                     EEADR           equ	4009	;# 
   179   000FAB                     RCSTA           equ	4011	;# 
   180   000FAB                     RCSTA1          equ	4011	;# 
   181   000FAC                     TXSTA           equ	4012	;# 
   182   000FAC                     TXSTA1          equ	4012	;# 
   183   000FAD                     TXREG           equ	4013	;# 
   184   000FAD                     TXREG1          equ	4013	;# 
   185   000FAE                     RCREG           equ	4014	;# 
   186   000FAE                     RCREG1          equ	4014	;# 
   187   000FAF                     SPBRG           equ	4015	;# 
   188   000FAF                     SPBRG1          equ	4015	;# 
   189   000FB0                     SPBRGH          equ	4016	;# 
   190   000FB1                     T3CON           equ	4017	;# 
   191   000FB2                     TMR3            equ	4018	;# 
   192   000FB2                     TMR3L           equ	4018	;# 
   193   000FB3                     TMR3H           equ	4019	;# 
   194   000FB4                     CMCON           equ	4020	;# 
   195   000FB5                     CVRCON          equ	4021	;# 
   196   000FB6                     ECCP1AS         equ	4022	;# 
   197   000FB6                     CCP1AS          equ	4022	;# 
   198   000FB7                     ECCP1DEL        equ	4023	;# 
   199   000FB7                     CCP1DEL         equ	4023	;# 
   200   000FB8                     BAUDCON         equ	4024	;# 
   201   000FB8                     BAUDCTL         equ	4024	;# 
   202   000FBA                     CCP2CON         equ	4026	;# 
   203   000FBB                     CCPR2           equ	4027	;# 
   204   000FBB                     CCPR2L          equ	4027	;# 
   205   000FBC                     CCPR2H          equ	4028	;# 
   206   000FBD                     CCP1CON         equ	4029	;# 
   207   000FBD                     ECCP1CON        equ	4029	;# 
   208   000FBE                     CCPR1           equ	4030	;# 
   209   000FBE                     CCPR1L          equ	4030	;# 
   210   000FBF                     CCPR1H          equ	4031	;# 
   211   000FC0                     ADCON2          equ	4032	;# 
   212   000FC1                     ADCON1          equ	4033	;# 
   213   000FC2                     ADCON0          equ	4034	;# 
   214   000FC3                     ADRES           equ	4035	;# 
   215   000FC3                     ADRESL          equ	4035	;# 
   216   000FC4                     ADRESH          equ	4036	;# 
   217   000FC5                     SSPCON2         equ	4037	;# 
   218   000FC6                     SSPCON1         equ	4038	;# 
   219   000FC7                     SSPSTAT         equ	4039	;# 
   220   000FC8                     SSPADD          equ	4040	;# 
   221   000FC9                     SSPBUF          equ	4041	;# 
   222   000FCA                     T2CON           equ	4042	;# 
   223   000FCB                     PR2             equ	4043	;# 
   224   000FCB                     MEMCON          equ	4043	;# 
   225   000FCC                     TMR2            equ	4044	;# 
   226   000FCD                     T1CON           equ	4045	;# 
   227   000FCE                     TMR1            equ	4046	;# 
   228   000FCE                     TMR1L           equ	4046	;# 
   229   000FCF                     TMR1H           equ	4047	;# 
   230   000FD0                     RCON            equ	4048	;# 
   231   000FD1                     WDTCON          equ	4049	;# 
   232   000FD2                     HLVDCON         equ	4050	;# 
   233   000FD2                     LVDCON          equ	4050	;# 
   234   000FD3                     OSCCON          equ	4051	;# 
   235   000FD5                     T0CON           equ	4053	;# 
   236   000FD6                     TMR0            equ	4054	;# 
   237   000FD6                     TMR0L           equ	4054	;# 
   238   000FD7                     TMR0H           equ	4055	;# 
   239   000FD8                     STATUS          equ	4056	;# 
   240   000FD9                     FSR2            equ	4057	;# 
   241   000FD9                     FSR2L           equ	4057	;# 
   242   000FDA                     FSR2H           equ	4058	;# 
   243   000FDB                     PLUSW2          equ	4059	;# 
   244   000FDC                     PREINC2         equ	4060	;# 
   245   000FDD                     POSTDEC2        equ	4061	;# 
   246   000FDE                     POSTINC2        equ	4062	;# 
   247   000FDF                     INDF2           equ	4063	;# 
   248   000FE0                     BSR             equ	4064	;# 
   249   000FE1                     FSR1            equ	4065	;# 
   250   000FE1                     FSR1L           equ	4065	;# 
   251   000FE2                     FSR1H           equ	4066	;# 
   252   000FE3                     PLUSW1          equ	4067	;# 
   253   000FE4                     PREINC1         equ	4068	;# 
   254   000FE5                     POSTDEC1        equ	4069	;# 
   255   000FE6                     POSTINC1        equ	4070	;# 
   256   000FE7                     INDF1           equ	4071	;# 
   257   000FE8                     WREG            equ	4072	;# 
   258   000FE9                     FSR0            equ	4073	;# 
   259   000FE9                     FSR0L           equ	4073	;# 
   260   000FEA                     FSR0H           equ	4074	;# 
   261   000FEB                     PLUSW0          equ	4075	;# 
   262   000FEC                     PREINC0         equ	4076	;# 
   263   000FED                     POSTDEC0        equ	4077	;# 
   264   000FEE                     POSTINC0        equ	4078	;# 
   265   000FEF                     INDF0           equ	4079	;# 
   266   000FF0                     INTCON3         equ	4080	;# 
   267   000FF1                     INTCON2         equ	4081	;# 
   268   000FF2                     INTCON          equ	4082	;# 
   269   000FF3                     PROD            equ	4083	;# 
   270   000FF3                     PRODL           equ	4083	;# 
   271   000FF4                     PRODH           equ	4084	;# 
   272   000FF5                     TABLAT          equ	4085	;# 
   273   000FF6                     TBLPTR          equ	4086	;# 
   274   000FF6                     TBLPTRL         equ	4086	;# 
   275   000FF7                     TBLPTRH         equ	4087	;# 
   276   000FF8                     TBLPTRU         equ	4088	;# 
   277   000FF9                     PCLAT           equ	4089	;# 
   278   000FF9                     PC              equ	4089	;# 
   279   000FF9                     PCL             equ	4089	;# 
   280   000FFA                     PCLATH          equ	4090	;# 
   281   000FFB                     PCLATU          equ	4091	;# 
   282   000FFC                     STKPTR          equ	4092	;# 
   283   000FFD                     TOS             equ	4093	;# 
   284   000FFD                     TOSL            equ	4093	;# 
   285   000FFE                     TOSH            equ	4094	;# 
   286   000FFF                     TOSU            equ	4095	;# 
   287   000F62                     SPPDATA         equ	3938	;# 
   288   000F63                     SPPCFG          equ	3939	;# 
   289   000F64                     SPPEPS          equ	3940	;# 
   290   000F65                     SPPCON          equ	3941	;# 
   291   000F66                     UFRM            equ	3942	;# 
   292   000F66                     UFRML           equ	3942	;# 
   293   000F67                     UFRMH           equ	3943	;# 
   294   000F68                     UIR             equ	3944	;# 
   295   000F69                     UIE             equ	3945	;# 
   296   000F6A                     UEIR            equ	3946	;# 
   297   000F6B                     UEIE            equ	3947	;# 
   298   000F6C                     USTAT           equ	3948	;# 
   299   000F6D                     UCON            equ	3949	;# 
   300   000F6E                     UADDR           equ	3950	;# 
   301   000F6F                     UCFG            equ	3951	;# 
   302   000F70                     UEP0            equ	3952	;# 
   303   000F71                     UEP1            equ	3953	;# 
   304   000F72                     UEP2            equ	3954	;# 
   305   000F73                     UEP3            equ	3955	;# 
   306   000F74                     UEP4            equ	3956	;# 
   307   000F75                     UEP5            equ	3957	;# 
   308   000F76                     UEP6            equ	3958	;# 
   309   000F77                     UEP7            equ	3959	;# 
   310   000F78                     UEP8            equ	3960	;# 
   311   000F79                     UEP9            equ	3961	;# 
   312   000F7A                     UEP10           equ	3962	;# 
   313   000F7B                     UEP11           equ	3963	;# 
   314   000F7C                     UEP12           equ	3964	;# 
   315   000F7D                     UEP13           equ	3965	;# 
   316   000F7E                     UEP14           equ	3966	;# 
   317   000F7F                     UEP15           equ	3967	;# 
   318   000F80                     PORTA           equ	3968	;# 
   319   000F81                     PORTB           equ	3969	;# 
   320   000F82                     PORTC           equ	3970	;# 
   321   000F83                     PORTD           equ	3971	;# 
   322   000F84                     PORTE           equ	3972	;# 
   323   000F89                     LATA            equ	3977	;# 
   324   000F8A                     LATB            equ	3978	;# 
   325   000F8B                     LATC            equ	3979	;# 
   326   000F8C                     LATD            equ	3980	;# 
   327   000F8D                     LATE            equ	3981	;# 
   328   000F92                     TRISA           equ	3986	;# 
   329   000F92                     DDRA            equ	3986	;# 
   330   000F93                     TRISB           equ	3987	;# 
   331   000F93                     DDRB            equ	3987	;# 
   332   000F94                     TRISC           equ	3988	;# 
   333   000F94                     DDRC            equ	3988	;# 
   334   000F95                     TRISD           equ	3989	;# 
   335   000F95                     DDRD            equ	3989	;# 
   336   000F96                     TRISE           equ	3990	;# 
   337   000F96                     DDRE            equ	3990	;# 
   338   000F9B                     OSCTUNE         equ	3995	;# 
   339   000F9D                     PIE1            equ	3997	;# 
   340   000F9E                     PIR1            equ	3998	;# 
   341   000F9F                     IPR1            equ	3999	;# 
   342   000FA0                     PIE2            equ	4000	;# 
   343   000FA1                     PIR2            equ	4001	;# 
   344   000FA2                     IPR2            equ	4002	;# 
   345   000FA6                     EECON1          equ	4006	;# 
   346   000FA7                     EECON2          equ	4007	;# 
   347   000FA8                     EEDATA          equ	4008	;# 
   348   000FA9                     EEADR           equ	4009	;# 
   349   000FAB                     RCSTA           equ	4011	;# 
   350   000FAB                     RCSTA1          equ	4011	;# 
   351   000FAC                     TXSTA           equ	4012	;# 
   352   000FAC                     TXSTA1          equ	4012	;# 
   353   000FAD                     TXREG           equ	4013	;# 
   354   000FAD                     TXREG1          equ	4013	;# 
   355   000FAE                     RCREG           equ	4014	;# 
   356   000FAE                     RCREG1          equ	4014	;# 
   357   000FAF                     SPBRG           equ	4015	;# 
   358   000FAF                     SPBRG1          equ	4015	;# 
   359   000FB0                     SPBRGH          equ	4016	;# 
   360   000FB1                     T3CON           equ	4017	;# 
   361   000FB2                     TMR3            equ	4018	;# 
   362   000FB2                     TMR3L           equ	4018	;# 
   363   000FB3                     TMR3H           equ	4019	;# 
   364   000FB4                     CMCON           equ	4020	;# 
   365   000FB5                     CVRCON          equ	4021	;# 
   366   000FB6                     ECCP1AS         equ	4022	;# 
   367   000FB6                     CCP1AS          equ	4022	;# 
   368   000FB7                     ECCP1DEL        equ	4023	;# 
   369   000FB7                     CCP1DEL         equ	4023	;# 
   370   000FB8                     BAUDCON         equ	4024	;# 
   371   000FB8                     BAUDCTL         equ	4024	;# 
   372   000FBA                     CCP2CON         equ	4026	;# 
   373   000FBB                     CCPR2           equ	4027	;# 
   374   000FBB                     CCPR2L          equ	4027	;# 
   375   000FBC                     CCPR2H          equ	4028	;# 
   376   000FBD                     CCP1CON         equ	4029	;# 
   377   000FBD                     ECCP1CON        equ	4029	;# 
   378   000FBE                     CCPR1           equ	4030	;# 
   379   000FBE                     CCPR1L          equ	4030	;# 
   380   000FBF                     CCPR1H          equ	4031	;# 
   381   000FC0                     ADCON2          equ	4032	;# 
   382   000FC1                     ADCON1          equ	4033	;# 
   383   000FC2                     ADCON0          equ	4034	;# 
   384   000FC3                     ADRES           equ	4035	;# 
   385   000FC3                     ADRESL          equ	4035	;# 
   386   000FC4                     ADRESH          equ	4036	;# 
   387   000FC5                     SSPCON2         equ	4037	;# 
   388   000FC6                     SSPCON1         equ	4038	;# 
   389   000FC7                     SSPSTAT         equ	4039	;# 
   390   000FC8                     SSPADD          equ	4040	;# 
   391   000FC9                     SSPBUF          equ	4041	;# 
   392   000FCA                     T2CON           equ	4042	;# 
   393   000FCB                     PR2             equ	4043	;# 
   394   000FCB                     MEMCON          equ	4043	;# 
   395   000FCC                     TMR2            equ	4044	;# 
   396   000FCD                     T1CON           equ	4045	;# 
   397   000FCE                     TMR1            equ	4046	;# 
   398   000FCE                     TMR1L           equ	4046	;# 
   399   000FCF                     TMR1H           equ	4047	;# 
   400   000FD0                     RCON            equ	4048	;# 
   401   000FD1                     WDTCON          equ	4049	;# 
   402   000FD2                     HLVDCON         equ	4050	;# 
   403   000FD2                     LVDCON          equ	4050	;# 
   404   000FD3                     OSCCON          equ	4051	;# 
   405   000FD5                     T0CON           equ	4053	;# 
   406   000FD6                     TMR0            equ	4054	;# 
   407   000FD6                     TMR0L           equ	4054	;# 
   408   000FD7                     TMR0H           equ	4055	;# 
   409   000FD8                     STATUS          equ	4056	;# 
   410   000FD9                     FSR2            equ	4057	;# 
   411   000FD9                     FSR2L           equ	4057	;# 
   412   000FDA                     FSR2H           equ	4058	;# 
   413   000FDB                     PLUSW2          equ	4059	;# 
   414   000FDC                     PREINC2         equ	4060	;# 
   415   000FDD                     POSTDEC2        equ	4061	;# 
   416   000FDE                     POSTINC2        equ	4062	;# 
   417   000FDF                     INDF2           equ	4063	;# 
   418   000FE0                     BSR             equ	4064	;# 
   419   000FE1                     FSR1            equ	4065	;# 
   420   000FE1                     FSR1L           equ	4065	;# 
   421   000FE2                     FSR1H           equ	4066	;# 
   422   000FE3                     PLUSW1          equ	4067	;# 
   423   000FE4                     PREINC1         equ	4068	;# 
   424   000FE5                     POSTDEC1        equ	4069	;# 
   425   000FE6                     POSTINC1        equ	4070	;# 
   426   000FE7                     INDF1           equ	4071	;# 
   427   000FE8                     WREG            equ	4072	;# 
   428   000FE9                     FSR0            equ	4073	;# 
   429   000FE9                     FSR0L           equ	4073	;# 
   430   000FEA                     FSR0H           equ	4074	;# 
   431   000FEB                     PLUSW0          equ	4075	;# 
   432   000FEC                     PREINC0         equ	4076	;# 
   433   000FED                     POSTDEC0        equ	4077	;# 
   434   000FEE                     POSTINC0        equ	4078	;# 
   435   000FEF                     INDF0           equ	4079	;# 
   436   000FF0                     INTCON3         equ	4080	;# 
   437   000FF1                     INTCON2         equ	4081	;# 
   438   000FF2                     INTCON          equ	4082	;# 
   439   000FF3                     PROD            equ	4083	;# 
   440   000FF3                     PRODL           equ	4083	;# 
   441   000FF4                     PRODH           equ	4084	;# 
   442   000FF5                     TABLAT          equ	4085	;# 
   443   000FF6                     TBLPTR          equ	4086	;# 
   444   000FF6                     TBLPTRL         equ	4086	;# 
   445   000FF7                     TBLPTRH         equ	4087	;# 
   446   000FF8                     TBLPTRU         equ	4088	;# 
   447   000FF9                     PCLAT           equ	4089	;# 
   448   000FF9                     PC              equ	4089	;# 
   449   000FF9                     PCL             equ	4089	;# 
   450   000FFA                     PCLATH          equ	4090	;# 
   451   000FFB                     PCLATU          equ	4091	;# 
   452   000FFC                     STKPTR          equ	4092	;# 
   453   000FFD                     TOS             equ	4093	;# 
   454   000FFD                     TOSL            equ	4093	;# 
   455   000FFE                     TOSH            equ	4094	;# 
   456   000FFF                     TOSU            equ	4095	;# 
   457   000F62                     SPPDATA         equ	3938	;# 
   458   000F63                     SPPCFG          equ	3939	;# 
   459   000F64                     SPPEPS          equ	3940	;# 
   460   000F65                     SPPCON          equ	3941	;# 
   461   000F66                     UFRM            equ	3942	;# 
   462   000F66                     UFRML           equ	3942	;# 
   463   000F67                     UFRMH           equ	3943	;# 
   464   000F68                     UIR             equ	3944	;# 
   465   000F69                     UIE             equ	3945	;# 
   466   000F6A                     UEIR            equ	3946	;# 
   467   000F6B                     UEIE            equ	3947	;# 
   468   000F6C                     USTAT           equ	3948	;# 
   469   000F6D                     UCON            equ	3949	;# 
   470   000F6E                     UADDR           equ	3950	;# 
   471   000F6F                     UCFG            equ	3951	;# 
   472   000F70                     UEP0            equ	3952	;# 
   473   000F71                     UEP1            equ	3953	;# 
   474   000F72                     UEP2            equ	3954	;# 
   475   000F73                     UEP3            equ	3955	;# 
   476   000F74                     UEP4            equ	3956	;# 
   477   000F75                     UEP5            equ	3957	;# 
   478   000F76                     UEP6            equ	3958	;# 
   479   000F77                     UEP7            equ	3959	;# 
   480   000F78                     UEP8            equ	3960	;# 
   481   000F79                     UEP9            equ	3961	;# 
   482   000F7A                     UEP10           equ	3962	;# 
   483   000F7B                     UEP11           equ	3963	;# 
   484   000F7C                     UEP12           equ	3964	;# 
   485   000F7D                     UEP13           equ	3965	;# 
   486   000F7E                     UEP14           equ	3966	;# 
   487   000F7F                     UEP15           equ	3967	;# 
   488   000F80                     PORTA           equ	3968	;# 
   489   000F81                     PORTB           equ	3969	;# 
   490   000F82                     PORTC           equ	3970	;# 
   491   000F83                     PORTD           equ	3971	;# 
   492   000F84                     PORTE           equ	3972	;# 
   493   000F89                     LATA            equ	3977	;# 
   494   000F8A                     LATB            equ	3978	;# 
   495   000F8B                     LATC            equ	3979	;# 
   496   000F8C                     LATD            equ	3980	;# 
   497   000F8D                     LATE            equ	3981	;# 
   498   000F92                     TRISA           equ	3986	;# 
   499   000F92                     DDRA            equ	3986	;# 
   500   000F93                     TRISB           equ	3987	;# 
   501   000F93                     DDRB            equ	3987	;# 
   502   000F94                     TRISC           equ	3988	;# 
   503   000F94                     DDRC            equ	3988	;# 
   504   000F95                     TRISD           equ	3989	;# 
   505   000F95                     DDRD            equ	3989	;# 
   506   000F96                     TRISE           equ	3990	;# 
   507   000F96                     DDRE            equ	3990	;# 
   508   000F9B                     OSCTUNE         equ	3995	;# 
   509   000F9D                     PIE1            equ	3997	;# 
   510   000F9E                     PIR1            equ	3998	;# 
   511   000F9F                     IPR1            equ	3999	;# 
   512   000FA0                     PIE2            equ	4000	;# 
   513   000FA1                     PIR2            equ	4001	;# 
   514   000FA2                     IPR2            equ	4002	;# 
   515   000FA6                     EECON1          equ	4006	;# 
   516   000FA7                     EECON2          equ	4007	;# 
   517   000FA8                     EEDATA          equ	4008	;# 
   518   000FA9                     EEADR           equ	4009	;# 
   519   000FAB                     RCSTA           equ	4011	;# 
   520   000FAB                     RCSTA1          equ	4011	;# 
   521   000FAC                     TXSTA           equ	4012	;# 
   522   000FAC                     TXSTA1          equ	4012	;# 
   523   000FAD                     TXREG           equ	4013	;# 
   524   000FAD                     TXREG1          equ	4013	;# 
   525   000FAE                     RCREG           equ	4014	;# 
   526   000FAE                     RCREG1          equ	4014	;# 
   527   000FAF                     SPBRG           equ	4015	;# 
   528   000FAF                     SPBRG1          equ	4015	;# 
   529   000FB0                     SPBRGH          equ	4016	;# 
   530   000FB1                     T3CON           equ	4017	;# 
   531   000FB2                     TMR3            equ	4018	;# 
   532   000FB2                     TMR3L           equ	4018	;# 
   533   000FB3                     TMR3H           equ	4019	;# 
   534   000FB4                     CMCON           equ	4020	;# 
   535   000FB5                     CVRCON          equ	4021	;# 
   536   000FB6                     ECCP1AS         equ	4022	;# 
   537   000FB6                     CCP1AS          equ	4022	;# 
   538   000FB7                     ECCP1DEL        equ	4023	;# 
   539   000FB7                     CCP1DEL         equ	4023	;# 
   540   000FB8                     BAUDCON         equ	4024	;# 
   541   000FB8                     BAUDCTL         equ	4024	;# 
   542   000FBA                     CCP2CON         equ	4026	;# 
   543   000FBB                     CCPR2           equ	4027	;# 
   544   000FBB                     CCPR2L          equ	4027	;# 
   545   000FBC                     CCPR2H          equ	4028	;# 
   546   000FBD                     CCP1CON         equ	4029	;# 
   547   000FBD                     ECCP1CON        equ	4029	;# 
   548   000FBE                     CCPR1           equ	4030	;# 
   549   000FBE                     CCPR1L          equ	4030	;# 
   550   000FBF                     CCPR1H          equ	4031	;# 
   551   000FC0                     ADCON2          equ	4032	;# 
   552   000FC1                     ADCON1          equ	4033	;# 
   553   000FC2                     ADCON0          equ	4034	;# 
   554   000FC3                     ADRES           equ	4035	;# 
   555   000FC3                     ADRESL          equ	4035	;# 
   556   000FC4                     ADRESH          equ	4036	;# 
   557   000FC5                     SSPCON2         equ	4037	;# 
   558   000FC6                     SSPCON1         equ	4038	;# 
   559   000FC7                     SSPSTAT         equ	4039	;# 
   560   000FC8                     SSPADD          equ	4040	;# 
   561   000FC9                     SSPBUF          equ	4041	;# 
   562   000FCA                     T2CON           equ	4042	;# 
   563   000FCB                     PR2             equ	4043	;# 
   564   000FCB                     MEMCON          equ	4043	;# 
   565   000FCC                     TMR2            equ	4044	;# 
   566   000FCD                     T1CON           equ	4045	;# 
   567   000FCE                     TMR1            equ	4046	;# 
   568   000FCE                     TMR1L           equ	4046	;# 
   569   000FCF                     TMR1H           equ	4047	;# 
   570   000FD0                     RCON            equ	4048	;# 
   571   000FD1                     WDTCON          equ	4049	;# 
   572   000FD2                     HLVDCON         equ	4050	;# 
   573   000FD2                     LVDCON          equ	4050	;# 
   574   000FD3                     OSCCON          equ	4051	;# 
   575   000FD5                     T0CON           equ	4053	;# 
   576   000FD6                     TMR0            equ	4054	;# 
   577   000FD6                     TMR0L           equ	4054	;# 
   578   000FD7                     TMR0H           equ	4055	;# 
   579   000FD8                     STATUS          equ	4056	;# 
   580   000FD9                     FSR2            equ	4057	;# 
   581   000FD9                     FSR2L           equ	4057	;# 
   582   000FDA                     FSR2H           equ	4058	;# 
   583   000FDB                     PLUSW2          equ	4059	;# 
   584   000FDC                     PREINC2         equ	4060	;# 
   585   000FDD                     POSTDEC2        equ	4061	;# 
   586   000FDE                     POSTINC2        equ	4062	;# 
   587   000FDF                     INDF2           equ	4063	;# 
   588   000FE0                     BSR             equ	4064	;# 
   589   000FE1                     FSR1            equ	4065	;# 
   590   000FE1                     FSR1L           equ	4065	;# 
   591   000FE2                     FSR1H           equ	4066	;# 
   592   000FE3                     PLUSW1          equ	4067	;# 
   593   000FE4                     PREINC1         equ	4068	;# 
   594   000FE5                     POSTDEC1        equ	4069	;# 
   595   000FE6                     POSTINC1        equ	4070	;# 
   596   000FE7                     INDF1           equ	4071	;# 
   597   000FE8                     WREG            equ	4072	;# 
   598   000FE9                     FSR0            equ	4073	;# 
   599   000FE9                     FSR0L           equ	4073	;# 
   600   000FEA                     FSR0H           equ	4074	;# 
   601   000FEB                     PLUSW0          equ	4075	;# 
   602   000FEC                     PREINC0         equ	4076	;# 
   603   000FED                     POSTDEC0        equ	4077	;# 
   604   000FEE                     POSTINC0        equ	4078	;# 
   605   000FEF                     INDF0           equ	4079	;# 
   606   000FF0                     INTCON3         equ	4080	;# 
   607   000FF1                     INTCON2         equ	4081	;# 
   608   000FF2                     INTCON          equ	4082	;# 
   609   000FF3                     PROD            equ	4083	;# 
   610   000FF3                     PRODL           equ	4083	;# 
   611   000FF4                     PRODH           equ	4084	;# 
   612   000FF5                     TABLAT          equ	4085	;# 
   613   000FF6                     TBLPTR          equ	4086	;# 
   614   000FF6                     TBLPTRL         equ	4086	;# 
   615   000FF7                     TBLPTRH         equ	4087	;# 
   616   000FF8                     TBLPTRU         equ	4088	;# 
   617   000FF9                     PCLAT           equ	4089	;# 
   618   000FF9                     PC              equ	4089	;# 
   619   000FF9                     PCL             equ	4089	;# 
   620   000FFA                     PCLATH          equ	4090	;# 
   621   000FFB                     PCLATU          equ	4091	;# 
   622   000FFC                     STKPTR          equ	4092	;# 
   623   000FFD                     TOS             equ	4093	;# 
   624   000FFD                     TOSL            equ	4093	;# 
   625   000FFE                     TOSH            equ	4094	;# 
   626   000FFF                     TOSU            equ	4095	;# 
   627                           
   628                           	psect	smallconst
   629   000800                     __psmallconst:
   630                           	callstack 0
   631   000800  00                 	db	0
   632   000801                     _figura_2:
   633                           	callstack 0
   634   000801  1B                 	db	27
   635   000802  11                 	db	17
   636   000803  1F                 	db	31
   637   000804  1F                 	db	31
   638   000805  1F                 	db	31
   639   000806  11                 	db	17
   640   000807  1B                 	db	27
   641   000808  00                 	db	0
   642   000809                     __end_of_figura_2:
   643                           	callstack 0
   644   000809                     _figura_1:
   645                           	callstack 0
   646   000809  1B                 	db	27
   647   00080A  11                 	db	17
   648   00080B  11                 	db	17
   649   00080C  11                 	db	17
   650   00080D  11                 	db	17
   651   00080E  11                 	db	17
   652   00080F  1B                 	db	27
   653   000810  1F                 	db	31
   654   000811                     __end_of_figura_1:
   655                           	callstack 0
   656   000FA1                     _PIR2bits       set	4001
   657   000FA7                     _EECON2         set	4007
   658   000FA6                     _EECON1bits     set	4006
   659   000FA8                     _EEDATA         set	4008
   660   000FA9                     _EEADR          set	4009
   661   000F95                     _TRISDbits      set	3989
   662   000F8D                     _LATEbits       set	3981
   663   000F8B                     _LATCbits       set	3979
   664   000F81                     _PORTBbits      set	3969
   665   000F81                     _PORTB          set	3969
   666   000FD5                     _T0CONbits      set	4053
   667   000FD6                     _TMR0L          set	4054
   668   000F82                     _PORTCbits      set	3970
   669   000F8C                     _LATDbits       set	3980
   670   000F80                     _PORTAbits      set	3968
   671   000FF2                     _INTCON         set	4082
   672   000FD5                     _T0CON          set	4053
   673   000FF1                     _INTCON2bits    set	4081
   674   000FF2                     _INTCONbits     set	4082
   675   000FD0                     _RCONbits       set	4048
   676   000F8D                     _LATE           set	3981
   677   000F8C                     _LATD           set	3980
   678   000F8B                     _LATC           set	3979
   679   000F8A                     _LATB           set	3978
   680   000F89                     _LATA           set	3977
   681   000F94                     _TRISCbits      set	3988
   682   000F94                     _TRISC          set	3988
   683   000F96                     _TRISE          set	3990
   684   000F95                     _TRISD          set	3989
   685   000F92                     _TRISA          set	3986
   686   000F93                     _TRISB          set	3987
   687   000FC1                     _ADCON1bits     set	4033
   688   000811                     STR_2:
   689   000811  42                 	db	66	;'B'
   690   000812  4C                 	db	76	;'L'
   691   000813  41                 	db	65	;'A'
   692   000814  4E                 	db	78	;'N'
   693   000815  43                 	db	67	;'C'
   694   000816  41                 	db	65	;'A'
   695   000817  53                 	db	83	;'S'
   696   000818  00                 	db	0
   697   000819                     STR_1:
   698   000819  4E                 	db	78	;'N'
   699   00081A  45                 	db	69	;'E'
   700   00081B  47                 	db	71	;'G'
   701   00081C  52                 	db	82	;'R'
   702   00081D  41                 	db	65	;'A'
   703   00081E  53                 	db	83	;'S'
   704   00081F  00                 	db	0
   705   000820                     STR_3:
   706   000820  4D                 	db	77	;'M'
   707   000821  45                 	db	69	;'E'
   708   000822  54                 	db	84	;'T'
   709   000823  41                 	db	65	;'A'
   710   000824  4C                 	db	76	;'L'
   711   000825  00                 	db	0
   712   000826  00                 	db	0	; dummy byte at the end
   713   000800                     __smallconst    set	__psmallconst
   714   000800                     __mediumconst   set	__psmallconst
   715   000002                     __activetblptr  equ	2
   716                           
   717                           ; #config settings
   718                           
   719                           	psect	cinit
   720   0011E6                     __pcinit:
   721                           	callstack 0
   722   0011E6                     start_initialization:
   723                           	callstack 0
   724   0011E6                     __initialization:
   725                           	callstack 0
   726                           
   727                           ; Clear objects allocated to COMRAM (17 bytes)
   728   0011E6  EE00  F01E         	lfsr	0,__pbssCOMRAM
   729   0011EA  0E11               	movlw	17
   730   0011EC                     clear_0:
   731   0011EC  6AEE               	clrf	postinc0,c
   732   0011EE  06E8               	decf	wreg,f,c
   733   0011F0  E1FD               	bnz	clear_0
   734   0011F2                     end_of_initialization:
   735                           	callstack 0
   736   0011F2                     __end_of__initialization:
   737                           	callstack 0
   738   0011F2  902F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   739   0011F4  922F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   740   0011F6  0E00               	movlw	low (__Lmediumconst shr (0+16))
   741   0011F8  6EF8               	movwf	tblptru,c
   742   0011FA  0100               	movlb	0
   743   0011FC  EF08  F005         	goto	_main	;jump to C main() function
   744                           
   745                           	psect	bssCOMRAM
   746   00001E                     __pbssCOMRAM:
   747                           	callstack 0
   748   00001E                     _Fila3:
   749                           	callstack 0
   750   00001E                     	ds	4
   751   000022                     _Fila2:
   752                           	callstack 0
   753   000022                     	ds	4
   754   000026                     _Fila1:
   755                           	callstack 0
   756   000026                     	ds	4
   757   00002A                     _c:
   758                           	callstack 0
   759   00002A                     	ds	1
   760   00002B                     _f:
   761                           	callstack 0
   762   00002B                     	ds	1
   763   00002C                     _NEGRA:
   764                           	callstack 0
   765   00002C                     	ds	1
   766   00002D                     _BLANCA:
   767                           	callstack 0
   768   00002D                     	ds	1
   769   00002E                     _METAL:
   770                           	callstack 0
   771   00002E                     	ds	1
   772                           
   773                           	psect	cstackCOMRAM
   774   000001                     __pcstackCOMRAM:
   775                           	callstack 0
   776   000001                     i1Lcd_Port@a:
   777                           	callstack 0
   778   000001                     
   779                           ; 1 bytes @ 0x0
   780   000001                     	ds	1
   781   000002                     ??i1_Lcd_Cmd:
   782                           
   783                           ; 1 bytes @ 0x1
   784   000002                     	ds	1
   785   000003                     i1Lcd_Cmd@a:
   786                           	callstack 0
   787                           
   788                           ; 1 bytes @ 0x2
   789   000003                     	ds	1
   790   000004                     i1Lcd_Set_Cursor@b:
   791                           	callstack 0
   792   000004                     
   793                           ; 1 bytes @ 0x3
   794   000004                     	ds	1
   795   000005                     i1Lcd_Set_Cursor@a:
   796                           	callstack 0
   797   000005                     
   798                           ; 1 bytes @ 0x4
   799   000005                     	ds	1
   800   000006                     i1Lcd_Set_Cursor@z:
   801                           	callstack 0
   802                           
   803                           ; 1 bytes @ 0x5
   804   000006                     	ds	1
   805   000007                     i1Lcd_Set_Cursor@y:
   806                           	callstack 0
   807                           
   808                           ; 1 bytes @ 0x6
   809   000007                     	ds	1
   810   000008                     i1Lcd_Set_Cursor@temp:
   811                           	callstack 0
   812                           
   813                           ; 1 bytes @ 0x7
   814   000008                     	ds	1
   815   000009                     ??_LowISR:
   816                           
   817                           ; 1 bytes @ 0x8
   818   000009                     	ds	3
   819   00000C                     LowISR@dummy:
   820                           	callstack 0
   821                           
   822                           ; 1 bytes @ 0xB
   823   00000C                     	ds	1
   824   00000D                     Lcd_Port@a:
   825                           	callstack 0
   826   00000D                     EEPROM_Read@dir:
   827                           	callstack 0
   828   00000D                     ??_dejar:
   829   00000D                     
   830                           ; 1 bytes @ 0xC
   831   00000D                     	ds	1
   832   00000E                     estado@i:
   833                           	callstack 0
   834   00000E                     Lcd_Write_Char@temp:
   835                           	callstack 0
   836   00000E                     ??_Lcd_Cmd:
   837                           
   838                           ; 1 bytes @ 0xD
   839   00000E                     	ds	1
   840   00000F                     estado@i_691:
   841                           	callstack 0
   842   00000F                     Lcd_Cmd@a:
   843                           	callstack 0
   844   00000F                     Lcd_Write_Char@y:
   845                           	callstack 0
   846                           
   847                           ; 1 bytes @ 0xE
   848   00000F                     	ds	1
   849   000010                     estado@i_692:
   850                           	callstack 0
   851   000010                     Lcd_Set_Cursor@b:
   852                           	callstack 0
   853   000010                     Lcd_Write_Char@a:
   854                           	callstack 0
   855   000010                     ??_Lcd_Init:
   856   000010                     
   857                           ; 1 bytes @ 0xF
   858   000010                     	ds	1
   859   000011                     Lcd_Set_Cursor@a:
   860                           	callstack 0
   861   000011                     Lcd_Write_String@a:
   862                           	callstack 0
   863   000011                     Lcd_CGRAM_CreateChar@chardata:
   864                           	callstack 0
   865   000011                     
   866                           ; 1 bytes @ 0x10
   867   000011                     	ds	1
   868   000012                     Lcd_Set_Cursor@z:
   869                           	callstack 0
   870   000012                     ??_Lcd_CGRAM_CreateChar:
   871   000012                     ??_Lcd_Write_String:
   872                           
   873                           ; 1 bytes @ 0x11
   874   000012                     	ds	1
   875   000013                     Lcd_Set_Cursor@y:
   876                           	callstack 0
   877   000013                     Lcd_CGRAM_CreateChar@add:
   878                           	callstack 0
   879   000013                     Lcd_Write_String@i:
   880                           	callstack 0
   881                           
   882                           ; 2 bytes @ 0x12
   883   000013                     	ds	1
   884   000014                     Lcd_Set_Cursor@temp:
   885                           	callstack 0
   886   000014                     Lcd_CGRAM_CreateChar@i:
   887                           	callstack 0
   888                           
   889                           ; 1 bytes @ 0x13
   890   000014                     	ds	1
   891   000015                     Actualizar_Matriz@i:
   892                           	callstack 0
   893   000015                     Lcd_CGRAM_CreateChar@i_871:
   894                           	callstack 0
   895   000015                     
   896                           ; 1 bytes @ 0x14
   897   000015                     	ds	1
   898   000016                     Actualizar_Matriz@i_682:
   899                           	callstack 0
   900   000016                     Lcd_CGRAM_CreateChar@i_872:
   901                           	callstack 0
   902                           
   903                           ; 1 bytes @ 0x15
   904   000016                     	ds	1
   905   000017                     Actualizar_Matriz@i_683:
   906                           	callstack 0
   907   000017                     Lcd_CGRAM_CreateChar@i_873:
   908                           	callstack 0
   909                           
   910                           ; 1 bytes @ 0x16
   911   000017                     	ds	1
   912   000018                     Lcd_CGRAM_CreateChar@i_874:
   913                           	callstack 0
   914                           
   915                           ; 1 bytes @ 0x17
   916   000018                     	ds	1
   917   000019                     Lcd_CGRAM_CreateChar@i_875:
   918                           	callstack 0
   919                           
   920                           ; 1 bytes @ 0x18
   921   000019                     	ds	1
   922   00001A                     Lcd_CGRAM_CreateChar@i_876:
   923                           	callstack 0
   924                           
   925                           ; 1 bytes @ 0x19
   926   00001A                     	ds	1
   927   00001B                     Lcd_CGRAM_CreateChar@i_877:
   928                           	callstack 0
   929                           
   930                           ; 1 bytes @ 0x1A
   931   00001B                     	ds	1
   932   00001C                     ??_main:
   933                           
   934                           ; 1 bytes @ 0x1B
   935   00001C                     	ds	2
   936                           
   937 ;;
   938 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   939 ;;
   940 ;; *************** function _main *****************
   941 ;; Defined at:
   942 ;;		line 234 in file "ASCENSOR.c"
   943 ;; Parameters:    Size  Location     Type
   944 ;;		None
   945 ;; Auto vars:     Size  Location     Type
   946 ;;		None
   947 ;; Return value:  Size  Location     Type
   948 ;;                  1    wreg      void 
   949 ;; Registers used:
   950 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   951 ;; Tracked objects:
   952 ;;		On entry : 0/0
   953 ;;		On exit  : 0/0
   954 ;;		Unchanged: 0/0
   955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   956 ;;      Params:         0       0       0       0       0       0       0       0       0
   957 ;;      Locals:         0       0       0       0       0       0       0       0       0
   958 ;;      Temps:          2       0       0       0       0       0       0       0       0
   959 ;;      Totals:         2       0       0       0       0       0       0       0       0
   960 ;;Total ram usage:        2 bytes
   961 ;; Hardware stack levels required when called: 9
   962 ;; This function calls:
   963 ;;		_Actualizar_Matriz
   964 ;;		_Lcd_CGRAM_Close
   965 ;;		_Lcd_CGRAM_CreateChar
   966 ;;		_Lcd_CGRAM_Init
   967 ;;		_Lcd_Clear
   968 ;;		_Lcd_Init
   969 ;;		_Lcd_Set_Cursor
   970 ;;		_Lcd_Write_Char
   971 ;;		_Lcd_Write_String
   972 ;;		_Modificar
   973 ;;		_dejar
   974 ;;		_detectar
   975 ;;		_estado
   976 ;;		_init_int
   977 ;;		_init_ports
   978 ;;		_reposo
   979 ;; This function is called by:
   980 ;;		Startup code after reset
   981 ;; This function uses a non-reentrant model
   982 ;;
   983                           
   984                           	psect	text0
   985   000A10                     __ptext0:
   986                           	callstack 0
   987   000A10                     _main:
   988                           	callstack 22
   989   000A10                     
   990                           ;ASCENSOR.c: 235:     init_ports();
   991   000A10  ECE4  F008         	call	_init_ports	;wreg free
   992                           
   993                           ;ASCENSOR.c: 236:     init_int();
   994   000A14  EC00  F009         	call	_init_int	;wreg free
   995                           
   996                           ;ASCENSOR.c: 237:     Lcd_Init();
   997   000A18  EC25  F007         	call	_Lcd_Init	;wreg free
   998                           
   999                           ;ASCENSOR.c: 239:     Lcd_CGRAM_Init();
  1000   000A1C  EC29  F009         	call	_Lcd_CGRAM_Init	;wreg free
  1001   000A20                     
  1002                           ;ASCENSOR.c: 240:     Lcd_CGRAM_CreateChar(0,figura_1);
  1003   000A20  0E09               	movlw	low _figura_1
  1004   000A22  6E11               	movwf	Lcd_CGRAM_CreateChar@chardata^0,c
  1005   000A24  0E00               	movlw	0
  1006   000A26  EC14  F004         	call	_Lcd_CGRAM_CreateChar
  1007   000A2A                     
  1008                           ;ASCENSOR.c: 241:     Lcd_CGRAM_CreateChar(1,figura_2);
  1009   000A2A  0E01               	movlw	low _figura_2
  1010   000A2C  6E11               	movwf	Lcd_CGRAM_CreateChar@chardata^0,c
  1011   000A2E  0E01               	movlw	1
  1012   000A30  EC14  F004         	call	_Lcd_CGRAM_CreateChar
  1013                           
  1014                           ;ASCENSOR.c: 242:     Lcd_CGRAM_Close();
  1015   000A34  EC30  F009         	call	_Lcd_CGRAM_Close	;wreg free
  1016   000A38                     
  1017                           ;ASCENSOR.c: 244:     estado();
  1018   000A38  ECA6  F007         	call	_estado	;wreg free
  1019   000A3C                     
  1020                           ;ASCENSOR.c: 245:     Lcd_Clear();
  1021   000A3C  EC22  F009         	call	_Lcd_Clear	;wreg free
  1022   000A40                     
  1023                           ;ASCENSOR.c: 246:     Lcd_Set_Cursor(1,1);
  1024   000A40  0E01               	movlw	1
  1025   000A42  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1026   000A44  0E01               	movlw	1
  1027   000A46  EC0E  F006         	call	_Lcd_Set_Cursor
  1028   000A4A                     
  1029                           ;ASCENSOR.c: 247:     Lcd_Write_String("NEGRAS");
  1030   000A4A  0E19               	movlw	low STR_1
  1031   000A4C  6E11               	movwf	Lcd_Write_String@a^0,c
  1032   000A4E  EC62  F008         	call	_Lcd_Write_String	;wreg free
  1033   000A52                     
  1034                           ;ASCENSOR.c: 248:     Lcd_Set_Cursor(2,1);
  1035   000A52  0E01               	movlw	1
  1036   000A54  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1037   000A56  0E02               	movlw	2
  1038   000A58  EC0E  F006         	call	_Lcd_Set_Cursor
  1039   000A5C                     
  1040                           ;ASCENSOR.c: 249:     Lcd_Write_String("BLANCAS");
  1041   000A5C  0E11               	movlw	low STR_2
  1042   000A5E  6E11               	movwf	Lcd_Write_String@a^0,c
  1043   000A60  EC62  F008         	call	_Lcd_Write_String	;wreg free
  1044   000A64                     
  1045                           ;ASCENSOR.c: 250:     Lcd_Set_Cursor(3,1);
  1046   000A64  0E01               	movlw	1
  1047   000A66  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1048   000A68  0E03               	movlw	3
  1049   000A6A  EC0E  F006         	call	_Lcd_Set_Cursor
  1050   000A6E                     
  1051                           ;ASCENSOR.c: 251:     Lcd_Write_String("METAL");
  1052   000A6E  0E20               	movlw	low STR_3
  1053   000A70  6E11               	movwf	Lcd_Write_String@a^0,c
  1054   000A72  EC62  F008         	call	_Lcd_Write_String	;wreg free
  1055   000A76                     
  1056                           ;ASCENSOR.c: 252:     _delay((unsigned long)((200)*(4000000/4000.0)));
  1057   000A76  0E02               	movlw	2
  1058   000A78  6E1D               	movwf	(??_main+1)^0,c
  1059   000A7A  0E04               	movlw	4
  1060   000A7C  6E1C               	movwf	??_main^0,c
  1061   000A7E  0EBA               	movlw	186
  1062   000A80                     u1177:
  1063   000A80  2EE8               	decfsz	wreg,f,c
  1064   000A82  D7FE               	bra	u1177
  1065   000A84  2E1C               	decfsz	??_main^0,f,c
  1066   000A86  D7FC               	bra	u1177
  1067   000A88  2E1D               	decfsz	(??_main+1)^0,f,c
  1068   000A8A  D7FA               	bra	u1177
  1069   000A8C  D000               	nop2	
  1070   000A8E                     l1964:
  1071                           
  1072                           ;ASCENSOR.c: 255:         Actualizar_Matriz();
  1073   000A8E  EC9B  F005         	call	_Actualizar_Matriz	;wreg free
  1074   000A92                     
  1075                           ;ASCENSOR.c: 256:         INTCONbits.GIEL=1;
  1076   000A92  8CF2               	bsf	242,6,c	;volatile
  1077                           
  1078                           ;ASCENSOR.c: 257:     while(PORTBbits.RB0==0){
  1079   000A94  EF6C  F005         	goto	l1978
  1080   000A98                     l196:
  1081                           
  1082                           ;ASCENSOR.c: 258:   if(PORTAbits.RA2==1 || PORTAbits.RA1==1){
  1083   000A98  B480               	btfsc	128,2,c	;volatile
  1084   000A9A  EF51  F005         	goto	u1091
  1085   000A9E  EF53  F005         	goto	u1090
  1086   000AA2                     u1091:
  1087   000AA2  EF5A  F005         	goto	l1970
  1088   000AA6                     u1090:
  1089   000AA6  A280               	btfss	128,1,c	;volatile
  1090   000AA8  EF58  F005         	goto	u1101
  1091   000AAC  EF5A  F005         	goto	u1100
  1092   000AB0                     u1101:
  1093   000AB0  EF5C  F005         	goto	l1972
  1094   000AB4                     u1100:
  1095   000AB4                     l1970:
  1096                           
  1097                           ;ASCENSOR.c: 259:       reposo();
  1098   000AB4  EC87  F008         	call	_reposo	;wreg free
  1099   000AB8                     l1972:
  1100                           
  1101                           ;ASCENSOR.c: 261:         if( PORTBbits.RB2==1 || PORTBbits.RB3==1){
  1102   000AB8  B481               	btfsc	129,2,c	;volatile
  1103   000ABA  EF61  F005         	goto	u1111
  1104   000ABE  EF63  F005         	goto	u1110
  1105   000AC2                     u1111:
  1106   000AC2  EF6A  F005         	goto	l1976
  1107   000AC6                     u1110:
  1108   000AC6  A681               	btfss	129,3,c	;volatile
  1109   000AC8  EF68  F005         	goto	u1121
  1110   000ACC  EF6A  F005         	goto	u1120
  1111   000AD0                     u1121:
  1112   000AD0  EF6C  F005         	goto	l1978
  1113   000AD4                     u1120:
  1114   000AD4                     l1976:
  1115                           
  1116                           ;ASCENSOR.c: 262:             Modificar();
  1117   000AD4  EC3B  F008         	call	_Modificar	;wreg free
  1118   000AD8                     l1978:
  1119                           
  1120                           ;ASCENSOR.c: 257:     while(PORTBbits.RB0==0){
  1121   000AD8  A081               	btfss	129,0,c	;volatile
  1122   000ADA  EF71  F005         	goto	u1131
  1123   000ADE  EF73  F005         	goto	u1130
  1124   000AE2                     u1131:
  1125   000AE2  EF4C  F005         	goto	l196
  1126   000AE6                     u1130:
  1127   000AE6                     
  1128                           ;ASCENSOR.c: 265:     Lcd_Set_Cursor(2,1);
  1129   000AE6  0E01               	movlw	1
  1130   000AE8  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1131   000AEA  0E02               	movlw	2
  1132   000AEC  EC0E  F006         	call	_Lcd_Set_Cursor
  1133                           
  1134                           ;ASCENSOR.c: 266:     Lcd_Write_Char(1);
  1135   000AF0  0E01               	movlw	1
  1136   000AF2  ECA8  F008         	call	_Lcd_Write_Char
  1137   000AF6                     
  1138                           ;ASCENSOR.c: 267:     detectar();
  1139   000AF6  EC66  F007         	call	_detectar	;wreg free
  1140   000AFA                     
  1141                           ;ASCENSOR.c: 268:     if(METAL==1 || BLANCA==1 || NEGRA==1){
  1142   000AFA  042E               	decf	_METAL^0,w,c
  1143   000AFC  B4D8               	btfsc	status,2,c
  1144   000AFE  EF83  F005         	goto	u1141
  1145   000B02  EF85  F005         	goto	u1140
  1146   000B06                     u1141:
  1147   000B06  EF95  F005         	goto	l1990
  1148   000B0A                     u1140:
  1149   000B0A  042D               	decf	_BLANCA^0,w,c
  1150   000B0C  B4D8               	btfsc	status,2,c
  1151   000B0E  EF8B  F005         	goto	u1151
  1152   000B12  EF8D  F005         	goto	u1150
  1153   000B16                     u1151:
  1154   000B16  EF95  F005         	goto	l1990
  1155   000B1A                     u1150:
  1156   000B1A  042C               	decf	_NEGRA^0,w,c
  1157   000B1C  A4D8               	btfss	status,2,c
  1158   000B1E  EF93  F005         	goto	u1161
  1159   000B22  EF95  F005         	goto	u1160
  1160   000B26                     u1161:
  1161   000B26  EF47  F005         	goto	l1964
  1162   000B2A                     u1160:
  1163   000B2A                     l1990:
  1164                           
  1165                           ;ASCENSOR.c: 269:     dejar();
  1166   000B2A  ECE0  F006         	call	_dejar	;wreg free
  1167                           
  1168                           ;ASCENSOR.c: 270:      }
  1169   000B2E  EF47  F005         	goto	l1964
  1170   000B32  EF6C  F000         	goto	start
  1171   000B36                     __end_of_main:
  1172                           	callstack 0
  1173                           
  1174 ;; *************** function _reposo *****************
  1175 ;; Defined at:
  1176 ;;		line 70 in file "ASCENSOR.c"
  1177 ;; Parameters:    Size  Location     Type
  1178 ;;		None
  1179 ;; Auto vars:     Size  Location     Type
  1180 ;;		None
  1181 ;; Return value:  Size  Location     Type
  1182 ;;                  1    wreg      void 
  1183 ;; Registers used:
  1184 ;;		None
  1185 ;; Tracked objects:
  1186 ;;		On entry : 0/0
  1187 ;;		On exit  : 0/0
  1188 ;;		Unchanged: 0/0
  1189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1190 ;;      Params:         0       0       0       0       0       0       0       0       0
  1191 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1192 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1193 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1194 ;;Total ram usage:        0 bytes
  1195 ;; Hardware stack levels used: 1
  1196 ;; Hardware stack levels required when called: 5
  1197 ;; This function calls:
  1198 ;;		Nothing
  1199 ;; This function is called by:
  1200 ;;		_main
  1201 ;; This function uses a non-reentrant model
  1202 ;;
  1203                           
  1204                           	psect	text1
  1205   00110E                     __ptext1:
  1206                           	callstack 0
  1207   00110E                     _reposo:
  1208                           	callstack 25
  1209   00110E                     
  1210                           ;ASCENSOR.c: 71:  if(PORTAbits.RA1==1){
  1211   00110E  A280               	btfss	128,1,c	;volatile
  1212   001110  EF8C  F008         	goto	u131
  1213   001114  EF8E  F008         	goto	u130
  1214   001118                     u131:
  1215   001118  EF97  F008         	goto	l105
  1216   00111C                     u130:
  1217   00111C                     
  1218                           ;ASCENSOR.c: 72:   LATDbits.LATD3=1;
  1219   00111C  868C               	bsf	140,3,c	;volatile
  1220   00111E                     l106:
  1221   00111E  B280               	btfsc	128,1,c	;volatile
  1222   001120  EF94  F008         	goto	u141
  1223   001124  EF96  F008         	goto	u140
  1224   001128                     u141:
  1225   001128  EF8F  F008         	goto	l106
  1226   00112C                     u140:
  1227   00112C                     
  1228                           ;ASCENSOR.c: 74:      LATDbits.LATD3=0;
  1229   00112C  968C               	bcf	140,3,c	;volatile
  1230   00112E                     l105:
  1231                           
  1232                           ;ASCENSOR.c: 77:     if(PORTAbits.RA2==1){
  1233   00112E  A480               	btfss	128,2,c	;volatile
  1234   001130  EF9C  F008         	goto	u151
  1235   001134  EF9E  F008         	goto	u150
  1236   001138                     u151:
  1237   001138  EFA7  F008         	goto	l113
  1238   00113C                     u150:
  1239   00113C                     
  1240                           ;ASCENSOR.c: 78:      LATDbits.LATD0=1;
  1241   00113C  808C               	bsf	140,0,c	;volatile
  1242   00113E                     l110:
  1243   00113E  B480               	btfsc	128,2,c	;volatile
  1244   001140  EFA4  F008         	goto	u161
  1245   001144  EFA6  F008         	goto	u160
  1246   001148                     u161:
  1247   001148  EF9F  F008         	goto	l110
  1248   00114C                     u160:
  1249   00114C                     
  1250                           ;ASCENSOR.c: 80:      LATDbits.LATD0=0;
  1251   00114C  908C               	bcf	140,0,c	;volatile
  1252   00114E                     l113:
  1253   00114E  0012               	return		;funcret
  1254   001150                     __end_of_reposo:
  1255                           	callstack 0
  1256                           
  1257 ;; *************** function _init_ports *****************
  1258 ;; Defined at:
  1259 ;;		line 41 in file "ASCENSOR.c"
  1260 ;; Parameters:    Size  Location     Type
  1261 ;;		None
  1262 ;; Auto vars:     Size  Location     Type
  1263 ;;		None
  1264 ;; Return value:  Size  Location     Type
  1265 ;;                  1    wreg      void 
  1266 ;; Registers used:
  1267 ;;		wreg, status,2
  1268 ;; Tracked objects:
  1269 ;;		On entry : 0/0
  1270 ;;		On exit  : 0/0
  1271 ;;		Unchanged: 0/0
  1272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1273 ;;      Params:         0       0       0       0       0       0       0       0       0
  1274 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1275 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1276 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1277 ;;Total ram usage:        0 bytes
  1278 ;; Hardware stack levels used: 1
  1279 ;; Hardware stack levels required when called: 5
  1280 ;; This function calls:
  1281 ;;		Nothing
  1282 ;; This function is called by:
  1283 ;;		_main
  1284 ;; This function uses a non-reentrant model
  1285 ;;
  1286                           
  1287                           	psect	text2
  1288   0011C8                     __ptext2:
  1289                           	callstack 0
  1290   0011C8                     _init_ports:
  1291                           	callstack 25
  1292   0011C8                     
  1293                           ;ASCENSOR.c: 42:     ADCON1bits.PCFG=0x0F;
  1294   0011C8  0E0F               	movlw	15
  1295   0011CA  12C1               	iorwf	193,f,c	;volatile
  1296   0011CC                     
  1297                           ;ASCENSOR.c: 43:     TRISB=0XFF;
  1298   0011CC  6893               	setf	147,c	;volatile
  1299   0011CE                     
  1300                           ;ASCENSOR.c: 44:     TRISA=0XFF;
  1301   0011CE  6892               	setf	146,c	;volatile
  1302   0011D0                     
  1303                           ;ASCENSOR.c: 45:     TRISD=0X00;
  1304   0011D0  6A95               	clrf	149,c	;volatile
  1305   0011D2                     
  1306                           ;ASCENSOR.c: 46:     TRISE=0X00;
  1307   0011D2  6A96               	clrf	150,c	;volatile
  1308   0011D4                     
  1309                           ;ASCENSOR.c: 47:     TRISC=0XFF;
  1310   0011D4  6894               	setf	148,c	;volatile
  1311   0011D6                     
  1312                           ;ASCENSOR.c: 48:     TRISCbits.RC0=0;
  1313   0011D6  9094               	bcf	148,0,c	;volatile
  1314   0011D8                     
  1315                           ;ASCENSOR.c: 49:     TRISCbits.RC6=0;
  1316   0011D8  9C94               	bcf	148,6,c	;volatile
  1317   0011DA                     
  1318                           ;ASCENSOR.c: 51:     LATA=0X00;
  1319   0011DA  6A89               	clrf	137,c	;volatile
  1320   0011DC                     
  1321                           ;ASCENSOR.c: 52:     LATB=0X00;
  1322   0011DC  6A8A               	clrf	138,c	;volatile
  1323   0011DE                     
  1324                           ;ASCENSOR.c: 53:     LATC=0X00;
  1325   0011DE  6A8B               	clrf	139,c	;volatile
  1326   0011E0                     
  1327                           ;ASCENSOR.c: 54:     LATD=0X00;
  1328   0011E0  6A8C               	clrf	140,c	;volatile
  1329   0011E2                     
  1330                           ;ASCENSOR.c: 55:     LATE=0X00;
  1331   0011E2  6A8D               	clrf	141,c	;volatile
  1332   0011E4  0012               	return		;funcret
  1333   0011E6                     __end_of_init_ports:
  1334                           	callstack 0
  1335                           
  1336 ;; *************** function _init_int *****************
  1337 ;; Defined at:
  1338 ;;		line 59 in file "ASCENSOR.c"
  1339 ;; Parameters:    Size  Location     Type
  1340 ;;		None
  1341 ;; Auto vars:     Size  Location     Type
  1342 ;;		None
  1343 ;; Return value:  Size  Location     Type
  1344 ;;                  1    wreg      void 
  1345 ;; Registers used:
  1346 ;;		wreg, status,2
  1347 ;; Tracked objects:
  1348 ;;		On entry : 0/0
  1349 ;;		On exit  : 0/0
  1350 ;;		Unchanged: 0/0
  1351 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1352 ;;      Params:         0       0       0       0       0       0       0       0       0
  1353 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1354 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1355 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1356 ;;Total ram usage:        0 bytes
  1357 ;; Hardware stack levels used: 1
  1358 ;; Hardware stack levels required when called: 5
  1359 ;; This function calls:
  1360 ;;		Nothing
  1361 ;; This function is called by:
  1362 ;;		_main
  1363 ;; This function uses a non-reentrant model
  1364 ;;
  1365                           
  1366                           	psect	text3
  1367   001200                     __ptext3:
  1368                           	callstack 0
  1369   001200                     _init_int:
  1370                           	callstack 25
  1371   001200                     
  1372                           ;ASCENSOR.c: 60:     RCONbits.IPEN= 1;
  1373   001200  8ED0               	bsf	208,7,c	;volatile
  1374                           
  1375                           ;ASCENSOR.c: 61:     INTCONbits.RBIE=1;
  1376   001202  86F2               	bsf	242,3,c	;volatile
  1377                           
  1378                           ;ASCENSOR.c: 62:     INTCONbits.RBIF=0;
  1379   001204  90F2               	bcf	242,0,c	;volatile
  1380                           
  1381                           ;ASCENSOR.c: 63:     INTCON2bits.RBIP=0;
  1382   001206  90F1               	bcf	241,0,c	;volatile
  1383   001208                     
  1384                           ;ASCENSOR.c: 64:     T0CON = 0B01111000;
  1385   001208  0E78               	movlw	120
  1386   00120A  6ED5               	movwf	213,c	;volatile
  1387                           
  1388                           ;ASCENSOR.c: 65:     INTCON = 0B10101000;
  1389   00120C  0EA8               	movlw	168
  1390   00120E  6EF2               	movwf	242,c	;volatile
  1391   001210                     
  1392                           ;ASCENSOR.c: 66:     INTCON2bits.TMR0IP = 1;
  1393   001210  84F1               	bsf	241,2,c	;volatile
  1394   001212  0012               	return		;funcret
  1395   001214                     __end_of_init_int:
  1396                           	callstack 0
  1397                           
  1398 ;; *************** function _estado *****************
  1399 ;; Defined at:
  1400 ;;		line 152 in file "ASCENSOR.c"
  1401 ;; Parameters:    Size  Location     Type
  1402 ;;		None
  1403 ;; Auto vars:     Size  Location     Type
  1404 ;;  i               1   15[COMRAM] unsigned char 
  1405 ;;  i               1   14[COMRAM] unsigned char 
  1406 ;;  i               1   13[COMRAM] unsigned char 
  1407 ;;  g               1    0        unsigned char 
  1408 ;; Return value:  Size  Location     Type
  1409 ;;                  1    wreg      void 
  1410 ;; Registers used:
  1411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1412 ;; Tracked objects:
  1413 ;;		On entry : 0/0
  1414 ;;		On exit  : 0/0
  1415 ;;		Unchanged: 0/0
  1416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1417 ;;      Params:         0       0       0       0       0       0       0       0       0
  1418 ;;      Locals:         3       0       0       0       0       0       0       0       0
  1419 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1420 ;;      Totals:         3       0       0       0       0       0       0       0       0
  1421 ;;Total ram usage:        3 bytes
  1422 ;; Hardware stack levels used: 1
  1423 ;; Hardware stack levels required when called: 6
  1424 ;; This function calls:
  1425 ;;		_EEPROM_Read
  1426 ;; This function is called by:
  1427 ;;		_main
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431                           	psect	text4
  1432   000F4C                     __ptext4:
  1433                           	callstack 0
  1434   000F4C                     _estado:
  1435                           	callstack 24
  1436   000F4C                     
  1437                           ;ASCENSOR.c: 153:     char g;;ASCENSOR.c: 154:     for (char i=0; i<=3; i++){
  1438   000F4C  6A0E               	clrf	estado@i^0,c
  1439   000F4E                     l1284:
  1440                           
  1441                           ;ASCENSOR.c: 155:         Fila1[i]=EEPROM_Read(i);
  1442   000F4E  500E               	movf	estado@i^0,w,c
  1443   000F50  0F26               	addlw	low _Fila1
  1444   000F52  6ED9               	movwf	fsr2l,c
  1445   000F54  6ADA               	clrf	fsr2h,c
  1446   000F56  500E               	movf	estado@i^0,w,c
  1447   000F58  EC13  F009         	call	_EEPROM_Read
  1448   000F5C  6EDF               	movwf	indf2,c
  1449   000F5E                     
  1450                           ;ASCENSOR.c: 156:     }
  1451   000F5E  2A0E               	incf	estado@i^0,f,c
  1452   000F60  0E03               	movlw	3
  1453   000F62  640E               	cpfsgt	estado@i^0,c
  1454   000F64  EFB6  F007         	goto	u301
  1455   000F68  EFB8  F007         	goto	u300
  1456   000F6C                     u301:
  1457   000F6C  EFA7  F007         	goto	l1284
  1458   000F70                     u300:
  1459   000F70                     
  1460                           ;ASCENSOR.c: 157:     for (char i=0; i<=3; i++){
  1461   000F70  6A0F               	clrf	estado@i_691^0,c
  1462   000F72                     l1294:
  1463                           
  1464                           ;ASCENSOR.c: 158:         Fila2[i]=EEPROM_Read(i+4);
  1465   000F72  500F               	movf	estado@i_691^0,w,c
  1466   000F74  0F22               	addlw	low _Fila2
  1467   000F76  6ED9               	movwf	fsr2l,c
  1468   000F78  6ADA               	clrf	fsr2h,c
  1469   000F7A  500F               	movf	estado@i_691^0,w,c
  1470   000F7C  0F04               	addlw	4
  1471   000F7E  EC13  F009         	call	_EEPROM_Read
  1472   000F82  6EDF               	movwf	indf2,c
  1473   000F84                     
  1474                           ;ASCENSOR.c: 159:     }
  1475   000F84  2A0F               	incf	estado@i_691^0,f,c
  1476   000F86  0E03               	movlw	3
  1477   000F88  640F               	cpfsgt	estado@i_691^0,c
  1478   000F8A  EFC9  F007         	goto	u311
  1479   000F8E  EFCB  F007         	goto	u310
  1480   000F92                     u311:
  1481   000F92  EFB9  F007         	goto	l1294
  1482   000F96                     u310:
  1483   000F96                     
  1484                           ;ASCENSOR.c: 160:     for (char i=0; i<=3; i++){
  1485   000F96  6A10               	clrf	estado@i_692^0,c
  1486   000F98                     l1304:
  1487                           
  1488                           ;ASCENSOR.c: 161:         Fila3[i]=EEPROM_Read(i+8);
  1489   000F98  5010               	movf	estado@i_692^0,w,c
  1490   000F9A  0F1E               	addlw	low _Fila3
  1491   000F9C  6ED9               	movwf	fsr2l,c
  1492   000F9E  6ADA               	clrf	fsr2h,c
  1493   000FA0  5010               	movf	estado@i_692^0,w,c
  1494   000FA2  0F08               	addlw	8
  1495   000FA4  EC13  F009         	call	_EEPROM_Read
  1496   000FA8  6EDF               	movwf	indf2,c
  1497   000FAA                     
  1498                           ;ASCENSOR.c: 162:     }
  1499   000FAA  2A10               	incf	estado@i_692^0,f,c
  1500   000FAC  0E03               	movlw	3
  1501   000FAE  6410               	cpfsgt	estado@i_692^0,c
  1502   000FB0  EFDC  F007         	goto	u321
  1503   000FB4  EFDE  F007         	goto	u320
  1504   000FB8                     u321:
  1505   000FB8  EFCC  F007         	goto	l1304
  1506   000FBC                     u320:
  1507   000FBC  0012               	return		;funcret
  1508   000FBE                     __end_of_estado:
  1509                           	callstack 0
  1510                           
  1511 ;; *************** function _EEPROM_Read *****************
  1512 ;; Defined at:
  1513 ;;		line 20 in file "../EEPROM_RW.X/eeprom.c"
  1514 ;; Parameters:    Size  Location     Type
  1515 ;;  dir             1    wreg     unsigned char 
  1516 ;; Auto vars:     Size  Location     Type
  1517 ;;  dir             1   12[COMRAM] unsigned char 
  1518 ;; Return value:  Size  Location     Type
  1519 ;;                  1    wreg      unsigned char 
  1520 ;; Registers used:
  1521 ;;		wreg, status,2
  1522 ;; Tracked objects:
  1523 ;;		On entry : 0/0
  1524 ;;		On exit  : 0/0
  1525 ;;		Unchanged: 0/0
  1526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1527 ;;      Params:         0       0       0       0       0       0       0       0       0
  1528 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1529 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1530 ;;      Totals:         1       0       0       0       0       0       0       0       0
  1531 ;;Total ram usage:        1 bytes
  1532 ;; Hardware stack levels used: 1
  1533 ;; Hardware stack levels required when called: 5
  1534 ;; This function calls:
  1535 ;;		Nothing
  1536 ;; This function is called by:
  1537 ;;		_estado
  1538 ;; This function uses a non-reentrant model
  1539 ;;
  1540                           
  1541                           	psect	text5
  1542   001226                     __ptext5:
  1543                           	callstack 0
  1544   001226                     _EEPROM_Read:
  1545                           	callstack 24
  1546                           
  1547                           ;incstack = 0
  1548                           ;EEPROM_Read@dir stored from wreg
  1549   001226  6E0D               	movwf	EEPROM_Read@dir^0,c
  1550   001228                     
  1551                           ;../EEPROM_RW.X/eeprom.c: 20: unsigned char EEPROM_Read(unsigned char dir);../EEPROM_RW.
      +                          X/eeprom.c: 21: {;../EEPROM_RW.X/eeprom.c: 22:     EEADR = dir;
  1552   001228  C00D  FFA9         	movff	EEPROM_Read@dir,4009	;volatile
  1553   00122C                     
  1554                           ;../EEPROM_RW.X/eeprom.c: 23:     EECON1bits.EEPGD = 0;
  1555   00122C  9EA6               	bcf	166,7,c	;volsfr
  1556   00122E                     
  1557                           ;../EEPROM_RW.X/eeprom.c: 24:     EECON1bits.CFGS = 0;
  1558   00122E  9CA6               	bcf	166,6,c	;volsfr
  1559   001230                     
  1560                           ;../EEPROM_RW.X/eeprom.c: 25:     EECON1bits.RD = 1;
  1561   001230  80A6               	bsf	166,0,c	;volsfr
  1562   001232                     
  1563                           ;../EEPROM_RW.X/eeprom.c: 26:     return EEDATA;
  1564   001232  50A8               	movf	168,w,c	;volatile
  1565   001234  0012               	return		;funcret
  1566   001236                     __end_of_EEPROM_Read:
  1567                           	callstack 0
  1568                           
  1569 ;; *************** function _detectar *****************
  1570 ;; Defined at:
  1571 ;;		line 85 in file "ASCENSOR.c"
  1572 ;; Parameters:    Size  Location     Type
  1573 ;;		None
  1574 ;; Auto vars:     Size  Location     Type
  1575 ;;		None
  1576 ;; Return value:  Size  Location     Type
  1577 ;;                  1    wreg      void 
  1578 ;; Registers used:
  1579 ;;		wreg, status,2
  1580 ;; Tracked objects:
  1581 ;;		On entry : 0/0
  1582 ;;		On exit  : 0/0
  1583 ;;		Unchanged: 0/0
  1584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1585 ;;      Params:         0       0       0       0       0       0       0       0       0
  1586 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1587 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1588 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1589 ;;Total ram usage:        0 bytes
  1590 ;; Hardware stack levels used: 1
  1591 ;; Hardware stack levels required when called: 5
  1592 ;; This function calls:
  1593 ;;		Nothing
  1594 ;; This function is called by:
  1595 ;;		_main
  1596 ;; This function uses a non-reentrant model
  1597 ;;
  1598                           
  1599                           	psect	text6
  1600   000ECC                     __ptext6:
  1601                           	callstack 0
  1602   000ECC                     _detectar:
  1603                           	callstack 25
  1604   000ECC                     
  1605                           ;ASCENSOR.c: 86:  if(PORTCbits.RC1==0 && PORTCbits.RC2==1){
  1606   000ECC  B282               	btfsc	130,1,c	;volatile
  1607   000ECE  EF6B  F007         	goto	u171
  1608   000ED2  EF6D  F007         	goto	u170
  1609   000ED6                     u171:
  1610   000ED6  EF7B  F007         	goto	l116
  1611   000EDA                     u170:
  1612   000EDA  A482               	btfss	130,2,c	;volatile
  1613   000EDC  EF72  F007         	goto	u181
  1614   000EE0  EF74  F007         	goto	u180
  1615   000EE4                     u181:
  1616   000EE4  EF7B  F007         	goto	l116
  1617   000EE8                     u180:
  1618   000EE8                     
  1619                           ;ASCENSOR.c: 87:   METAL=1;
  1620   000EE8  0E01               	movlw	1
  1621   000EEA  6E2E               	movwf	_METAL^0,c
  1622                           
  1623                           ;ASCENSOR.c: 88:   TMR0L= 250;
  1624   000EEC  0EFA               	movlw	250
  1625   000EEE  6ED6               	movwf	214,c	;volatile
  1626   000EF0                     
  1627                           ;ASCENSOR.c: 89:         T0CONbits.TMR0ON = 1;
  1628   000EF0  8ED5               	bsf	213,7,c	;volatile
  1629                           
  1630                           ;ASCENSOR.c: 90:  }
  1631   000EF2  EFA5  F007         	goto	l121
  1632   000EF6                     l116:
  1633   000EF6  A282               	btfss	130,1,c	;volatile
  1634   000EF8  EF80  F007         	goto	u191
  1635   000EFC  EF82  F007         	goto	u190
  1636   000F00                     u191:
  1637   000F00  EF90  F007         	goto	l118
  1638   000F04                     u190:
  1639   000F04  B482               	btfsc	130,2,c	;volatile
  1640   000F06  EF87  F007         	goto	u201
  1641   000F0A  EF89  F007         	goto	u200
  1642   000F0E                     u201:
  1643   000F0E  EF90  F007         	goto	l118
  1644   000F12                     u200:
  1645   000F12                     
  1646                           ;ASCENSOR.c: 92:   BLANCA=1;
  1647   000F12  0E01               	movlw	1
  1648   000F14  6E2D               	movwf	_BLANCA^0,c
  1649                           
  1650                           ;ASCENSOR.c: 93:         TMR0L= 233;
  1651   000F16  0EE9               	movlw	233
  1652   000F18  6ED6               	movwf	214,c	;volatile
  1653   000F1A                     
  1654                           ;ASCENSOR.c: 94:         T0CONbits.TMR0ON = 1;
  1655   000F1A  8ED5               	bsf	213,7,c	;volatile
  1656                           
  1657                           ;ASCENSOR.c: 95:  }
  1658   000F1C  EFA5  F007         	goto	l121
  1659   000F20                     l118:
  1660   000F20  B282               	btfsc	130,1,c	;volatile
  1661   000F22  EF95  F007         	goto	u211
  1662   000F26  EF97  F007         	goto	u210
  1663   000F2A                     u211:
  1664   000F2A  EFA5  F007         	goto	l117
  1665   000F2E                     u210:
  1666   000F2E  B482               	btfsc	130,2,c	;volatile
  1667   000F30  EF9C  F007         	goto	u221
  1668   000F34  EF9E  F007         	goto	u220
  1669   000F38                     u221:
  1670   000F38  EFA5  F007         	goto	l117
  1671   000F3C                     u220:
  1672   000F3C                     
  1673                           ;ASCENSOR.c: 97:   NEGRA=1;
  1674   000F3C  0E01               	movlw	1
  1675   000F3E  6E2C               	movwf	_NEGRA^0,c
  1676                           
  1677                           ;ASCENSOR.c: 98:         TMR0L= 222;
  1678   000F40  0EDE               	movlw	222
  1679   000F42  6ED6               	movwf	214,c	;volatile
  1680   000F44                     
  1681                           ;ASCENSOR.c: 99:         T0CONbits.TMR0ON = 1;
  1682   000F44  8ED5               	bsf	213,7,c	;volatile
  1683   000F46  EFA5  F007         	goto	l121
  1684   000F4A                     l117:
  1685   000F4A                     l121:
  1686   000F4A  0012               	return		;funcret
  1687   000F4C                     __end_of_detectar:
  1688                           	callstack 0
  1689                           
  1690 ;; *************** function _dejar *****************
  1691 ;; Defined at:
  1692 ;;		line 214 in file "ASCENSOR.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;		None
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;		None
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  1    wreg      void 
  1699 ;; Registers used:
  1700 ;;		wreg, status,2
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1706 ;;      Params:         0       0       0       0       0       0       0       0       0
  1707 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1708 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1709 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1710 ;;Total ram usage:        2 bytes
  1711 ;; Hardware stack levels used: 1
  1712 ;; Hardware stack levels required when called: 5
  1713 ;; This function calls:
  1714 ;;		Nothing
  1715 ;; This function is called by:
  1716 ;;		_main
  1717 ;; This function uses a non-reentrant model
  1718 ;;
  1719                           
  1720                           	psect	text7
  1721   000DC0                     __ptext7:
  1722                           	callstack 0
  1723   000DC0                     _dejar:
  1724                           	callstack 25
  1725   000DC0                     
  1726                           ;ASCENSOR.c: 216:     LATDbits.LATD1=1;
  1727   000DC0  828C               	bsf	140,1,c	;volatile
  1728                           
  1729                           ;ASCENSOR.c: 217:     LATDbits.LATD1=0;
  1730   000DC2  928C               	bcf	140,1,c	;volatile
  1731                           
  1732                           ;ASCENSOR.c: 219:     LATDbits.LATD2= 1;
  1733   000DC4  848C               	bsf	140,2,c	;volatile
  1734   000DC6                     l183:
  1735   000DC6  B48C               	btfsc	140,2,c	;volatile
  1736   000DC8  EFE8  F006         	goto	u371
  1737   000DCC  EFEA  F006         	goto	u370
  1738   000DD0                     u371:
  1739   000DD0  EFE3  F006         	goto	l183
  1740   000DD4                     u370:
  1741   000DD4                     
  1742                           ;ASCENSOR.c: 221:     _delay((unsigned long)((500)*(4000000/4000.0)));
  1743   000DD4  0E03               	movlw	3
  1744   000DD6  6E0E               	movwf	(??_dejar+1)^0,c
  1745   000DD8  0E8A               	movlw	138
  1746   000DDA  6E0D               	movwf	??_dejar^0,c
  1747   000DDC  0E56               	movlw	86
  1748   000DDE                     u1187:
  1749   000DDE  2EE8               	decfsz	wreg,f,c
  1750   000DE0  D7FE               	bra	u1187
  1751   000DE2  2E0D               	decfsz	??_dejar^0,f,c
  1752   000DE4  D7FC               	bra	u1187
  1753   000DE6  2E0E               	decfsz	(??_dejar+1)^0,f,c
  1754   000DE8  D7FA               	bra	u1187
  1755   000DEA                     
  1756                           ;ASCENSOR.c: 222:     LATCbits.LC0=1;
  1757   000DEA  808B               	bsf	139,0,c	;volatile
  1758                           
  1759                           ;ASCENSOR.c: 223:     _delay((unsigned long)((250)*(4000000/4000.0)));
  1760   000DEC  0E02               	movlw	2
  1761   000DEE  6E0E               	movwf	(??_dejar+1)^0,c
  1762   000DF0  0E45               	movlw	69
  1763   000DF2  6E0D               	movwf	??_dejar^0,c
  1764   000DF4  0EAA               	movlw	170
  1765   000DF6                     u1197:
  1766   000DF6  2EE8               	decfsz	wreg,f,c
  1767   000DF8  D7FE               	bra	u1197
  1768   000DFA  2E0D               	decfsz	??_dejar^0,f,c
  1769   000DFC  D7FC               	bra	u1197
  1770   000DFE  2E0E               	decfsz	(??_dejar+1)^0,f,c
  1771   000E00  D7FA               	bra	u1197
  1772   000E02                     
  1773                           ;ASCENSOR.c: 224:     TMR0L= 253;
  1774   000E02  0EFD               	movlw	253
  1775   000E04  6ED6               	movwf	214,c	;volatile
  1776   000E06                     
  1777                           ;ASCENSOR.c: 225:     T0CONbits.TMR0ON = 1;
  1778   000E06  8ED5               	bsf	213,7,c	;volatile
  1779   000E08                     
  1780                           ;ASCENSOR.c: 226:     LATDbits.LATD3=1;
  1781   000E08  868C               	bsf	140,3,c	;volatile
  1782   000E0A                     l186:
  1783   000E0A  B68C               	btfsc	140,3,c	;volatile
  1784   000E0C  EF0A  F007         	goto	u381
  1785   000E10  EF0C  F007         	goto	u380
  1786   000E14                     u381:
  1787   000E14  EF05  F007         	goto	l186
  1788   000E18                     u380:
  1789   000E18                     
  1790                           ;ASCENSOR.c: 228:     _delay((unsigned long)((500)*(4000000/4000.0)));
  1791   000E18  0E03               	movlw	3
  1792   000E1A  6E0E               	movwf	(??_dejar+1)^0,c
  1793   000E1C  0E8A               	movlw	138
  1794   000E1E  6E0D               	movwf	??_dejar^0,c
  1795   000E20  0E56               	movlw	86
  1796   000E22                     u1207:
  1797   000E22  2EE8               	decfsz	wreg,f,c
  1798   000E24  D7FE               	bra	u1207
  1799   000E26  2E0D               	decfsz	??_dejar^0,f,c
  1800   000E28  D7FC               	bra	u1207
  1801   000E2A  2E0E               	decfsz	(??_dejar+1)^0,f,c
  1802   000E2C  D7FA               	bra	u1207
  1803   000E2E                     
  1804                           ;ASCENSOR.c: 229:     LATCbits.LC0=0;
  1805   000E2E  908B               	bcf	139,0,c	;volatile
  1806                           
  1807                           ;ASCENSOR.c: 230:     _delay((unsigned long)((200)*(4000000/4000.0)));
  1808   000E30  0E02               	movlw	2
  1809   000E32  6E0E               	movwf	(??_dejar+1)^0,c
  1810   000E34  0E04               	movlw	4
  1811   000E36  6E0D               	movwf	??_dejar^0,c
  1812   000E38  0EBA               	movlw	186
  1813   000E3A                     u1217:
  1814   000E3A  2EE8               	decfsz	wreg,f,c
  1815   000E3C  D7FE               	bra	u1217
  1816   000E3E  2E0D               	decfsz	??_dejar^0,f,c
  1817   000E40  D7FC               	bra	u1217
  1818   000E42  2E0E               	decfsz	(??_dejar+1)^0,f,c
  1819   000E44  D7FA               	bra	u1217
  1820   000E46  D000               	nop2	
  1821   000E48  0012               	return		;funcret
  1822   000E4A                     __end_of_dejar:
  1823                           	callstack 0
  1824                           
  1825 ;; *************** function _Modificar *****************
  1826 ;; Defined at:
  1827 ;;		line 197 in file "ASCENSOR.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;		None
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;		None
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  1    wreg      void 
  1834 ;; Registers used:
  1835 ;;		wreg, status,2, status,0, cstack
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1841 ;;      Params:         0       0       0       0       0       0       0       0       0
  1842 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1843 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1844 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1845 ;;Total ram usage:        0 bytes
  1846 ;; Hardware stack levels used: 1
  1847 ;; Hardware stack levels required when called: 8
  1848 ;; This function calls:
  1849 ;;		_Lcd_NoBlink
  1850 ;;		_Lcd_Write_Char
  1851 ;; This function is called by:
  1852 ;;		_main
  1853 ;; This function uses a non-reentrant model
  1854 ;;
  1855                           
  1856                           	psect	text8
  1857   001076                     __ptext8:
  1858                           	callstack 0
  1859   001076                     _Modificar:
  1860                           	callstack 22
  1861   001076                     
  1862                           ;ASCENSOR.c: 198:     if (PORTBbits.RB3==1){
  1863   001076  A681               	btfss	129,3,c	;volatile
  1864   001078  EF40  F008         	goto	u331
  1865   00107C  EF42  F008         	goto	u330
  1866   001080                     u331:
  1867   001080  EF4D  F008         	goto	l172
  1868   001084                     u330:
  1869   001084                     
  1870                           ;ASCENSOR.c: 199:         Lcd_Write_Char(1);
  1871   001084  0E01               	movlw	1
  1872   001086  ECA8  F008         	call	_Lcd_Write_Char
  1873   00108A                     
  1874                           ;ASCENSOR.c: 201:         c++;
  1875   00108A  2A2A               	incf	_c^0,f,c
  1876   00108C                     l173:
  1877   00108C  B681               	btfsc	129,3,c	;volatile
  1878   00108E  EF4B  F008         	goto	u341
  1879   001092  EF4D  F008         	goto	u340
  1880   001096                     u341:
  1881   001096  EF46  F008         	goto	l173
  1882   00109A                     u340:
  1883   00109A                     l172:
  1884                           
  1885                           ;ASCENSOR.c: 204:     if (PORTBbits.RB2==1){
  1886   00109A  A481               	btfss	129,2,c	;volatile
  1887   00109C  EF52  F008         	goto	u351
  1888   0010A0  EF54  F008         	goto	u350
  1889   0010A4                     u351:
  1890   0010A4  EF5F  F008         	goto	l1322
  1891   0010A8                     u350:
  1892   0010A8                     
  1893                           ;ASCENSOR.c: 205:         Lcd_Write_Char(0);
  1894   0010A8  0E00               	movlw	0
  1895   0010AA  ECA8  F008         	call	_Lcd_Write_Char
  1896   0010AE                     
  1897                           ;ASCENSOR.c: 207:         c++;
  1898   0010AE  2A2A               	incf	_c^0,f,c
  1899   0010B0                     l177:
  1900   0010B0  B481               	btfsc	129,2,c	;volatile
  1901   0010B2  EF5D  F008         	goto	u361
  1902   0010B6  EF5F  F008         	goto	u360
  1903   0010BA                     u361:
  1904   0010BA  EF58  F008         	goto	l177
  1905   0010BE                     u360:
  1906   0010BE                     l1322:
  1907                           
  1908                           ;ASCENSOR.c: 210:     Lcd_NoBlink();
  1909   0010BE  EC1B  F009         	call	_Lcd_NoBlink	;wreg free
  1910   0010C2  0012               	return		;funcret
  1911   0010C4                     __end_of_Modificar:
  1912                           	callstack 0
  1913                           
  1914 ;; *************** function _Lcd_NoBlink *****************
  1915 ;; Defined at:
  1916 ;;		line 129 in file "lcd.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;		None
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;		None
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      void 
  1923 ;; Registers used:
  1924 ;;		wreg, status,2, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1930 ;;      Params:         0       0       0       0       0       0       0       0       0
  1931 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1932 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1933 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1934 ;;Total ram usage:        0 bytes
  1935 ;; Hardware stack levels used: 1
  1936 ;; Hardware stack levels required when called: 7
  1937 ;; This function calls:
  1938 ;;		_Lcd_Cmd
  1939 ;; This function is called by:
  1940 ;;		_Modificar
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           	psect	text9
  1945   001236                     __ptext9:
  1946                           	callstack 0
  1947   001236                     _Lcd_NoBlink:
  1948                           	callstack 22
  1949   001236                     
  1950                           ;lcd.c: 131:     Lcd_Cmd(0x00);
  1951   001236  0E00               	movlw	0
  1952   001238  ECC4  F008         	call	_Lcd_Cmd
  1953                           
  1954                           ;lcd.c: 132:     Lcd_Cmd(0x0C);
  1955   00123C  0E0C               	movlw	12
  1956   00123E  ECC4  F008         	call	_Lcd_Cmd
  1957   001242  0012               	return		;funcret
  1958   001244                     __end_of_Lcd_NoBlink:
  1959                           	callstack 0
  1960                           
  1961 ;; *************** function _Lcd_Write_String *****************
  1962 ;; Defined at:
  1963 ;;		line 104 in file "lcd.c"
  1964 ;; Parameters:    Size  Location     Type
  1965 ;;  a               1   16[COMRAM] PTR const unsigned char 
  1966 ;;		 -> STR_3(6), STR_2(8), STR_1(7), 
  1967 ;; Auto vars:     Size  Location     Type
  1968 ;;  i               2   18[COMRAM] int 
  1969 ;; Return value:  Size  Location     Type
  1970 ;;                  1    wreg      void 
  1971 ;; Registers used:
  1972 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1973 ;; Tracked objects:
  1974 ;;		On entry : 0/0
  1975 ;;		On exit  : 0/0
  1976 ;;		Unchanged: 0/0
  1977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1978 ;;      Params:         1       0       0       0       0       0       0       0       0
  1979 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1980 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1981 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1982 ;;Total ram usage:        4 bytes
  1983 ;; Hardware stack levels used: 1
  1984 ;; Hardware stack levels required when called: 7
  1985 ;; This function calls:
  1986 ;;		_Lcd_Write_Char
  1987 ;; This function is called by:
  1988 ;;		_main
  1989 ;; This function uses a non-reentrant model
  1990 ;;
  1991                           
  1992                           	psect	text10
  1993   0010C4                     __ptext10:
  1994                           	callstack 0
  1995   0010C4                     _Lcd_Write_String:
  1996                           	callstack 23
  1997   0010C4                     
  1998                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
  1999   0010C4  0E00               	movlw	0
  2000   0010C6  6E14               	movwf	(Lcd_Write_String@i+1)^0,c
  2001   0010C8  0E00               	movlw	0
  2002   0010CA  6E13               	movwf	Lcd_Write_String@i^0,c
  2003   0010CC  EF75  F008         	goto	l1876
  2004   0010D0                     l1872:
  2005                           
  2006                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
  2007   0010D0  5011               	movf	Lcd_Write_String@a^0,w,c
  2008   0010D2  2413               	addwf	Lcd_Write_String@i^0,w,c
  2009   0010D4  6E12               	movwf	??_Lcd_Write_String^0,c
  2010   0010D6  C012  FFF6         	movff	??_Lcd_Write_String,tblptrl
  2011   0010DA                     	if	1	;There is more than 1 active tblptr byte
  2012   0010DA  0E08               	movlw	high __smallconst
  2013   0010DC  6EF7               	movwf	tblptrh,c
  2014   0010DE                     	endif
  2015   0010DE                     	if	0	;tblptru may be non-zero
  2016   0010DE                     	endif
  2017   0010DE                     	if	0	;tblptru may be non-zero
  2018   0010DE                     	endif
  2019   0010DE  0008               	tblrd		*
  2020   0010E0  50F5               	movf	tablat,w,c
  2021   0010E2  ECA8  F008         	call	_Lcd_Write_Char
  2022   0010E6  4A13               	infsnz	Lcd_Write_String@i^0,f,c
  2023   0010E8  2A14               	incf	(Lcd_Write_String@i+1)^0,f,c
  2024   0010EA                     l1876:
  2025   0010EA  5011               	movf	Lcd_Write_String@a^0,w,c
  2026   0010EC  2413               	addwf	Lcd_Write_String@i^0,w,c
  2027   0010EE  6E12               	movwf	??_Lcd_Write_String^0,c
  2028   0010F0  C012  FFF6         	movff	??_Lcd_Write_String,tblptrl
  2029   0010F4                     	if	1	;There is more than 1 active tblptr byte
  2030   0010F4  0E08               	movlw	high __smallconst
  2031   0010F6  6EF7               	movwf	tblptrh,c
  2032   0010F8                     	endif
  2033   0010F8                     	if	0	;tblptru may be non-zero
  2034   0010F8                     	endif
  2035   0010F8                     	if	0	;tblptru may be non-zero
  2036   0010F8                     	endif
  2037   0010F8  0008               	tblrd		*
  2038   0010FA  50F5               	movf	tablat,w,c
  2039   0010FC  0900               	iorlw	0
  2040   0010FE  A4D8               	btfss	status,2,c
  2041   001100  EF84  F008         	goto	u951
  2042   001104  EF86  F008         	goto	u950
  2043   001108                     u951:
  2044   001108  EF68  F008         	goto	l1872
  2045   00110C                     u950:
  2046   00110C  0012               	return		;funcret
  2047   00110E                     __end_of_Lcd_Write_String:
  2048                           	callstack 0
  2049                           
  2050 ;; *************** function _Lcd_Init *****************
  2051 ;; Defined at:
  2052 ;;		line 63 in file "lcd.c"
  2053 ;; Parameters:    Size  Location     Type
  2054 ;;		None
  2055 ;; Auto vars:     Size  Location     Type
  2056 ;;		None
  2057 ;; Return value:  Size  Location     Type
  2058 ;;                  1    wreg      void 
  2059 ;; Registers used:
  2060 ;;		wreg, status,2, cstack
  2061 ;; Tracked objects:
  2062 ;;		On entry : 0/0
  2063 ;;		On exit  : 0/0
  2064 ;;		Unchanged: 0/0
  2065 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2066 ;;      Params:         0       0       0       0       0       0       0       0       0
  2067 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2068 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2069 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2070 ;;Total ram usage:        1 bytes
  2071 ;; Hardware stack levels used: 1
  2072 ;; Hardware stack levels required when called: 8
  2073 ;; This function calls:
  2074 ;;		_Lcd_Clear
  2075 ;;		_Lcd_Cmd
  2076 ;;		_Lcd_Port
  2077 ;; This function is called by:
  2078 ;;		_main
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           	psect	text11
  2083   000E4A                     __ptext11:
  2084                           	callstack 0
  2085   000E4A                     _Lcd_Init:
  2086                           	callstack 22
  2087   000E4A                     
  2088                           ;lcd.c: 65:  TRISDbits.TRISD2 = 0;
  2089   000E4A  9495               	bcf	149,2,c	;volatile
  2090                           
  2091                           ;lcd.c: 66:  TRISDbits.TRISD3 = 0;
  2092   000E4C  9695               	bcf	149,3,c	;volatile
  2093                           
  2094                           ;lcd.c: 67:  TRISDbits.TRISD4 = 0;
  2095   000E4E  9895               	bcf	149,4,c	;volatile
  2096                           
  2097                           ;lcd.c: 68:  TRISDbits.TRISD5 = 0;
  2098   000E50  9A95               	bcf	149,5,c	;volatile
  2099                           
  2100                           ;lcd.c: 69:  TRISDbits.TRISD6 = 0;
  2101   000E52  9C95               	bcf	149,6,c	;volatile
  2102                           
  2103                           ;lcd.c: 70:  TRISDbits.TRISD7 = 0;
  2104   000E54  9E95               	bcf	149,7,c	;volatile
  2105   000E56                     
  2106                           ;lcd.c: 71:     Lcd_Port(0x00);
  2107   000E56  0E00               	movlw	0
  2108   000E58  ECDF  F007         	call	_Lcd_Port
  2109   000E5C                     
  2110                           ;lcd.c: 72:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2111   000E5C  0E1A               	movlw	26
  2112   000E5E  6E10               	movwf	??_Lcd_Init^0,c
  2113   000E60  0EF8               	movlw	248
  2114   000E62                     u1227:
  2115   000E62  2EE8               	decfsz	wreg,f,c
  2116   000E64  D7FE               	bra	u1227
  2117   000E66  2E10               	decfsz	??_Lcd_Init^0,f,c
  2118   000E68  D7FC               	bra	u1227
  2119   000E6A  D000               	nop2	
  2120   000E6C                     
  2121                           ;lcd.c: 73:     Lcd_Cmd(0x03);
  2122   000E6C  0E03               	movlw	3
  2123   000E6E  ECC4  F008         	call	_Lcd_Cmd
  2124   000E72                     
  2125                           ;lcd.c: 74:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2126   000E72  0E07               	movlw	7
  2127   000E74  6E10               	movwf	??_Lcd_Init^0,c
  2128   000E76  0E7D               	movlw	125
  2129   000E78                     u1237:
  2130   000E78  2EE8               	decfsz	wreg,f,c
  2131   000E7A  D7FE               	bra	u1237
  2132   000E7C  2E10               	decfsz	??_Lcd_Init^0,f,c
  2133   000E7E  D7FC               	bra	u1237
  2134   000E80  0000               	nop	
  2135   000E82                     
  2136                           ;lcd.c: 75:     Lcd_Cmd(0x03);
  2137   000E82  0E03               	movlw	3
  2138   000E84  ECC4  F008         	call	_Lcd_Cmd
  2139   000E88                     
  2140                           ;lcd.c: 76:     _delay((unsigned long)((11)*(4000000/4000.0)));
  2141   000E88  0E0F               	movlw	15
  2142   000E8A  6E10               	movwf	??_Lcd_Init^0,c
  2143   000E8C  0E48               	movlw	72
  2144   000E8E                     u1247:
  2145   000E8E  2EE8               	decfsz	wreg,f,c
  2146   000E90  D7FE               	bra	u1247
  2147   000E92  2E10               	decfsz	??_Lcd_Init^0,f,c
  2148   000E94  D7FC               	bra	u1247
  2149   000E96                     
  2150                           ;lcd.c: 77:     Lcd_Cmd(0x03);
  2151   000E96  0E03               	movlw	3
  2152   000E98  ECC4  F008         	call	_Lcd_Cmd
  2153   000E9C                     
  2154                           ;lcd.c: 78:     Lcd_Cmd(0x02);
  2155   000E9C  0E02               	movlw	2
  2156   000E9E  ECC4  F008         	call	_Lcd_Cmd
  2157   000EA2                     
  2158                           ;lcd.c: 79:     Lcd_Cmd(0x02);
  2159   000EA2  0E02               	movlw	2
  2160   000EA4  ECC4  F008         	call	_Lcd_Cmd
  2161   000EA8                     
  2162                           ;lcd.c: 80:     Lcd_Cmd(0x08);
  2163   000EA8  0E08               	movlw	8
  2164   000EAA  ECC4  F008         	call	_Lcd_Cmd
  2165   000EAE                     
  2166                           ;lcd.c: 81:     Lcd_Cmd(0x00);
  2167   000EAE  0E00               	movlw	0
  2168   000EB0  ECC4  F008         	call	_Lcd_Cmd
  2169   000EB4                     
  2170                           ;lcd.c: 82:     Lcd_Cmd(0x0C);
  2171   000EB4  0E0C               	movlw	12
  2172   000EB6  ECC4  F008         	call	_Lcd_Cmd
  2173   000EBA                     
  2174                           ;lcd.c: 83:     Lcd_Cmd(0x00);
  2175   000EBA  0E00               	movlw	0
  2176   000EBC  ECC4  F008         	call	_Lcd_Cmd
  2177   000EC0                     
  2178                           ;lcd.c: 84:     Lcd_Cmd(0x06);
  2179   000EC0  0E06               	movlw	6
  2180   000EC2  ECC4  F008         	call	_Lcd_Cmd
  2181   000EC6                     
  2182                           ;lcd.c: 85:     Lcd_Clear();
  2183   000EC6  EC22  F009         	call	_Lcd_Clear	;wreg free
  2184   000ECA  0012               	return		;funcret
  2185   000ECC                     __end_of_Lcd_Init:
  2186                           	callstack 0
  2187                           
  2188 ;; *************** function _Lcd_Clear *****************
  2189 ;; Defined at:
  2190 ;;		line 20 in file "lcd.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;		None
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;		None
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      void 
  2197 ;; Registers used:
  2198 ;;		wreg, status,2, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2204 ;;      Params:         0       0       0       0       0       0       0       0       0
  2205 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2206 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2207 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2208 ;;Total ram usage:        0 bytes
  2209 ;; Hardware stack levels used: 1
  2210 ;; Hardware stack levels required when called: 7
  2211 ;; This function calls:
  2212 ;;		_Lcd_Cmd
  2213 ;; This function is called by:
  2214 ;;		_main
  2215 ;;		_Lcd_Init
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218                           
  2219                           	psect	text12
  2220   001244                     __ptext12:
  2221                           	callstack 0
  2222   001244                     _Lcd_Clear:
  2223                           	callstack 22
  2224   001244                     
  2225                           ;lcd.c: 22:     Lcd_Cmd(0);
  2226   001244  0E00               	movlw	0
  2227   001246  ECC4  F008         	call	_Lcd_Cmd
  2228                           
  2229                           ;lcd.c: 23:     Lcd_Cmd(1);
  2230   00124A  0E01               	movlw	1
  2231   00124C  ECC4  F008         	call	_Lcd_Cmd
  2232   001250  0012               	return		;funcret
  2233   001252                     __end_of_Lcd_Clear:
  2234                           	callstack 0
  2235                           
  2236 ;; *************** function _Lcd_CGRAM_Init *****************
  2237 ;; Defined at:
  2238 ;;		line 175 in file "lcd.c"
  2239 ;; Parameters:    Size  Location     Type
  2240 ;;		None
  2241 ;; Auto vars:     Size  Location     Type
  2242 ;;		None
  2243 ;; Return value:  Size  Location     Type
  2244 ;;                  1    wreg      void 
  2245 ;; Registers used:
  2246 ;;		wreg, status,2, cstack
  2247 ;; Tracked objects:
  2248 ;;		On entry : 0/0
  2249 ;;		On exit  : 0/0
  2250 ;;		Unchanged: 0/0
  2251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2252 ;;      Params:         0       0       0       0       0       0       0       0       0
  2253 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2254 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2255 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2256 ;;Total ram usage:        0 bytes
  2257 ;; Hardware stack levels used: 1
  2258 ;; Hardware stack levels required when called: 7
  2259 ;; This function calls:
  2260 ;;		_Lcd_Cmd
  2261 ;; This function is called by:
  2262 ;;		_main
  2263 ;; This function uses a non-reentrant model
  2264 ;;
  2265                           
  2266                           	psect	text13
  2267   001252                     __ptext13:
  2268                           	callstack 0
  2269   001252                     _Lcd_CGRAM_Init:
  2270                           	callstack 23
  2271   001252                     
  2272                           ;lcd.c: 177:     Lcd_Cmd(0x04);
  2273   001252  0E04               	movlw	4
  2274   001254  ECC4  F008         	call	_Lcd_Cmd
  2275                           
  2276                           ;lcd.c: 178:     Lcd_Cmd(0x00);
  2277   001258  0E00               	movlw	0
  2278   00125A  ECC4  F008         	call	_Lcd_Cmd
  2279   00125E  0012               	return		;funcret
  2280   001260                     __end_of_Lcd_CGRAM_Init:
  2281                           	callstack 0
  2282                           
  2283 ;; *************** function _Lcd_CGRAM_CreateChar *****************
  2284 ;; Defined at:
  2285 ;;		line 136 in file "lcd.c"
  2286 ;; Parameters:    Size  Location     Type
  2287 ;;  add             1    wreg     unsigned char 
  2288 ;;  chardata        1   16[COMRAM] PTR const unsigned char 
  2289 ;;		 -> figura_2(8), figura_1(8), 
  2290 ;; Auto vars:     Size  Location     Type
  2291 ;;  add             1   18[COMRAM] unsigned char 
  2292 ;;  i               1   26[COMRAM] unsigned char 
  2293 ;;  i               1   25[COMRAM] unsigned char 
  2294 ;;  i               1   24[COMRAM] unsigned char 
  2295 ;;  i               1   23[COMRAM] unsigned char 
  2296 ;;  i               1   22[COMRAM] unsigned char 
  2297 ;;  i               1   21[COMRAM] unsigned char 
  2298 ;;  i               1   20[COMRAM] unsigned char 
  2299 ;;  i               1   19[COMRAM] unsigned char 
  2300 ;; Return value:  Size  Location     Type
  2301 ;;                  1    wreg      void 
  2302 ;; Registers used:
  2303 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2304 ;; Tracked objects:
  2305 ;;		On entry : 0/0
  2306 ;;		On exit  : 0/0
  2307 ;;		Unchanged: 0/0
  2308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2309 ;;      Params:         1       0       0       0       0       0       0       0       0
  2310 ;;      Locals:         9       0       0       0       0       0       0       0       0
  2311 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2312 ;;      Totals:        11       0       0       0       0       0       0       0       0
  2313 ;;Total ram usage:       11 bytes
  2314 ;; Hardware stack levels used: 1
  2315 ;; Hardware stack levels required when called: 7
  2316 ;; This function calls:
  2317 ;;		_Lcd_Write_Char
  2318 ;; This function is called by:
  2319 ;;		_main
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           	psect	text14
  2324   000828                     __ptext14:
  2325                           	callstack 0
  2326   000828                     _Lcd_CGRAM_CreateChar:
  2327                           	callstack 23
  2328                           
  2329                           ;incstack = 0
  2330                           ;Lcd_CGRAM_CreateChar@add stored from wreg
  2331   000828  6E13               	movwf	Lcd_CGRAM_CreateChar@add^0,c
  2332   00082A                     
  2333                           ;lcd.c: 136: void Lcd_CGRAM_CreateChar(char add, const char* chardata);lcd.c: 137: {;lcd
      +                          .c: 138:     switch(add)
  2334   00082A  EFE4  F004         	goto	l1868
  2335   00082E                     l281:
  2336                           
  2337                           ;lcd.c: 141:             for(char i=0; i<=7; i++)
  2338   00082E  6A14               	clrf	Lcd_CGRAM_CreateChar@i^0,c
  2339   000830                     l1776:
  2340                           
  2341                           ;lcd.c: 142:                 Lcd_Write_Char(chardata[i]);
  2342   000830  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2343   000832  2414               	addwf	Lcd_CGRAM_CreateChar@i^0,w,c
  2344   000834  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2345   000836  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2346   00083A                     	if	1	;There is more than 1 active tblptr byte
  2347   00083A  0E08               	movlw	high __smallconst
  2348   00083C  6EF7               	movwf	tblptrh,c
  2349   00083E                     	endif
  2350   00083E                     	if	0	;tblptru may be non-zero
  2351   00083E                     	endif
  2352   00083E                     	if	0	;tblptru may be non-zero
  2353   00083E                     	endif
  2354   00083E  0008               	tblrd		*
  2355   000840  50F5               	movf	tablat,w,c
  2356   000842  ECA8  F008         	call	_Lcd_Write_Char
  2357   000846  2A14               	incf	Lcd_CGRAM_CreateChar@i^0,f,c
  2358   000848  0E07               	movlw	7
  2359   00084A  6414               	cpfsgt	Lcd_CGRAM_CreateChar@i^0,c
  2360   00084C  EF2A  F004         	goto	u871
  2361   000850  EF2C  F004         	goto	u870
  2362   000854                     u871:
  2363   000854  EF18  F004         	goto	l1776
  2364   000858                     u870:
  2365   000858  EF07  F005         	goto	l306
  2366   00085C                     l1782:
  2367                           
  2368                           ;lcd.c: 145:             for(char i=8; i<=15; i++)
  2369   00085C  0E08               	movlw	8
  2370   00085E  6E15               	movwf	Lcd_CGRAM_CreateChar@i_871^0,c
  2371   000860                     l1788:
  2372                           
  2373                           ;lcd.c: 146:                 Lcd_Write_Char(chardata[i-8]);
  2374   000860  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2375   000862  2415               	addwf	Lcd_CGRAM_CreateChar@i_871^0,w,c
  2376   000864  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2377   000866  0EF8               	movlw	-8
  2378   000868  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2379   00086A  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2380   00086E                     	if	1	;There is more than 1 active tblptr byte
  2381   00086E  0E08               	movlw	high __smallconst
  2382   000870  6EF7               	movwf	tblptrh,c
  2383   000872                     	endif
  2384   000872                     	if	0	;tblptru may be non-zero
  2385   000872                     	endif
  2386   000872                     	if	0	;tblptru may be non-zero
  2387   000872                     	endif
  2388   000872  0008               	tblrd		*
  2389   000874  50F5               	movf	tablat,w,c
  2390   000876  ECA8  F008         	call	_Lcd_Write_Char
  2391   00087A  2A15               	incf	Lcd_CGRAM_CreateChar@i_871^0,f,c
  2392   00087C  0E0F               	movlw	15
  2393   00087E  6415               	cpfsgt	Lcd_CGRAM_CreateChar@i_871^0,c
  2394   000880  EF44  F004         	goto	u881
  2395   000884  EF46  F004         	goto	u880
  2396   000888                     u881:
  2397   000888  EF30  F004         	goto	l1788
  2398   00088C                     u880:
  2399   00088C  EF07  F005         	goto	l306
  2400   000890                     l1794:
  2401                           
  2402                           ;lcd.c: 149:             for(char i=16; i<=23; i++)
  2403   000890  0E10               	movlw	16
  2404   000892  6E16               	movwf	Lcd_CGRAM_CreateChar@i_872^0,c
  2405   000894                     l1800:
  2406                           
  2407                           ;lcd.c: 150:                 Lcd_Write_Char(chardata[i-16]);
  2408   000894  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2409   000896  2416               	addwf	Lcd_CGRAM_CreateChar@i_872^0,w,c
  2410   000898  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2411   00089A  0EF0               	movlw	-16
  2412   00089C  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2413   00089E  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2414   0008A2                     	if	1	;There is more than 1 active tblptr byte
  2415   0008A2  0E08               	movlw	high __smallconst
  2416   0008A4  6EF7               	movwf	tblptrh,c
  2417   0008A6                     	endif
  2418   0008A6                     	if	0	;tblptru may be non-zero
  2419   0008A6                     	endif
  2420   0008A6                     	if	0	;tblptru may be non-zero
  2421   0008A6                     	endif
  2422   0008A6  0008               	tblrd		*
  2423   0008A8  50F5               	movf	tablat,w,c
  2424   0008AA  ECA8  F008         	call	_Lcd_Write_Char
  2425   0008AE  2A16               	incf	Lcd_CGRAM_CreateChar@i_872^0,f,c
  2426   0008B0  0E17               	movlw	23
  2427   0008B2  6416               	cpfsgt	Lcd_CGRAM_CreateChar@i_872^0,c
  2428   0008B4  EF5E  F004         	goto	u891
  2429   0008B8  EF60  F004         	goto	u890
  2430   0008BC                     u891:
  2431   0008BC  EF4A  F004         	goto	l1800
  2432   0008C0                     u890:
  2433   0008C0  EF07  F005         	goto	l306
  2434   0008C4                     l1806:
  2435                           
  2436                           ;lcd.c: 153:             for(char i=24; i<=31; i++)
  2437   0008C4  0E18               	movlw	24
  2438   0008C6  6E17               	movwf	Lcd_CGRAM_CreateChar@i_873^0,c
  2439   0008C8                     l1812:
  2440                           
  2441                           ;lcd.c: 154:                 Lcd_Write_Char(chardata[i-24]);
  2442   0008C8  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2443   0008CA  2417               	addwf	Lcd_CGRAM_CreateChar@i_873^0,w,c
  2444   0008CC  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2445   0008CE  0EE8               	movlw	-24
  2446   0008D0  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2447   0008D2  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2448   0008D6                     	if	1	;There is more than 1 active tblptr byte
  2449   0008D6  0E08               	movlw	high __smallconst
  2450   0008D8  6EF7               	movwf	tblptrh,c
  2451   0008DA                     	endif
  2452   0008DA                     	if	0	;tblptru may be non-zero
  2453   0008DA                     	endif
  2454   0008DA                     	if	0	;tblptru may be non-zero
  2455   0008DA                     	endif
  2456   0008DA  0008               	tblrd		*
  2457   0008DC  50F5               	movf	tablat,w,c
  2458   0008DE  ECA8  F008         	call	_Lcd_Write_Char
  2459   0008E2  2A17               	incf	Lcd_CGRAM_CreateChar@i_873^0,f,c
  2460   0008E4  0E1F               	movlw	31
  2461   0008E6  6417               	cpfsgt	Lcd_CGRAM_CreateChar@i_873^0,c
  2462   0008E8  EF78  F004         	goto	u901
  2463   0008EC  EF7A  F004         	goto	u900
  2464   0008F0                     u901:
  2465   0008F0  EF64  F004         	goto	l1812
  2466   0008F4                     u900:
  2467   0008F4  EF07  F005         	goto	l306
  2468   0008F8                     l1818:
  2469                           
  2470                           ;lcd.c: 157:             for(char i=32; i<=39; i++)
  2471   0008F8  0E20               	movlw	32
  2472   0008FA  6E18               	movwf	Lcd_CGRAM_CreateChar@i_874^0,c
  2473   0008FC                     l1824:
  2474                           
  2475                           ;lcd.c: 158:                 Lcd_Write_Char(chardata[i-32]);
  2476   0008FC  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2477   0008FE  2418               	addwf	Lcd_CGRAM_CreateChar@i_874^0,w,c
  2478   000900  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2479   000902  0EE0               	movlw	-32
  2480   000904  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2481   000906  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2482   00090A                     	if	1	;There is more than 1 active tblptr byte
  2483   00090A  0E08               	movlw	high __smallconst
  2484   00090C  6EF7               	movwf	tblptrh,c
  2485   00090E                     	endif
  2486   00090E                     	if	0	;tblptru may be non-zero
  2487   00090E                     	endif
  2488   00090E                     	if	0	;tblptru may be non-zero
  2489   00090E                     	endif
  2490   00090E  0008               	tblrd		*
  2491   000910  50F5               	movf	tablat,w,c
  2492   000912  ECA8  F008         	call	_Lcd_Write_Char
  2493   000916  2A18               	incf	Lcd_CGRAM_CreateChar@i_874^0,f,c
  2494   000918  0E27               	movlw	39
  2495   00091A  6418               	cpfsgt	Lcd_CGRAM_CreateChar@i_874^0,c
  2496   00091C  EF92  F004         	goto	u911
  2497   000920  EF94  F004         	goto	u910
  2498   000924                     u911:
  2499   000924  EF7E  F004         	goto	l1824
  2500   000928                     u910:
  2501   000928  EF07  F005         	goto	l306
  2502   00092C                     l1830:
  2503                           
  2504                           ;lcd.c: 161:             for(char i=40; i<=47; i++)
  2505   00092C  0E28               	movlw	40
  2506   00092E  6E19               	movwf	Lcd_CGRAM_CreateChar@i_875^0,c
  2507   000930                     l1836:
  2508                           
  2509                           ;lcd.c: 162:                 Lcd_Write_Char(chardata[i-40]);
  2510   000930  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2511   000932  2419               	addwf	Lcd_CGRAM_CreateChar@i_875^0,w,c
  2512   000934  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2513   000936  0ED8               	movlw	-40
  2514   000938  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2515   00093A  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2516   00093E                     	if	1	;There is more than 1 active tblptr byte
  2517   00093E  0E08               	movlw	high __smallconst
  2518   000940  6EF7               	movwf	tblptrh,c
  2519   000942                     	endif
  2520   000942                     	if	0	;tblptru may be non-zero
  2521   000942                     	endif
  2522   000942                     	if	0	;tblptru may be non-zero
  2523   000942                     	endif
  2524   000942  0008               	tblrd		*
  2525   000944  50F5               	movf	tablat,w,c
  2526   000946  ECA8  F008         	call	_Lcd_Write_Char
  2527   00094A  2A19               	incf	Lcd_CGRAM_CreateChar@i_875^0,f,c
  2528   00094C  0E2F               	movlw	47
  2529   00094E  6419               	cpfsgt	Lcd_CGRAM_CreateChar@i_875^0,c
  2530   000950  EFAC  F004         	goto	u921
  2531   000954  EFAE  F004         	goto	u920
  2532   000958                     u921:
  2533   000958  EF98  F004         	goto	l1836
  2534   00095C                     u920:
  2535   00095C  EF07  F005         	goto	l306
  2536   000960                     l1842:
  2537                           
  2538                           ;lcd.c: 165:             for(char i=48; i<=55; i++)
  2539   000960  0E30               	movlw	48
  2540   000962  6E1A               	movwf	Lcd_CGRAM_CreateChar@i_876^0,c
  2541   000964                     l1848:
  2542                           
  2543                           ;lcd.c: 166:                 Lcd_Write_Char(chardata[i-48]);
  2544   000964  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2545   000966  241A               	addwf	Lcd_CGRAM_CreateChar@i_876^0,w,c
  2546   000968  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2547   00096A  0ED0               	movlw	-48
  2548   00096C  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2549   00096E  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2550   000972                     	if	1	;There is more than 1 active tblptr byte
  2551   000972  0E08               	movlw	high __smallconst
  2552   000974  6EF7               	movwf	tblptrh,c
  2553   000976                     	endif
  2554   000976                     	if	0	;tblptru may be non-zero
  2555   000976                     	endif
  2556   000976                     	if	0	;tblptru may be non-zero
  2557   000976                     	endif
  2558   000976  0008               	tblrd		*
  2559   000978  50F5               	movf	tablat,w,c
  2560   00097A  ECA8  F008         	call	_Lcd_Write_Char
  2561   00097E  2A1A               	incf	Lcd_CGRAM_CreateChar@i_876^0,f,c
  2562   000980  0E37               	movlw	55
  2563   000982  641A               	cpfsgt	Lcd_CGRAM_CreateChar@i_876^0,c
  2564   000984  EFC6  F004         	goto	u931
  2565   000988  EFC8  F004         	goto	u930
  2566   00098C                     u931:
  2567   00098C  EFB2  F004         	goto	l1848
  2568   000990                     u930:
  2569   000990  EF07  F005         	goto	l306
  2570   000994                     l1854:
  2571                           
  2572                           ;lcd.c: 169:             for(char i=56; i<=63; i++)
  2573   000994  0E38               	movlw	56
  2574   000996  6E1B               	movwf	Lcd_CGRAM_CreateChar@i_877^0,c
  2575   000998                     l1860:
  2576                           
  2577                           ;lcd.c: 170:                 Lcd_Write_Char(chardata[i-56]);
  2578   000998  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2579   00099A  241B               	addwf	Lcd_CGRAM_CreateChar@i_877^0,w,c
  2580   00099C  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2581   00099E  0EC8               	movlw	-56
  2582   0009A0  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2583   0009A2  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2584   0009A6                     	if	1	;There is more than 1 active tblptr byte
  2585   0009A6  0E08               	movlw	high __smallconst
  2586   0009A8  6EF7               	movwf	tblptrh,c
  2587   0009AA                     	endif
  2588   0009AA                     	if	0	;tblptru may be non-zero
  2589   0009AA                     	endif
  2590   0009AA                     	if	0	;tblptru may be non-zero
  2591   0009AA                     	endif
  2592   0009AA  0008               	tblrd		*
  2593   0009AC  50F5               	movf	tablat,w,c
  2594   0009AE  ECA8  F008         	call	_Lcd_Write_Char
  2595   0009B2  2A1B               	incf	Lcd_CGRAM_CreateChar@i_877^0,f,c
  2596   0009B4  0E3F               	movlw	63
  2597   0009B6  641B               	cpfsgt	Lcd_CGRAM_CreateChar@i_877^0,c
  2598   0009B8  EFE0  F004         	goto	u941
  2599   0009BC  EFE2  F004         	goto	u940
  2600   0009C0                     u941:
  2601   0009C0  EFCC  F004         	goto	l1860
  2602   0009C4                     u940:
  2603   0009C4  EF07  F005         	goto	l306
  2604   0009C8                     l1868:
  2605   0009C8  5013               	movf	Lcd_CGRAM_CreateChar@add^0,w,c
  2606                           
  2607                           ; Switch size 1, requested type "simple"
  2608                           ; Number of cases is 8, Range of values is 0 to 7
  2609                           ; switch strategies available:
  2610                           ; Name         Instructions Cycles
  2611                           ; simple_byte           25    13 (average)
  2612                           ;	Chosen strategy is simple_byte
  2613   0009CA  0A00               	xorlw	0	; case 0
  2614   0009CC  B4D8               	btfsc	status,2,c
  2615   0009CE  EF17  F004         	goto	l281
  2616   0009D2  0A01               	xorlw	1	; case 1
  2617   0009D4  B4D8               	btfsc	status,2,c
  2618   0009D6  EF2E  F004         	goto	l1782
  2619   0009DA  0A03               	xorlw	3	; case 2
  2620   0009DC  B4D8               	btfsc	status,2,c
  2621   0009DE  EF48  F004         	goto	l1794
  2622   0009E2  0A01               	xorlw	1	; case 3
  2623   0009E4  B4D8               	btfsc	status,2,c
  2624   0009E6  EF62  F004         	goto	l1806
  2625   0009EA  0A07               	xorlw	7	; case 4
  2626   0009EC  B4D8               	btfsc	status,2,c
  2627   0009EE  EF7C  F004         	goto	l1818
  2628   0009F2  0A01               	xorlw	1	; case 5
  2629   0009F4  B4D8               	btfsc	status,2,c
  2630   0009F6  EF96  F004         	goto	l1830
  2631   0009FA  0A03               	xorlw	3	; case 6
  2632   0009FC  B4D8               	btfsc	status,2,c
  2633   0009FE  EFB0  F004         	goto	l1842
  2634   000A02  0A01               	xorlw	1	; case 7
  2635   000A04  B4D8               	btfsc	status,2,c
  2636   000A06  EFCA  F004         	goto	l1854
  2637   000A0A  EF07  F005         	goto	l306
  2638   000A0E                     l306:
  2639   000A0E  0012               	return		;funcret
  2640   000A10                     __end_of_Lcd_CGRAM_CreateChar:
  2641                           	callstack 0
  2642                           
  2643 ;; *************** function _Lcd_CGRAM_Close *****************
  2644 ;; Defined at:
  2645 ;;		line 181 in file "lcd.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;		None
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;		None
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      void 
  2652 ;; Registers used:
  2653 ;;		wreg, status,2, cstack
  2654 ;; Tracked objects:
  2655 ;;		On entry : 0/0
  2656 ;;		On exit  : 0/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2659 ;;      Params:         0       0       0       0       0       0       0       0       0
  2660 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2661 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2662 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2663 ;;Total ram usage:        0 bytes
  2664 ;; Hardware stack levels used: 1
  2665 ;; Hardware stack levels required when called: 7
  2666 ;; This function calls:
  2667 ;;		_Lcd_Cmd
  2668 ;; This function is called by:
  2669 ;;		_main
  2670 ;; This function uses a non-reentrant model
  2671 ;;
  2672                           
  2673                           	psect	text15
  2674   001260                     __ptext15:
  2675                           	callstack 0
  2676   001260                     _Lcd_CGRAM_Close:
  2677                           	callstack 23
  2678   001260                     
  2679                           ;lcd.c: 183:     Lcd_Cmd(0x00);
  2680   001260  0E00               	movlw	0
  2681   001262  ECC4  F008         	call	_Lcd_Cmd
  2682                           
  2683                           ;lcd.c: 184:     Lcd_Cmd(0x02);
  2684   001266  0E02               	movlw	2
  2685   001268  ECC4  F008         	call	_Lcd_Cmd
  2686   00126C  0012               	return		;funcret
  2687   00126E                     __end_of_Lcd_CGRAM_Close:
  2688                           	callstack 0
  2689                           
  2690 ;; *************** function _Actualizar_Matriz *****************
  2691 ;; Defined at:
  2692 ;;		line 104 in file "ASCENSOR.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;		None
  2695 ;; Auto vars:     Size  Location     Type
  2696 ;;  i               1   22[COMRAM] unsigned char 
  2697 ;;  i               1   21[COMRAM] unsigned char 
  2698 ;;  i               1   20[COMRAM] unsigned char 
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      void 
  2701 ;; Registers used:
  2702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2708 ;;      Params:         0       0       0       0       0       0       0       0       0
  2709 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2710 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2711 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2712 ;;Total ram usage:        3 bytes
  2713 ;; Hardware stack levels used: 1
  2714 ;; Hardware stack levels required when called: 8
  2715 ;; This function calls:
  2716 ;;		_Lcd_Set_Cursor
  2717 ;;		_Lcd_Write_Char
  2718 ;; This function is called by:
  2719 ;;		_main
  2720 ;; This function uses a non-reentrant model
  2721 ;;
  2722                           
  2723                           	psect	text16
  2724   000B36                     __ptext16:
  2725                           	callstack 0
  2726   000B36                     _Actualizar_Matriz:
  2727                           	callstack 22
  2728   000B36                     
  2729                           ;ASCENSOR.c: 105:     Lcd_Set_Cursor(1,12);
  2730   000B36  0E0C               	movlw	12
  2731   000B38  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  2732   000B3A  0E01               	movlw	1
  2733   000B3C  EC0E  F006         	call	_Lcd_Set_Cursor
  2734   000B40                     
  2735                           ;ASCENSOR.c: 106:     for(char i=0;i<=3;i++){
  2736   000B40  6A15               	clrf	Actualizar_Matriz@i^0,c
  2737   000B42                     l1716:
  2738                           
  2739                           ;ASCENSOR.c: 107:         if (Fila1[i]==0){
  2740   000B42  5015               	movf	Actualizar_Matriz@i^0,w,c
  2741   000B44  0F26               	addlw	low _Fila1
  2742   000B46  6ED9               	movwf	fsr2l,c
  2743   000B48  6ADA               	clrf	fsr2h,c
  2744   000B4A  50DF               	movf	indf2,w,c
  2745   000B4C  A4D8               	btfss	status,2,c
  2746   000B4E  EFAB  F005         	goto	u811
  2747   000B52  EFAD  F005         	goto	u810
  2748   000B56                     u811:
  2749   000B56  EFB2  F005         	goto	l1720
  2750   000B5A                     u810:
  2751   000B5A                     
  2752                           ;ASCENSOR.c: 108:             Lcd_Write_Char(0);
  2753   000B5A  0E00               	movlw	0
  2754   000B5C  ECA8  F008         	call	_Lcd_Write_Char
  2755                           
  2756                           ;ASCENSOR.c: 109:         }
  2757   000B60  EFB5  F005         	goto	l1722
  2758   000B64                     l1720:
  2759                           
  2760                           ;ASCENSOR.c: 111:         {;ASCENSOR.c: 112:             Lcd_Write_Char(1);
  2761   000B64  0E01               	movlw	1
  2762   000B66  ECA8  F008         	call	_Lcd_Write_Char
  2763   000B6A                     l1722:
  2764                           
  2765                           ;ASCENSOR.c: 114:     }
  2766   000B6A  2A15               	incf	Actualizar_Matriz@i^0,f,c
  2767   000B6C  0E03               	movlw	3
  2768   000B6E  6415               	cpfsgt	Actualizar_Matriz@i^0,c
  2769   000B70  EFBC  F005         	goto	u821
  2770   000B74  EFBE  F005         	goto	u820
  2771   000B78                     u821:
  2772   000B78  EFA1  F005         	goto	l1716
  2773   000B7C                     u820:
  2774   000B7C                     
  2775                           ;ASCENSOR.c: 115:     Lcd_Set_Cursor(2,12);
  2776   000B7C  0E0C               	movlw	12
  2777   000B7E  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  2778   000B80  0E02               	movlw	2
  2779   000B82  EC0E  F006         	call	_Lcd_Set_Cursor
  2780   000B86                     
  2781                           ;ASCENSOR.c: 116:     for(char i=0;i<=3;i++){
  2782   000B86  6A16               	clrf	Actualizar_Matriz@i_682^0,c
  2783   000B88                     l1734:
  2784                           
  2785                           ;ASCENSOR.c: 117:         if (Fila2[i]==0){
  2786   000B88  5016               	movf	Actualizar_Matriz@i_682^0,w,c
  2787   000B8A  0F22               	addlw	low _Fila2
  2788   000B8C  6ED9               	movwf	fsr2l,c
  2789   000B8E  6ADA               	clrf	fsr2h,c
  2790   000B90  50DF               	movf	indf2,w,c
  2791   000B92  A4D8               	btfss	status,2,c
  2792   000B94  EFCE  F005         	goto	u831
  2793   000B98  EFD0  F005         	goto	u830
  2794   000B9C                     u831:
  2795   000B9C  EFD5  F005         	goto	l1738
  2796   000BA0                     u830:
  2797   000BA0                     
  2798                           ;ASCENSOR.c: 118:             Lcd_Write_Char(0);
  2799   000BA0  0E00               	movlw	0
  2800   000BA2  ECA8  F008         	call	_Lcd_Write_Char
  2801                           
  2802                           ;ASCENSOR.c: 119:         }
  2803   000BA6  EFD8  F005         	goto	l1740
  2804   000BAA                     l1738:
  2805                           
  2806                           ;ASCENSOR.c: 121:         {;ASCENSOR.c: 122:             Lcd_Write_Char(1);
  2807   000BAA  0E01               	movlw	1
  2808   000BAC  ECA8  F008         	call	_Lcd_Write_Char
  2809   000BB0                     l1740:
  2810                           
  2811                           ;ASCENSOR.c: 124:     }
  2812   000BB0  2A16               	incf	Actualizar_Matriz@i_682^0,f,c
  2813   000BB2  0E03               	movlw	3
  2814   000BB4  6416               	cpfsgt	Actualizar_Matriz@i_682^0,c
  2815   000BB6  EFDF  F005         	goto	u841
  2816   000BBA  EFE1  F005         	goto	u840
  2817   000BBE                     u841:
  2818   000BBE  EFC4  F005         	goto	l1734
  2819   000BC2                     u840:
  2820   000BC2                     
  2821                           ;ASCENSOR.c: 125:     Lcd_Set_Cursor(3,12);
  2822   000BC2  0E0C               	movlw	12
  2823   000BC4  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  2824   000BC6  0E03               	movlw	3
  2825   000BC8  EC0E  F006         	call	_Lcd_Set_Cursor
  2826   000BCC                     
  2827                           ;ASCENSOR.c: 126:     for(char i=0;i<=3;i++){
  2828   000BCC  6A17               	clrf	Actualizar_Matriz@i_683^0,c
  2829   000BCE                     l1752:
  2830                           
  2831                           ;ASCENSOR.c: 127:         if (Fila3[i]==0){
  2832   000BCE  5017               	movf	Actualizar_Matriz@i_683^0,w,c
  2833   000BD0  0F1E               	addlw	low _Fila3
  2834   000BD2  6ED9               	movwf	fsr2l,c
  2835   000BD4  6ADA               	clrf	fsr2h,c
  2836   000BD6  50DF               	movf	indf2,w,c
  2837   000BD8  A4D8               	btfss	status,2,c
  2838   000BDA  EFF1  F005         	goto	u851
  2839   000BDE  EFF3  F005         	goto	u850
  2840   000BE2                     u851:
  2841   000BE2  EFF8  F005         	goto	l1756
  2842   000BE6                     u850:
  2843   000BE6                     
  2844                           ;ASCENSOR.c: 128:             Lcd_Write_Char(0);
  2845   000BE6  0E00               	movlw	0
  2846   000BE8  ECA8  F008         	call	_Lcd_Write_Char
  2847                           
  2848                           ;ASCENSOR.c: 129:         }
  2849   000BEC  EFFB  F005         	goto	l1758
  2850   000BF0                     l1756:
  2851                           
  2852                           ;ASCENSOR.c: 131:         {;ASCENSOR.c: 132:             Lcd_Write_Char(1);
  2853   000BF0  0E01               	movlw	1
  2854   000BF2  ECA8  F008         	call	_Lcd_Write_Char
  2855   000BF6                     l1758:
  2856                           
  2857                           ;ASCENSOR.c: 134:     }
  2858   000BF6  2A17               	incf	Actualizar_Matriz@i_683^0,f,c
  2859   000BF8  0E03               	movlw	3
  2860   000BFA  6417               	cpfsgt	Actualizar_Matriz@i_683^0,c
  2861   000BFC  EF02  F006         	goto	u861
  2862   000C00  EF04  F006         	goto	u860
  2863   000C04                     u861:
  2864   000C04  EFE7  F005         	goto	l1752
  2865   000C08                     u860:
  2866   000C08                     
  2867                           ;ASCENSOR.c: 135:     Lcd_Set_Cursor(1,12);
  2868   000C08  0E0C               	movlw	12
  2869   000C0A  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  2870   000C0C  0E01               	movlw	1
  2871   000C0E  EC0E  F006         	call	_Lcd_Set_Cursor
  2872   000C12                     
  2873                           ;ASCENSOR.c: 136:     f=1;
  2874   000C12  0E01               	movlw	1
  2875   000C14  6E2B               	movwf	_f^0,c
  2876   000C16                     
  2877                           ;ASCENSOR.c: 137:     c=12;
  2878   000C16  0E0C               	movlw	12
  2879   000C18  6E2A               	movwf	_c^0,c
  2880   000C1A  0012               	return		;funcret
  2881   000C1C                     __end_of_Actualizar_Matriz:
  2882                           	callstack 0
  2883                           
  2884 ;; *************** function _Lcd_Write_Char *****************
  2885 ;; Defined at:
  2886 ;;		line 88 in file "lcd.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  a               1    wreg     unsigned char 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  a               1   15[COMRAM] unsigned char 
  2891 ;;  y               1   14[COMRAM] unsigned char 
  2892 ;;  temp            1   13[COMRAM] unsigned char 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  1    wreg      void 
  2895 ;; Registers used:
  2896 ;;		wreg, status,2, status,0, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 0/0
  2899 ;;		On exit  : 0/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2902 ;;      Params:         0       0       0       0       0       0       0       0       0
  2903 ;;      Locals:         3       0       0       0       0       0       0       0       0
  2904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2905 ;;      Totals:         3       0       0       0       0       0       0       0       0
  2906 ;;Total ram usage:        3 bytes
  2907 ;; Hardware stack levels used: 1
  2908 ;; Hardware stack levels required when called: 6
  2909 ;; This function calls:
  2910 ;;		_Lcd_Port
  2911 ;; This function is called by:
  2912 ;;		_Actualizar_Matriz
  2913 ;;		_Modificar
  2914 ;;		_main
  2915 ;;		_Lcd_Write_String
  2916 ;;		_Lcd_CGRAM_CreateChar
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           	psect	text17
  2921   001150                     __ptext17:
  2922                           	callstack 0
  2923   001150                     _Lcd_Write_Char:
  2924                           	callstack 23
  2925                           
  2926                           ;incstack = 0
  2927                           ;Lcd_Write_Char@a stored from wreg
  2928   001150  6E10               	movwf	Lcd_Write_Char@a^0,c
  2929   001152                     
  2930                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
  2931   001152  5010               	movf	Lcd_Write_Char@a^0,w,c
  2932   001154  0B0F               	andlw	15
  2933   001156  6E0E               	movwf	Lcd_Write_Char@temp^0,c
  2934                           
  2935                           ;lcd.c: 92:     y = a&0xF0;
  2936   001158  5010               	movf	Lcd_Write_Char@a^0,w,c
  2937   00115A  0BF0               	andlw	240
  2938   00115C  6E0F               	movwf	Lcd_Write_Char@y^0,c
  2939   00115E                     
  2940                           ;lcd.c: 93:     LATEbits.LE0 = 1;
  2941   00115E  808D               	bsf	141,0,c	;volatile
  2942   001160                     
  2943                           ;lcd.c: 94:     Lcd_Port(y>>4);
  2944   001160  380F               	swapf	Lcd_Write_Char@y^0,w,c
  2945   001162  0B0F               	andlw	15
  2946   001164  ECDF  F007         	call	_Lcd_Port
  2947   001168                     
  2948                           ;lcd.c: 95:     LATEbits.LE1 = 1;
  2949   001168  828D               	bsf	141,1,c	;volatile
  2950   00116A                     
  2951                           ;lcd.c: 96:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2952   00116A  0E0D               	movlw	13
  2953   00116C                     u1257:
  2954   00116C  2EE8               	decfsz	wreg,f,c
  2955   00116E  D7FE               	bra	u1257
  2956   001170  0000               	nop	
  2957   001172                     
  2958                           ;lcd.c: 97:     LATEbits.LE1 = 0;
  2959   001172  928D               	bcf	141,1,c	;volatile
  2960   001174                     
  2961                           ;lcd.c: 98:     Lcd_Port(temp);
  2962   001174  500E               	movf	Lcd_Write_Char@temp^0,w,c
  2963   001176  ECDF  F007         	call	_Lcd_Port
  2964   00117A                     
  2965                           ;lcd.c: 99:     LATEbits.LE1 = 1;
  2966   00117A  828D               	bsf	141,1,c	;volatile
  2967   00117C                     
  2968                           ;lcd.c: 100:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  2969   00117C  0E0D               	movlw	13
  2970   00117E                     u1267:
  2971   00117E  2EE8               	decfsz	wreg,f,c
  2972   001180  D7FE               	bra	u1267
  2973   001182  0000               	nop	
  2974   001184                     
  2975                           ;lcd.c: 101:     LATEbits.LE1 = 0;
  2976   001184  928D               	bcf	141,1,c	;volatile
  2977   001186  0012               	return		;funcret
  2978   001188                     __end_of_Lcd_Write_Char:
  2979                           	callstack 0
  2980                           
  2981 ;; *************** function _Lcd_Set_Cursor *****************
  2982 ;; Defined at:
  2983 ;;		line 26 in file "lcd.c"
  2984 ;; Parameters:    Size  Location     Type
  2985 ;;  a               1    wreg     unsigned char 
  2986 ;;  b               1   15[COMRAM] unsigned char 
  2987 ;; Auto vars:     Size  Location     Type
  2988 ;;  a               1   16[COMRAM] unsigned char 
  2989 ;;  temp            1   19[COMRAM] unsigned char 
  2990 ;;  y               1   18[COMRAM] unsigned char 
  2991 ;;  z               1   17[COMRAM] unsigned char 
  2992 ;; Return value:  Size  Location     Type
  2993 ;;                  1    wreg      void 
  2994 ;; Registers used:
  2995 ;;		wreg, status,2, status,0, cstack
  2996 ;; Tracked objects:
  2997 ;;		On entry : 0/0
  2998 ;;		On exit  : 0/0
  2999 ;;		Unchanged: 0/0
  3000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3001 ;;      Params:         1       0       0       0       0       0       0       0       0
  3002 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3003 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3004 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3005 ;;Total ram usage:        5 bytes
  3006 ;; Hardware stack levels used: 1
  3007 ;; Hardware stack levels required when called: 7
  3008 ;; This function calls:
  3009 ;;		_Lcd_Cmd
  3010 ;; This function is called by:
  3011 ;;		_Actualizar_Matriz
  3012 ;;		_main
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           	psect	text18
  3017   000C1C                     __ptext18:
  3018                           	callstack 0
  3019   000C1C                     _Lcd_Set_Cursor:
  3020                           	callstack 23
  3021                           
  3022                           ;incstack = 0
  3023                           ;Lcd_Set_Cursor@a stored from wreg
  3024   000C1C  6E11               	movwf	Lcd_Set_Cursor@a^0,c
  3025   000C1E                     
  3026                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
  3027   000C1E  0411               	decf	Lcd_Set_Cursor@a^0,w,c
  3028   000C20  A4D8               	btfss	status,2,c
  3029   000C22  EF15  F006         	goto	u771
  3030   000C26  EF17  F006         	goto	u770
  3031   000C2A                     u771:
  3032   000C2A  EF28  F006         	goto	l1674
  3033   000C2E                     u770:
  3034   000C2E                     
  3035                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
  3036   000C2E  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  3037   000C30  0F7F               	addlw	127
  3038   000C32  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  3039                           
  3040                           ;lcd.c: 32:         z = temp>>4;
  3041   000C34  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3042   000C36  0B0F               	andlw	15
  3043   000C38  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  3044                           
  3045                           ;lcd.c: 33:         y = temp & 0x0F;
  3046   000C3A  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  3047   000C3C  0B0F               	andlw	15
  3048   000C3E  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  3049   000C40                     
  3050                           ;lcd.c: 34:         Lcd_Cmd(z);
  3051   000C40  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  3052   000C42  ECC4  F008         	call	_Lcd_Cmd
  3053   000C46                     
  3054                           ;lcd.c: 35:         Lcd_Cmd(y);
  3055   000C46  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  3056   000C48  ECC4  F008         	call	_Lcd_Cmd
  3057                           
  3058                           ;lcd.c: 36:     }
  3059   000C4C  EF76  F006         	goto	l253
  3060   000C50                     l1674:
  3061   000C50  0E02               	movlw	2
  3062   000C52  1811               	xorwf	Lcd_Set_Cursor@a^0,w,c
  3063   000C54  A4D8               	btfss	status,2,c
  3064   000C56  EF2F  F006         	goto	u781
  3065   000C5A  EF31  F006         	goto	u780
  3066   000C5E                     u781:
  3067   000C5E  EF42  F006         	goto	l1682
  3068   000C62                     u780:
  3069   000C62                     
  3070                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
  3071   000C62  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  3072   000C64  0FBF               	addlw	191
  3073   000C66  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  3074                           
  3075                           ;lcd.c: 40:         z = temp>>4;
  3076   000C68  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3077   000C6A  0B0F               	andlw	15
  3078   000C6C  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  3079                           
  3080                           ;lcd.c: 41:         y = temp & 0x0F;
  3081   000C6E  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  3082   000C70  0B0F               	andlw	15
  3083   000C72  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  3084   000C74                     
  3085                           ;lcd.c: 42:         Lcd_Cmd(z);
  3086   000C74  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  3087   000C76  ECC4  F008         	call	_Lcd_Cmd
  3088   000C7A                     
  3089                           ;lcd.c: 43:         Lcd_Cmd(y);
  3090   000C7A  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  3091   000C7C  ECC4  F008         	call	_Lcd_Cmd
  3092                           
  3093                           ;lcd.c: 44:     }
  3094   000C80  EF76  F006         	goto	l253
  3095   000C84                     l1682:
  3096   000C84  0E03               	movlw	3
  3097   000C86  1811               	xorwf	Lcd_Set_Cursor@a^0,w,c
  3098   000C88  A4D8               	btfss	status,2,c
  3099   000C8A  EF49  F006         	goto	u791
  3100   000C8E  EF4B  F006         	goto	u790
  3101   000C92                     u791:
  3102   000C92  EF5C  F006         	goto	l1690
  3103   000C96                     u790:
  3104   000C96                     
  3105                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x90 + b - 1;
  3106   000C96  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  3107   000C98  0F8F               	addlw	143
  3108   000C9A  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  3109                           
  3110                           ;lcd.c: 48:         z = temp>>4;
  3111   000C9C  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3112   000C9E  0B0F               	andlw	15
  3113   000CA0  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  3114                           
  3115                           ;lcd.c: 49:         y = temp & 0x0F;
  3116   000CA2  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  3117   000CA4  0B0F               	andlw	15
  3118   000CA6  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  3119   000CA8                     
  3120                           ;lcd.c: 50:         Lcd_Cmd(z);
  3121   000CA8  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  3122   000CAA  ECC4  F008         	call	_Lcd_Cmd
  3123   000CAE                     
  3124                           ;lcd.c: 51:         Lcd_Cmd(y);
  3125   000CAE  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  3126   000CB0  ECC4  F008         	call	_Lcd_Cmd
  3127                           
  3128                           ;lcd.c: 52:     }
  3129   000CB4  EF76  F006         	goto	l253
  3130   000CB8                     l1690:
  3131   000CB8  0E04               	movlw	4
  3132   000CBA  1811               	xorwf	Lcd_Set_Cursor@a^0,w,c
  3133   000CBC  A4D8               	btfss	status,2,c
  3134   000CBE  EF63  F006         	goto	u801
  3135   000CC2  EF65  F006         	goto	u800
  3136   000CC6                     u801:
  3137   000CC6  EF76  F006         	goto	l249
  3138   000CCA                     u800:
  3139   000CCA                     
  3140                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD0 + b - 1;
  3141   000CCA  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  3142   000CCC  0FCF               	addlw	207
  3143   000CCE  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  3144                           
  3145                           ;lcd.c: 56:         z = temp>>4;
  3146   000CD0  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3147   000CD2  0B0F               	andlw	15
  3148   000CD4  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  3149                           
  3150                           ;lcd.c: 57:         y = temp & 0x0F;
  3151   000CD6  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  3152   000CD8  0B0F               	andlw	15
  3153   000CDA  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  3154   000CDC                     
  3155                           ;lcd.c: 58:         Lcd_Cmd(z);
  3156   000CDC  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  3157   000CDE  ECC4  F008         	call	_Lcd_Cmd
  3158   000CE2                     
  3159                           ;lcd.c: 59:         Lcd_Cmd(y);
  3160   000CE2  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  3161   000CE4  ECC4  F008         	call	_Lcd_Cmd
  3162   000CE8  EF76  F006         	goto	l253
  3163   000CEC                     l249:
  3164   000CEC                     l253:
  3165   000CEC  0012               	return		;funcret
  3166   000CEE                     __end_of_Lcd_Set_Cursor:
  3167                           	callstack 0
  3168                           
  3169 ;; *************** function _Lcd_Cmd *****************
  3170 ;; Defined at:
  3171 ;;		line 11 in file "lcd.c"
  3172 ;; Parameters:    Size  Location     Type
  3173 ;;  a               1    wreg     unsigned char 
  3174 ;; Auto vars:     Size  Location     Type
  3175 ;;  a               1   14[COMRAM] unsigned char 
  3176 ;; Return value:  Size  Location     Type
  3177 ;;                  1    wreg      void 
  3178 ;; Registers used:
  3179 ;;		wreg, status,2, cstack
  3180 ;; Tracked objects:
  3181 ;;		On entry : 0/0
  3182 ;;		On exit  : 0/0
  3183 ;;		Unchanged: 0/0
  3184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3185 ;;      Params:         0       0       0       0       0       0       0       0       0
  3186 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3187 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3188 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3189 ;;Total ram usage:        2 bytes
  3190 ;; Hardware stack levels used: 1
  3191 ;; Hardware stack levels required when called: 6
  3192 ;; This function calls:
  3193 ;;		_Lcd_Port
  3194 ;; This function is called by:
  3195 ;;		_Lcd_Clear
  3196 ;;		_Lcd_Set_Cursor
  3197 ;;		_Lcd_Init
  3198 ;;		_Lcd_NoBlink
  3199 ;;		_Lcd_CGRAM_Init
  3200 ;;		_Lcd_CGRAM_Close
  3201 ;;		_Lcd_Shift_Right
  3202 ;;		_Lcd_Shift_Left
  3203 ;; This function uses a non-reentrant model
  3204 ;;
  3205                           
  3206                           	psect	text19
  3207   001188                     __ptext19:
  3208                           	callstack 0
  3209   001188                     _Lcd_Cmd:
  3210                           	callstack 22
  3211                           
  3212                           ;incstack = 0
  3213                           ;Lcd_Cmd@a stored from wreg
  3214   001188  6E0F               	movwf	Lcd_Cmd@a^0,c
  3215   00118A                     
  3216                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATEbits.LE0 = 0;
  3217   00118A  908D               	bcf	141,0,c	;volatile
  3218   00118C                     
  3219                           ;lcd.c: 14:     Lcd_Port(a);
  3220   00118C  500F               	movf	Lcd_Cmd@a^0,w,c
  3221   00118E  ECDF  F007         	call	_Lcd_Port
  3222   001192                     
  3223                           ;lcd.c: 15:     LATEbits.LE1 = 1;
  3224   001192  828D               	bsf	141,1,c	;volatile
  3225   001194                     
  3226                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3227   001194  0E06               	movlw	6
  3228   001196  6E0E               	movwf	??_Lcd_Cmd^0,c
  3229   001198  0E30               	movlw	48
  3230   00119A                     u1277:
  3231   00119A  2EE8               	decfsz	wreg,f,c
  3232   00119C  D7FE               	bra	u1277
  3233   00119E  2E0E               	decfsz	??_Lcd_Cmd^0,f,c
  3234   0011A0  D7FC               	bra	u1277
  3235   0011A2  D000               	nop2	
  3236   0011A4                     
  3237                           ;lcd.c: 17:     LATEbits.LE1 = 0;
  3238   0011A4  928D               	bcf	141,1,c	;volatile
  3239   0011A6  0012               	return		;funcret
  3240   0011A8                     __end_of_Lcd_Cmd:
  3241                           	callstack 0
  3242                           
  3243 ;; *************** function _Lcd_Port *****************
  3244 ;; Defined at:
  3245 ;;		line 3 in file "lcd.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  a               1    wreg     unsigned char 
  3248 ;; Auto vars:     Size  Location     Type
  3249 ;;  a               1   12[COMRAM] unsigned char 
  3250 ;; Return value:  Size  Location     Type
  3251 ;;                  1    wreg      void 
  3252 ;; Registers used:
  3253 ;;		wreg
  3254 ;; Tracked objects:
  3255 ;;		On entry : 0/0
  3256 ;;		On exit  : 0/0
  3257 ;;		Unchanged: 0/0
  3258 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3259 ;;      Params:         0       0       0       0       0       0       0       0       0
  3260 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3261 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3262 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3263 ;;Total ram usage:        1 bytes
  3264 ;; Hardware stack levels used: 1
  3265 ;; Hardware stack levels required when called: 5
  3266 ;; This function calls:
  3267 ;;		Nothing
  3268 ;; This function is called by:
  3269 ;;		_Lcd_Cmd
  3270 ;;		_Lcd_Init
  3271 ;;		_Lcd_Write_Char
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274                           
  3275                           	psect	text20
  3276   000FBE                     __ptext20:
  3277                           	callstack 0
  3278   000FBE                     _Lcd_Port:
  3279                           	callstack 23
  3280                           
  3281                           ;incstack = 0
  3282                           ;Lcd_Port@a stored from wreg
  3283   000FBE  6E0D               	movwf	Lcd_Port@a^0,c
  3284   000FC0                     
  3285                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LD4 = 1) 
      +                          : (LATDbits.LD4 = 0);
  3286   000FC0  A00D               	btfss	Lcd_Port@a^0,0,c
  3287   000FC2  EFE5  F007         	goto	u11
  3288   000FC6  EFE7  F007         	goto	u10
  3289   000FCA                     u11:
  3290   000FCA  EFEA  F007         	goto	l222
  3291   000FCE                     u10:
  3292   000FCE  888C               	bsf	140,4,c	;volatile
  3293   000FD0  EFEB  F007         	goto	l1018
  3294   000FD4                     l222:
  3295   000FD4  988C               	bcf	140,4,c	;volatile
  3296   000FD6                     l1018:
  3297                           
  3298                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LD5 = 1) : (LATDbits.LD5 = 0);
  3299   000FD6  A20D               	btfss	Lcd_Port@a^0,1,c
  3300   000FD8  EFF0  F007         	goto	u21
  3301   000FDC  EFF2  F007         	goto	u20
  3302   000FE0                     u21:
  3303   000FE0  EFF5  F007         	goto	l226
  3304   000FE4                     u20:
  3305   000FE4  8A8C               	bsf	140,5,c	;volatile
  3306   000FE6  EFF6  F007         	goto	l1022
  3307   000FEA                     l226:
  3308   000FEA  9A8C               	bcf	140,5,c	;volatile
  3309   000FEC                     l1022:
  3310                           
  3311                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LD6 = 1) : (LATDbits.LD6 = 0);
  3312   000FEC  A40D               	btfss	Lcd_Port@a^0,2,c
  3313   000FEE  EFFB  F007         	goto	u31
  3314   000FF2  EFFD  F007         	goto	u30
  3315   000FF6                     u31:
  3316   000FF6  EF00  F008         	goto	l230
  3317   000FFA                     u30:
  3318   000FFA  8C8C               	bsf	140,6,c	;volatile
  3319   000FFC  EF01  F008         	goto	l1026
  3320   001000                     l230:
  3321   001000  9C8C               	bcf	140,6,c	;volatile
  3322   001002                     l1026:
  3323                           
  3324                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LD7 = 1) : (LATDbits.LD7 = 0);
  3325   001002  A60D               	btfss	Lcd_Port@a^0,3,c
  3326   001004  EF06  F008         	goto	u41
  3327   001008  EF08  F008         	goto	u40
  3328   00100C                     u41:
  3329   00100C  EF0B  F008         	goto	l234
  3330   001010                     u40:
  3331   001010  8E8C               	bsf	140,7,c	;volatile
  3332   001012  EF0C  F008         	goto	l237
  3333   001016                     l234:
  3334   001016  9E8C               	bcf	140,7,c	;volatile
  3335   001018                     l237:
  3336   001018  0012               	return		;funcret
  3337   00101A                     __end_of_Lcd_Port:
  3338                           	callstack 0
  3339                           
  3340 ;; *************** function _LowISR *****************
  3341 ;; Defined at:
  3342 ;;		line 165 in file "ASCENSOR.c"
  3343 ;; Parameters:    Size  Location     Type
  3344 ;;		None
  3345 ;; Auto vars:     Size  Location     Type
  3346 ;;  dummy           1   11[COMRAM] volatile unsigned char 
  3347 ;; Return value:  Size  Location     Type
  3348 ;;                  1    wreg      void 
  3349 ;; Registers used:
  3350 ;;		wreg, status,2, status,0, cstack
  3351 ;; Tracked objects:
  3352 ;;		On entry : 0/0
  3353 ;;		On exit  : 0/0
  3354 ;;		Unchanged: 0/0
  3355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3356 ;;      Params:         0       0       0       0       0       0       0       0       0
  3357 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3358 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3359 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3360 ;;Total ram usage:        4 bytes
  3361 ;; Hardware stack levels used: 1
  3362 ;; Hardware stack levels required when called: 4
  3363 ;; This function calls:
  3364 ;;		_Lcd_Blink
  3365 ;;		i1_Lcd_Set_Cursor
  3366 ;; This function is called by:
  3367 ;;		Interrupt level 1
  3368 ;; This function uses a non-reentrant model
  3369 ;;
  3370                           
  3371                           	psect	intcodelo
  3372   000018                     __pintcodelo:
  3373                           	callstack 0
  3374   000018                     _LowISR:
  3375                           	callstack 22
  3376                           
  3377                           ;incstack = 0
  3378   000018  802F               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  3379   00001A  CFD8 F009          	movff	status,??_LowISR
  3380   00001E  CFE8 F00A          	movff	wreg,??_LowISR+1
  3381   000022  CFE0 F00B          	movff	bsr,??_LowISR+2
  3382   000026                     
  3383                           ;ASCENSOR.c: 166:     Lcd_Blink();
  3384   000026  EC37  F009         	call	_Lcd_Blink	;wreg free
  3385   00002A                     
  3386                           ;ASCENSOR.c: 167:     if (INTCONbits.RBIF){
  3387   00002A  A0F2               	btfss	242,0,c	;volatile
  3388   00002C  EF1A  F000         	goto	i1u100_21
  3389   000030  EF1C  F000         	goto	i1u100_20
  3390   000034                     i1u100_21:
  3391   000034  EF64  F000         	goto	i1l164
  3392   000038                     i1u100_20:
  3393   000038                     
  3394                           ;ASCENSOR.c: 168:        volatile unsigned char dummy = PORTB;
  3395   000038  CF81 F00C          	movff	3969,LowISR@dummy	;volatile
  3396                           
  3397                           ;ASCENSOR.c: 169:        INTCONbits.RBIF=0;
  3398   00003C  90F2               	bcf	242,0,c	;volatile
  3399                           
  3400                           ;ASCENSOR.c: 171:        if (PORTBbits.RB6==1 && f>1){
  3401   00003E  AC81               	btfss	129,6,c	;volatile
  3402   000040  EF24  F000         	goto	i1u101_21
  3403   000044  EF26  F000         	goto	i1u101_20
  3404   000048                     i1u101_21:
  3405   000048  EF2F  F000         	goto	i1l1920
  3406   00004C                     i1u101_20:
  3407   00004C  0E01               	movlw	1
  3408   00004E  642B               	cpfsgt	_f^0,c
  3409   000050  EF2C  F000         	goto	i1u102_21
  3410   000054  EF2E  F000         	goto	i1u102_20
  3411   000058                     i1u102_21:
  3412   000058  EF2F  F000         	goto	i1l1920
  3413   00005C                     i1u102_20:
  3414   00005C                     
  3415                           ;ASCENSOR.c: 172:            f--;
  3416   00005C  062B               	decf	_f^0,f,c
  3417   00005E                     i1l1920:
  3418                           
  3419                           ;ASCENSOR.c: 174:        if (PORTBbits.RB7==1 && f<3){
  3420   00005E  AE81               	btfss	129,7,c	;volatile
  3421   000060  EF34  F000         	goto	i1u103_21
  3422   000064  EF36  F000         	goto	i1u103_20
  3423   000068                     i1u103_21:
  3424   000068  EF3F  F000         	goto	i1l1926
  3425   00006C                     i1u103_20:
  3426   00006C  0E03               	movlw	3
  3427   00006E  602B               	cpfslt	_f^0,c
  3428   000070  EF3C  F000         	goto	i1u104_21
  3429   000074  EF3E  F000         	goto	i1u104_20
  3430   000078                     i1u104_21:
  3431   000078  EF3F  F000         	goto	i1l1926
  3432   00007C                     i1u104_20:
  3433   00007C                     
  3434                           ;ASCENSOR.c: 175:            f++;
  3435   00007C  2A2B               	incf	_f^0,f,c
  3436   00007E                     i1l1926:
  3437                           
  3438                           ;ASCENSOR.c: 177:        if (PORTBbits.RB4==1 && c>12){
  3439   00007E  A881               	btfss	129,4,c	;volatile
  3440   000080  EF44  F000         	goto	i1u105_21
  3441   000084  EF46  F000         	goto	i1u105_20
  3442   000088                     i1u105_21:
  3443   000088  EF4F  F000         	goto	i1l1932
  3444   00008C                     i1u105_20:
  3445   00008C  0E0C               	movlw	12
  3446   00008E  642A               	cpfsgt	_c^0,c
  3447   000090  EF4C  F000         	goto	i1u106_21
  3448   000094  EF4E  F000         	goto	i1u106_20
  3449   000098                     i1u106_21:
  3450   000098  EF4F  F000         	goto	i1l1932
  3451   00009C                     i1u106_20:
  3452   00009C                     
  3453                           ;ASCENSOR.c: 178:           c--;
  3454   00009C  062A               	decf	_c^0,f,c
  3455   00009E                     i1l1932:
  3456                           
  3457                           ;ASCENSOR.c: 180:        if (PORTBbits.RB5==1 && c< 15){
  3458   00009E  AA81               	btfss	129,5,c	;volatile
  3459   0000A0  EF54  F000         	goto	i1u107_21
  3460   0000A4  EF56  F000         	goto	i1u107_20
  3461   0000A8                     i1u107_21:
  3462   0000A8  EF5F  F000         	goto	i1l1938
  3463   0000AC                     i1u107_20:
  3464   0000AC  0E0F               	movlw	15
  3465   0000AE  602A               	cpfslt	_c^0,c
  3466   0000B0  EF5C  F000         	goto	i1u108_21
  3467   0000B4  EF5E  F000         	goto	i1u108_20
  3468   0000B8                     i1u108_21:
  3469   0000B8  EF5F  F000         	goto	i1l1938
  3470   0000BC                     i1u108_20:
  3471   0000BC                     
  3472                           ;ASCENSOR.c: 181:            c++;
  3473   0000BC  2A2A               	incf	_c^0,f,c
  3474   0000BE                     i1l1938:
  3475                           
  3476                           ;ASCENSOR.c: 184:        Lcd_Set_Cursor(f,c);
  3477   0000BE  C02A  F004         	movff	_c,i1Lcd_Set_Cursor@b
  3478   0000C2  502B               	movf	_f^0,w,c
  3479   0000C4  EC77  F006         	call	i1_Lcd_Set_Cursor
  3480   0000C8                     i1l164:
  3481   0000C8  C00B  FFE0         	movff	??_LowISR+2,bsr
  3482   0000CC  C00A  FFE8         	movff	??_LowISR+1,wreg
  3483   0000D0  C009  FFD8         	movff	??_LowISR,status
  3484   0000D4  902F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3485   0000D6  0010               	retfie	
  3486   0000D8                     __end_of_LowISR:
  3487                           	callstack 0
  3488                           
  3489 ;; *************** function i1_Lcd_Set_Cursor *****************
  3490 ;; Defined at:
  3491 ;;		line 26 in file "lcd.c"
  3492 ;; Parameters:    Size  Location     Type
  3493 ;;  a               1    wreg     unsigned char 
  3494 ;;  b               1    3[COMRAM] unsigned char 
  3495 ;; Auto vars:     Size  Location     Type
  3496 ;;  a               1    4[COMRAM] unsigned char 
  3497 ;;  temp            1    7[COMRAM] unsigned char 
  3498 ;;  y               1    6[COMRAM] unsigned char 
  3499 ;;  z               1    5[COMRAM] unsigned char 
  3500 ;; Return value:  Size  Location     Type
  3501 ;;                  1    wreg      void 
  3502 ;; Registers used:
  3503 ;;		wreg, status,2, status,0, cstack
  3504 ;; Tracked objects:
  3505 ;;		On entry : 0/0
  3506 ;;		On exit  : 0/0
  3507 ;;		Unchanged: 0/0
  3508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3509 ;;      Params:         1       0       0       0       0       0       0       0       0
  3510 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3511 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3512 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3513 ;;Total ram usage:        5 bytes
  3514 ;; Hardware stack levels used: 1
  3515 ;; Hardware stack levels required when called: 3
  3516 ;; This function calls:
  3517 ;;		i1_Lcd_Cmd
  3518 ;; This function is called by:
  3519 ;;		_LowISR
  3520 ;; This function uses a non-reentrant model
  3521 ;;
  3522                           
  3523                           	psect	text22
  3524   000CEE                     __ptext22:
  3525                           	callstack 0
  3526   000CEE                     i1_Lcd_Set_Cursor:
  3527                           	callstack 22
  3528                           
  3529                           ;incstack = 0
  3530                           ;i1Lcd_Set_Cursor@a stored from wreg
  3531   000CEE  6E05               	movwf	i1Lcd_Set_Cursor@a^0,c
  3532   000CF0                     
  3533                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
  3534   000CF0  0405               	decf	i1Lcd_Set_Cursor@a^0,w,c
  3535   000CF2  A4D8               	btfss	status,2,c
  3536   000CF4  EF7E  F006         	goto	i1u96_21
  3537   000CF8  EF80  F006         	goto	i1u96_20
  3538   000CFC                     i1u96_21:
  3539   000CFC  EF91  F006         	goto	i1l1886
  3540   000D00                     i1u96_20:
  3541   000D00                     
  3542                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
  3543   000D00  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  3544   000D02  0F7F               	addlw	127
  3545   000D04  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  3546                           
  3547                           ;lcd.c: 32:         z = temp>>4;
  3548   000D06  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  3549   000D08  0B0F               	andlw	15
  3550   000D0A  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  3551                           
  3552                           ;lcd.c: 33:         y = temp & 0x0F;
  3553   000D0C  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  3554   000D0E  0B0F               	andlw	15
  3555   000D10  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  3556   000D12                     
  3557                           ;lcd.c: 34:         Lcd_Cmd(z);
  3558   000D12  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  3559   000D14  ECD4  F008         	call	i1_Lcd_Cmd
  3560   000D18                     
  3561                           ;lcd.c: 35:         Lcd_Cmd(y);
  3562   000D18  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  3563   000D1A  ECD4  F008         	call	i1_Lcd_Cmd
  3564                           
  3565                           ;lcd.c: 36:     }
  3566   000D1E  EFDF  F006         	goto	i1l253
  3567   000D22                     i1l1886:
  3568   000D22  0E02               	movlw	2
  3569   000D24  1805               	xorwf	i1Lcd_Set_Cursor@a^0,w,c
  3570   000D26  A4D8               	btfss	status,2,c
  3571   000D28  EF98  F006         	goto	i1u97_21
  3572   000D2C  EF9A  F006         	goto	i1u97_20
  3573   000D30                     i1u97_21:
  3574   000D30  EFAB  F006         	goto	i1l1894
  3575   000D34                     i1u97_20:
  3576   000D34                     
  3577                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
  3578   000D34  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  3579   000D36  0FBF               	addlw	191
  3580   000D38  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  3581                           
  3582                           ;lcd.c: 40:         z = temp>>4;
  3583   000D3A  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  3584   000D3C  0B0F               	andlw	15
  3585   000D3E  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  3586                           
  3587                           ;lcd.c: 41:         y = temp & 0x0F;
  3588   000D40  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  3589   000D42  0B0F               	andlw	15
  3590   000D44  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  3591   000D46                     
  3592                           ;lcd.c: 42:         Lcd_Cmd(z);
  3593   000D46  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  3594   000D48  ECD4  F008         	call	i1_Lcd_Cmd
  3595   000D4C                     
  3596                           ;lcd.c: 43:         Lcd_Cmd(y);
  3597   000D4C  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  3598   000D4E  ECD4  F008         	call	i1_Lcd_Cmd
  3599                           
  3600                           ;lcd.c: 44:     }
  3601   000D52  EFDF  F006         	goto	i1l253
  3602   000D56                     i1l1894:
  3603   000D56  0E03               	movlw	3
  3604   000D58  1805               	xorwf	i1Lcd_Set_Cursor@a^0,w,c
  3605   000D5A  A4D8               	btfss	status,2,c
  3606   000D5C  EFB2  F006         	goto	i1u98_21
  3607   000D60  EFB4  F006         	goto	i1u98_20
  3608   000D64                     i1u98_21:
  3609   000D64  EFC5  F006         	goto	i1l1902
  3610   000D68                     i1u98_20:
  3611   000D68                     
  3612                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x90 + b - 1;
  3613   000D68  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  3614   000D6A  0F8F               	addlw	143
  3615   000D6C  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  3616                           
  3617                           ;lcd.c: 48:         z = temp>>4;
  3618   000D6E  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  3619   000D70  0B0F               	andlw	15
  3620   000D72  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  3621                           
  3622                           ;lcd.c: 49:         y = temp & 0x0F;
  3623   000D74  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  3624   000D76  0B0F               	andlw	15
  3625   000D78  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  3626   000D7A                     
  3627                           ;lcd.c: 50:         Lcd_Cmd(z);
  3628   000D7A  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  3629   000D7C  ECD4  F008         	call	i1_Lcd_Cmd
  3630   000D80                     
  3631                           ;lcd.c: 51:         Lcd_Cmd(y);
  3632   000D80  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  3633   000D82  ECD4  F008         	call	i1_Lcd_Cmd
  3634                           
  3635                           ;lcd.c: 52:     }
  3636   000D86  EFDF  F006         	goto	i1l253
  3637   000D8A                     i1l1902:
  3638   000D8A  0E04               	movlw	4
  3639   000D8C  1805               	xorwf	i1Lcd_Set_Cursor@a^0,w,c
  3640   000D8E  A4D8               	btfss	status,2,c
  3641   000D90  EFCC  F006         	goto	i1u99_21
  3642   000D94  EFCE  F006         	goto	i1u99_20
  3643   000D98                     i1u99_21:
  3644   000D98  EFDF  F006         	goto	i1l249
  3645   000D9C                     i1u99_20:
  3646   000D9C                     
  3647                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD0 + b - 1;
  3648   000D9C  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  3649   000D9E  0FCF               	addlw	207
  3650   000DA0  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  3651                           
  3652                           ;lcd.c: 56:         z = temp>>4;
  3653   000DA2  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  3654   000DA4  0B0F               	andlw	15
  3655   000DA6  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  3656                           
  3657                           ;lcd.c: 57:         y = temp & 0x0F;
  3658   000DA8  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  3659   000DAA  0B0F               	andlw	15
  3660   000DAC  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  3661   000DAE                     
  3662                           ;lcd.c: 58:         Lcd_Cmd(z);
  3663   000DAE  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  3664   000DB0  ECD4  F008         	call	i1_Lcd_Cmd
  3665   000DB4                     
  3666                           ;lcd.c: 59:         Lcd_Cmd(y);
  3667   000DB4  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  3668   000DB6  ECD4  F008         	call	i1_Lcd_Cmd
  3669   000DBA  EFDF  F006         	goto	i1l253
  3670   000DBE                     i1l249:
  3671   000DBE                     i1l253:
  3672   000DBE  0012               	return		;funcret
  3673   000DC0                     __end_ofi1_Lcd_Set_Cursor:
  3674                           	callstack 0
  3675                           
  3676 ;; *************** function _Lcd_Blink *****************
  3677 ;; Defined at:
  3678 ;;		line 123 in file "lcd.c"
  3679 ;; Parameters:    Size  Location     Type
  3680 ;;		None
  3681 ;; Auto vars:     Size  Location     Type
  3682 ;;		None
  3683 ;; Return value:  Size  Location     Type
  3684 ;;                  1    wreg      void 
  3685 ;; Registers used:
  3686 ;;		wreg, status,2, cstack
  3687 ;; Tracked objects:
  3688 ;;		On entry : 0/0
  3689 ;;		On exit  : 0/0
  3690 ;;		Unchanged: 0/0
  3691 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3692 ;;      Params:         0       0       0       0       0       0       0       0       0
  3693 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3694 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3695 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3696 ;;Total ram usage:        0 bytes
  3697 ;; Hardware stack levels used: 1
  3698 ;; Hardware stack levels required when called: 3
  3699 ;; This function calls:
  3700 ;;		i1_Lcd_Cmd
  3701 ;; This function is called by:
  3702 ;;		_LowISR
  3703 ;; This function uses a non-reentrant model
  3704 ;;
  3705                           
  3706                           	psect	text23
  3707   00126E                     __ptext23:
  3708                           	callstack 0
  3709   00126E                     _Lcd_Blink:
  3710                           	callstack 22
  3711   00126E                     
  3712                           ;lcd.c: 125:     Lcd_Cmd(0x00);
  3713   00126E  0E00               	movlw	0
  3714   001270  ECD4  F008         	call	i1_Lcd_Cmd
  3715                           
  3716                           ;lcd.c: 126:     Lcd_Cmd(0x0F);
  3717   001274  0E0F               	movlw	15
  3718   001276  ECD4  F008         	call	i1_Lcd_Cmd
  3719   00127A  0012               	return		;funcret
  3720   00127C                     __end_of_Lcd_Blink:
  3721                           	callstack 0
  3722                           
  3723 ;; *************** function i1_Lcd_Cmd *****************
  3724 ;; Defined at:
  3725 ;;		line 11 in file "lcd.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  a               1    wreg     unsigned char 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  a               1    2[COMRAM] unsigned char 
  3730 ;; Return value:  Size  Location     Type
  3731 ;;                  1    wreg      void 
  3732 ;; Registers used:
  3733 ;;		wreg, status,2, cstack
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3739 ;;      Params:         0       0       0       0       0       0       0       0       0
  3740 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3741 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3742 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3743 ;;Total ram usage:        2 bytes
  3744 ;; Hardware stack levels used: 1
  3745 ;; Hardware stack levels required when called: 2
  3746 ;; This function calls:
  3747 ;;		i1_Lcd_Port
  3748 ;; This function is called by:
  3749 ;;		_Lcd_Blink
  3750 ;;		i1_Lcd_Set_Cursor
  3751 ;; This function uses a non-reentrant model
  3752 ;;
  3753                           
  3754                           	psect	text24
  3755   0011A8                     __ptext24:
  3756                           	callstack 0
  3757   0011A8                     i1_Lcd_Cmd:
  3758                           	callstack 22
  3759                           
  3760                           ;incstack = 0
  3761                           ;i1Lcd_Cmd@a stored from wreg
  3762   0011A8  6E03               	movwf	i1Lcd_Cmd@a^0,c
  3763   0011AA                     
  3764                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATEbits.LE0 = 0;
  3765   0011AA  908D               	bcf	141,0,c	;volatile
  3766   0011AC                     
  3767                           ;lcd.c: 14:     Lcd_Port(a);
  3768   0011AC  5003               	movf	i1Lcd_Cmd@a^0,w,c
  3769   0011AE  EC0D  F008         	call	i1_Lcd_Port
  3770   0011B2                     
  3771                           ;lcd.c: 15:     LATEbits.LE1 = 1;
  3772   0011B2  828D               	bsf	141,1,c	;volatile
  3773   0011B4                     
  3774                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3775   0011B4  0E06               	movlw	6
  3776   0011B6  6E02               	movwf	??i1_Lcd_Cmd^0,c
  3777   0011B8  0E30               	movlw	48
  3778   0011BA                     i1u128_27:
  3779   0011BA  2EE8               	decfsz	wreg,f,c
  3780   0011BC  D7FE               	bra	i1u128_27
  3781   0011BE  2E02               	decfsz	??i1_Lcd_Cmd^0,f,c
  3782   0011C0  D7FC               	bra	i1u128_27
  3783   0011C2  D000               	nop2	
  3784   0011C4                     
  3785                           ;lcd.c: 17:     LATEbits.LE1 = 0;
  3786   0011C4  928D               	bcf	141,1,c	;volatile
  3787   0011C6  0012               	return		;funcret
  3788   0011C8                     __end_ofi1_Lcd_Cmd:
  3789                           	callstack 0
  3790                           
  3791 ;; *************** function i1_Lcd_Port *****************
  3792 ;; Defined at:
  3793 ;;		line 3 in file "lcd.c"
  3794 ;; Parameters:    Size  Location     Type
  3795 ;;  a               1    wreg     unsigned char 
  3796 ;; Auto vars:     Size  Location     Type
  3797 ;;  a               1    0[COMRAM] unsigned char 
  3798 ;; Return value:  Size  Location     Type
  3799 ;;                  1    wreg      void 
  3800 ;; Registers used:
  3801 ;;		wreg
  3802 ;; Tracked objects:
  3803 ;;		On entry : 0/0
  3804 ;;		On exit  : 0/0
  3805 ;;		Unchanged: 0/0
  3806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3807 ;;      Params:         0       0       0       0       0       0       0       0       0
  3808 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3809 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3810 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3811 ;;Total ram usage:        1 bytes
  3812 ;; Hardware stack levels used: 1
  3813 ;; Hardware stack levels required when called: 1
  3814 ;; This function calls:
  3815 ;;		Nothing
  3816 ;; This function is called by:
  3817 ;;		i1_Lcd_Cmd
  3818 ;; This function uses a non-reentrant model
  3819 ;;
  3820                           
  3821                           	psect	text25
  3822   00101A                     __ptext25:
  3823                           	callstack 0
  3824   00101A                     i1_Lcd_Port:
  3825                           	callstack 22
  3826                           
  3827                           ;incstack = 0
  3828                           ;i1Lcd_Port@a stored from wreg
  3829   00101A  6E01               	movwf	i1Lcd_Port@a^0,c
  3830   00101C                     
  3831                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LD4 = 1) 
      +                          : (LATDbits.LD4 = 0);
  3832   00101C  A001               	btfss	i1Lcd_Port@a^0,0,c
  3833   00101E  EF13  F008         	goto	i1u73_21
  3834   001022  EF15  F008         	goto	i1u73_20
  3835   001026                     i1u73_21:
  3836   001026  EF18  F008         	goto	i1l222
  3837   00102A                     i1u73_20:
  3838   00102A  888C               	bsf	140,4,c	;volatile
  3839   00102C  EF19  F008         	goto	i1l1654
  3840   001030                     i1l222:
  3841   001030  988C               	bcf	140,4,c	;volatile
  3842   001032                     i1l1654:
  3843                           
  3844                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LD5 = 1) : (LATDbits.LD5 = 0);
  3845   001032  A201               	btfss	i1Lcd_Port@a^0,1,c
  3846   001034  EF1E  F008         	goto	i1u74_21
  3847   001038  EF20  F008         	goto	i1u74_20
  3848   00103C                     i1u74_21:
  3849   00103C  EF23  F008         	goto	i1l226
  3850   001040                     i1u74_20:
  3851   001040  8A8C               	bsf	140,5,c	;volatile
  3852   001042  EF24  F008         	goto	i1l1658
  3853   001046                     i1l226:
  3854   001046  9A8C               	bcf	140,5,c	;volatile
  3855   001048                     i1l1658:
  3856                           
  3857                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LD6 = 1) : (LATDbits.LD6 = 0);
  3858   001048  A401               	btfss	i1Lcd_Port@a^0,2,c
  3859   00104A  EF29  F008         	goto	i1u75_21
  3860   00104E  EF2B  F008         	goto	i1u75_20
  3861   001052                     i1u75_21:
  3862   001052  EF2E  F008         	goto	i1l230
  3863   001056                     i1u75_20:
  3864   001056  8C8C               	bsf	140,6,c	;volatile
  3865   001058  EF2F  F008         	goto	i1l1662
  3866   00105C                     i1l230:
  3867   00105C  9C8C               	bcf	140,6,c	;volatile
  3868   00105E                     i1l1662:
  3869                           
  3870                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LD7 = 1) : (LATDbits.LD7 = 0);
  3871   00105E  A601               	btfss	i1Lcd_Port@a^0,3,c
  3872   001060  EF34  F008         	goto	i1u76_21
  3873   001064  EF36  F008         	goto	i1u76_20
  3874   001068                     i1u76_21:
  3875   001068  EF39  F008         	goto	i1l234
  3876   00106C                     i1u76_20:
  3877   00106C  8E8C               	bsf	140,7,c	;volatile
  3878   00106E  EF3A  F008         	goto	i1l237
  3879   001072                     i1l234:
  3880   001072  9E8C               	bcf	140,7,c	;volatile
  3881   001074                     i1l237:
  3882   001074  0012               	return		;funcret
  3883   001076                     __end_ofi1_Lcd_Port:
  3884                           	callstack 0
  3885                           
  3886 ;; *************** function _Stop *****************
  3887 ;; Defined at:
  3888 ;;		line 188 in file "ASCENSOR.c"
  3889 ;; Parameters:    Size  Location     Type
  3890 ;;		None
  3891 ;; Auto vars:     Size  Location     Type
  3892 ;;		None
  3893 ;; Return value:  Size  Location     Type
  3894 ;;                  1    wreg      void 
  3895 ;; Registers used:
  3896 ;;		None
  3897 ;; Tracked objects:
  3898 ;;		On entry : 0/0
  3899 ;;		On exit  : 0/0
  3900 ;;		Unchanged: 0/0
  3901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3902 ;;      Params:         0       0       0       0       0       0       0       0       0
  3903 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3904 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3905 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3906 ;;Total ram usage:        0 bytes
  3907 ;; Hardware stack levels used: 1
  3908 ;; This function calls:
  3909 ;;		Nothing
  3910 ;; This function is called by:
  3911 ;;		Interrupt level 2
  3912 ;; This function uses a non-reentrant model
  3913 ;;
  3914                           
  3915                           	psect	intcode
  3916   000008                     __pintcode:
  3917                           	callstack 0
  3918   000008                     _Stop:
  3919                           	callstack 22
  3920                           
  3921                           ;incstack = 0
  3922   000008  822F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  3923   00000A  ED0A  F009         	call	int_func,f	;refresh shadow registers
  3924                           
  3925                           	psect	intcode_body
  3926   001214                     __pintcode_body:
  3927                           	callstack 22
  3928   001214                     int_func:
  3929                           	callstack 22
  3930   001214  0006               	pop		; remove dummy address from shadow register refresh
  3931   001216                     
  3932                           ;ASCENSOR.c: 189: INTCONbits.GIEH = 0;
  3933   001216  9EF2               	bcf	242,7,c	;volatile
  3934                           
  3935                           ;ASCENSOR.c: 190: T0CONbits.TMR0ON = 0;
  3936   001218  9ED5               	bcf	213,7,c	;volatile
  3937                           
  3938                           ;ASCENSOR.c: 191: LATDbits.LATD2=0;
  3939   00121A  948C               	bcf	140,2,c	;volatile
  3940                           
  3941                           ;ASCENSOR.c: 192: LATDbits.LATD3=0;
  3942   00121C  968C               	bcf	140,3,c	;volatile
  3943                           
  3944                           ;ASCENSOR.c: 193: INTCONbits.TMR0IF = 0;
  3945   00121E  94F2               	bcf	242,2,c	;volatile
  3946                           
  3947                           ;ASCENSOR.c: 194: INTCONbits.GIEH = 1;
  3948   001220  8EF2               	bsf	242,7,c	;volatile
  3949   001222  922F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  3950   001224  0011               	retfie		f
  3951   001226                     __end_of_Stop:
  3952                           	callstack 0
  3953                           
  3954                           	psect	rparam
  3955   000001                     ___rparam_used  equ	1
  3956   000000                     ___param_bank   equ	0
  3957   000000                     __Lparam        equ	__Lrparam
  3958   000000                     __Hparam        equ	__Hrparam
  3959                           
  3960                           	psect	temp
  3961   00002F                     btemp:
  3962                           	callstack 0
  3963   00002F                     	ds	1
  3964   00002F                     int$flags       set	btemp
  3965   000030                     wtemp8          set	btemp+1
  3966   000030                     ttemp5          set	btemp+1
  3967   000033                     ttemp6          set	btemp+4
  3968   000037                     ttemp7          set	btemp+8
  3969                           
  3970                           	psect	config
  3971                           
  3972                           ;Config register CONFIG1L @ 0x300000
  3973                           ;	PLL Prescaler Selection bits
  3974                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  3975                           ;	System Clock Postscaler Selection bits
  3976                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  3977                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  3978                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  3979   300000                     	org	3145728
  3980   300000  00                 	db	0
  3981                           
  3982                           ;Config register CONFIG1H @ 0x300001
  3983                           ;	Oscillator Selection bits
  3984                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
  3985                           ;	Fail-Safe Clock Monitor Enable bit
  3986                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  3987                           ;	Internal/External Oscillator Switchover bit
  3988                           ;	IESO = OFF, Oscillator Switchover mode disabled
  3989   300001                     	org	3145729
  3990   300001  08                 	db	8
  3991                           
  3992                           ;Config register CONFIG2L @ 0x300002
  3993                           ;	Power-up Timer Enable bit
  3994                           ;	PWRT = OFF, PWRT disabled
  3995                           ;	Brown-out Reset Enable bits
  3996                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  3997                           ;	Brown-out Reset Voltage bits
  3998                           ;	BORV = 3, Minimum setting 2.05V
  3999                           ;	USB Voltage Regulator Enable bit
  4000                           ;	VREGEN = OFF, USB voltage regulator disabled
  4001   300002                     	org	3145730
  4002   300002  19                 	db	25
  4003                           
  4004                           ;Config register CONFIG2H @ 0x300003
  4005                           ;	Watchdog Timer Enable bit
  4006                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4007                           ;	Watchdog Timer Postscale Select bits
  4008                           ;	WDTPS = 32768, 1:32768
  4009   300003                     	org	3145731
  4010   300003  1E                 	db	30
  4011                           
  4012                           ; Padding undefined space
  4013   300004                     	org	3145732
  4014   300004  FF                 	db	255
  4015                           
  4016                           ;Config register CONFIG3H @ 0x300005
  4017                           ;	CCP2 MUX bit
  4018                           ;	CCP2MX = OFF, CCP2 input/output is multiplexed with RB3
  4019                           ;	PORTB A/D Enable bit
  4020                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  4021                           ;	Low-Power Timer 1 Oscillator Enable bit
  4022                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  4023                           ;	MCLR Pin Enable bit
  4024                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  4025   300005                     	org	3145733
  4026   300005  00                 	db	0
  4027                           
  4028                           ;Config register CONFIG4L @ 0x300006
  4029                           ;	Stack Full/Underflow Reset Enable bit
  4030                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  4031                           ;	Single-Supply ICSP Enable bit
  4032                           ;	LVP = OFF, Single-Supply ICSP disabled
  4033                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  4034                           ;	ICPRT = ON, ICPORT enabled
  4035                           ;	Extended Instruction Set Enable bit
  4036                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  4037                           ;	Background Debugger Enable bit
  4038                           ;	DEBUG = 0x1, unprogrammed default
  4039   300006                     	org	3145734
  4040   300006  A0                 	db	160
  4041                           
  4042                           ; Padding undefined space
  4043   300007                     	org	3145735
  4044   300007  FF                 	db	255
  4045                           
  4046                           ;Config register CONFIG5L @ 0x300008
  4047                           ;	Code Protection bit
  4048                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  4049                           ;	Code Protection bit
  4050                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  4051                           ;	Code Protection bit
  4052                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  4053                           ;	Code Protection bit
  4054                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  4055   300008                     	org	3145736
  4056   300008  0F                 	db	15
  4057                           
  4058                           ;Config register CONFIG5H @ 0x300009
  4059                           ;	Boot Block Code Protection bit
  4060                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  4061                           ;	Data EEPROM Code Protection bit
  4062                           ;	CPD = OFF, Data EEPROM is not code-protected
  4063   300009                     	org	3145737
  4064   300009  C0                 	db	192
  4065                           
  4066                           ;Config register CONFIG6L @ 0x30000A
  4067                           ;	Write Protection bit
  4068                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  4069                           ;	Write Protection bit
  4070                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  4071                           ;	Write Protection bit
  4072                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  4073                           ;	Write Protection bit
  4074                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  4075   30000A                     	org	3145738
  4076   30000A  0F                 	db	15
  4077                           
  4078                           ;Config register CONFIG6H @ 0x30000B
  4079                           ;	Configuration Register Write Protection bit
  4080                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  4081                           ;	Boot Block Write Protection bit
  4082                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  4083                           ;	Data EEPROM Write Protection bit
  4084                           ;	WRTD = OFF, Data EEPROM is not write-protected
  4085   30000B                     	org	3145739
  4086   30000B  E0                 	db	224
  4087                           
  4088                           ;Config register CONFIG7L @ 0x30000C
  4089                           ;	Table Read Protection bit
  4090                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4091                           ;	Table Read Protection bit
  4092                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4093                           ;	Table Read Protection bit
  4094                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4095                           ;	Table Read Protection bit
  4096                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4097   30000C                     	org	3145740
  4098   30000C  0F                 	db	15
  4099                           
  4100                           ;Config register CONFIG7H @ 0x30000D
  4101                           ;	Boot Block Table Read Protection bit
  4102                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  4103   30000D                     	org	3145741
  4104   30000D  40                 	db	64
  4105                           tosu	equ	0xFFF
  4106                           tosh	equ	0xFFE
  4107                           tosl	equ	0xFFD
  4108                           stkptr	equ	0xFFC
  4109                           pclatu	equ	0xFFB
  4110                           pclath	equ	0xFFA
  4111                           pcl	equ	0xFF9
  4112                           tblptru	equ	0xFF8
  4113                           tblptrh	equ	0xFF7
  4114                           tblptrl	equ	0xFF6
  4115                           tablat	equ	0xFF5
  4116                           prodh	equ	0xFF4
  4117                           prodl	equ	0xFF3
  4118                           indf0	equ	0xFEF
  4119                           postinc0	equ	0xFEE
  4120                           postdec0	equ	0xFED
  4121                           preinc0	equ	0xFEC
  4122                           plusw0	equ	0xFEB
  4123                           fsr0h	equ	0xFEA
  4124                           fsr0l	equ	0xFE9
  4125                           wreg	equ	0xFE8
  4126                           indf1	equ	0xFE7
  4127                           postinc1	equ	0xFE6
  4128                           postdec1	equ	0xFE5
  4129                           preinc1	equ	0xFE4
  4130                           plusw1	equ	0xFE3
  4131                           fsr1h	equ	0xFE2
  4132                           fsr1l	equ	0xFE1
  4133                           bsr	equ	0xFE0
  4134                           indf2	equ	0xFDF
  4135                           postinc2	equ	0xFDE
  4136                           postdec2	equ	0xFDD
  4137                           preinc2	equ	0xFDC
  4138                           plusw2	equ	0xFDB
  4139                           fsr2h	equ	0xFDA
  4140                           fsr2l	equ	0xFD9
  4141                           status	equ	0xFD8

Data Sizes:
    Strings     21
    Constant    16
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      46
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_CGRAM_CreateChar@chardata	PTR const unsigned char  size(1) Largest target is 8
		 -> figura_1(CODE[8]), figura_2(CODE[8]), 

    Lcd_Write_String@a	PTR const unsigned char  size(1) Largest target is 8
		 -> STR_1(CODE[7]), STR_2(CODE[8]), STR_3(CODE[6]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_CGRAM_CreateChar
    _estado->_EEPROM_Read
    _Modificar->_Lcd_Write_Char
    _Lcd_NoBlink->_Lcd_Cmd
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_CGRAM_Init->_Lcd_Cmd
    _Lcd_CGRAM_CreateChar->_Lcd_Write_Char
    _Lcd_CGRAM_Close->_Lcd_Cmd
    _Actualizar_Matriz->_Lcd_Set_Cursor
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _LowISR in COMRAM

    _LowISR->i1_Lcd_Set_Cursor
    i1_Lcd_Set_Cursor->i1_Lcd_Cmd
    _Lcd_Blink->i1_Lcd_Cmd
    i1_Lcd_Cmd->i1_Lcd_Port

Critical Paths under _Stop in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _Stop in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _Stop in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _Stop in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _Stop in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _Stop in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _Stop in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _Stop in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _Stop in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    3655
                                             27 COMRAM     2     2      0
                  _Actualizar_Matriz
                    _Lcd_CGRAM_Close
               _Lcd_CGRAM_CreateChar
                     _Lcd_CGRAM_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                   _Lcd_Write_String
                          _Modificar
                              _dejar
                           _detectar
                             _estado
                           _init_int
                         _init_ports
                             _reposo
 ---------------------------------------------------------------------------------
 (1) _reposo                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_int                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _estado                                               4     4      0     195
                                             13 COMRAM     3     3      0
                        _EEPROM_Read
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Read                                          1     1      0      15
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _detectar                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dejar                                                2     2      0       0
                                             12 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (1) _Modificar                                            0     0      0     195
                        _Lcd_NoBlink
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_NoBlink                                          0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     4     3      1     213
                                             16 COMRAM     4     3      1
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     210
                                             15 COMRAM     1     1      0
                          _Lcd_Clear
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_CGRAM_Init                                       0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_CGRAM_CreateChar                                11    10      1     871
                                             16 COMRAM    11    10      1
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _Lcd_CGRAM_Close                                      0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Actualizar_Matriz                                    3     3      0     975
                                             20 COMRAM     3     3      0
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       3     3      0     120
                                             13 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       5     4      1     651
                                             15 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0      75
                                             13 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      60
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                               4     4      0     860
                                              8 COMRAM     4     4      0
                          _Lcd_Blink
                   i1_Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (6) i1_Lcd_Set_Cursor                                     5     4      1     714
                                              3 COMRAM     5     4      1
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (6) _Lcd_Blink                                            0     0      0     145
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (7) i1_Lcd_Cmd                                            2     2      0     145
                                              1 COMRAM     2     2      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i1_Lcd_Port                                           1     1      0     116
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Stop                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Actualizar_Matriz
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _Lcd_CGRAM_Close
     _Lcd_Cmd
   _Lcd_CGRAM_CreateChar
     _Lcd_Write_Char
   _Lcd_CGRAM_Init
     _Lcd_Cmd
   _Lcd_Clear
     _Lcd_Cmd
   _Lcd_Init
     _Lcd_Clear
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
   _Lcd_Write_Char
   _Lcd_Write_String
     _Lcd_Write_Char
   _Modificar
     _Lcd_NoBlink
       _Lcd_Cmd
     _Lcd_Write_Char
   _dejar
   _detectar
   _estado
     _EEPROM_Read
   _init_int
   _init_ports
   _reposo

 _LowISR (ROOT)
   _Lcd_Blink
     i1_Lcd_Cmd
       i1_Lcd_Port
   i1_Lcd_Set_Cursor
     i1_Lcd_Cmd

 _Stop (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            2047      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITBIGSFRh         126      0       0      0.0%
BITCOMRAM           94      0       0      0.0%
COMRAM              94     29      46     48.9%
BITBIGSFRl          32      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      46      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Oct 01 21:41:07 2025

                           _c 002A                             _f 002B                            l99 11E4  
                          u10 0FCE                            u11 0FCA                            u20 0FE4  
                          u21 0FE0                            u30 0FFA                            u31 0FF6  
                          u40 1010                            u41 100C                            bsr 0FE0  
                         l102 1212                           l110 113E                           l112 114C  
                         l121 0F4A                           l113 114E                           l105 112E  
                         l106 111E                           l116 0EF6                           l108 112C  
                         l117 0F4A                           l230 1000                           l222 0FD4  
                         l118 0F20                           l151 0F96                           l240 11A6  
                         l136 0C1A                           l312 126C                           l234 1016  
                         l226 0FEA                           l306 0A0E                           l154 0FBC  
                         l243 1250                           l180 10C2                           l172 109A  
                         l237 1018                           l253 0CEC                           l309 125E  
                         l173 108C                           l333 1234                           l149 0F70  
                         l183 0DC6                           l256 0ECA                           l249 0CEC  
                         l281 082E                           l265 110C                           l177 10B0  
                         l186 0E0A                           l259 1186                           l196 0A98  
                         l277 1242                           l189 0E48                           u200 0F12  
                         u201 0F0E                           u210 0F2E                           u130 111C  
                         u211 0F2A                           u131 1118                           u220 0F3C  
                         u300 0F70                           u140 112C                           u221 0F38  
                         u301 0F6C                           u141 1128                           u310 0F96  
                         u150 113C                           u311 0F92                           u151 1138  
                         u320 0FBC                           u160 114C                           u321 0FB8  
                         u161 1148                           u330 1084                           u170 0EDA  
                         u331 1080                           u171 0ED6                           u340 109A  
                         u180 0EE8                           u341 1096                           u181 0EE4  
                         u350 10A8                           u190 0F04                           u351 10A4  
                         u191 0F00                           u360 10BE                           u361 10BA  
                         u370 0DD4                           u371 0DD0                           u380 0E18  
                         u381 0E14                           u800 0CCA                           u801 0CC6  
                         u810 0B5A                           u811 0B56                           u820 0B7C  
                         u900 08F4                           u821 0B78                           u901 08F0  
                         u830 0BA0                           u910 0928                           u831 0B9C  
                         u911 0924                           u840 0BC2                           u920 095C  
                         u841 0BBE                           u921 0958                           u770 0C2E  
                         u850 0BE6                           u930 0990                           u771 0C2A  
                         u851 0BE2                           u931 098C                           u780 0C62  
                         u860 0C08                           u940 09C4                           u781 0C5E  
                         u861 0C04                           u941 09C0                           u790 0C96  
                         u870 0858                           u950 110C                           u791 0C92  
                         u871 0854                           u951 1108                           u880 088C  
                         u881 0888                           u890 08C0                           u891 08BC  
           _Actualizar_Matriz 0B36                           wreg 0FE8           __end_of_Lcd_NoBlink 1244  
          ?_Actualizar_Matriz 0001         Lcd_CGRAM_CreateChar@i 0014                          l1020 0FE4  
                        l1100 1174                          l1022 0FEC                          l1014 0FC0  
                        l1030 118A                          l1102 117A                          l1110 122C  
                        l1024 0FFA                          l1016 0FCE                          l1032 118C  
                        l1104 117C                          l1120 1236                          l1112 122E  
                        l1026 1002                          l1018 0FD6                          l1034 1192  
                        l1106 1184                          l1122 1244                          l1114 1230  
                        l1028 1010                          l1036 1194                          l1116 1232  
                        l1108 1228                          l1140 11D0                          l1038 11A4  
                        l1150 11DA                          l1142 11D2                          l1134 11C8  
                        l1320 10AE                          l1312 1076                          l1304 0F98  
                        l1152 11DC                          l1144 11D4                          l1136 11CC  
                        l1090 115E                          l1322 10BE                          l1314 1084  
                        l1330 0E02                          l1306 0FAA                          l1162 1200  
                        l1154 11DE                          l1146 11D6                          l1138 11CE  
                        l1170 110E                          l1092 1160                          l1316 108A  
                        l1332 0E06                          l1324 0DC0                          l1180 0EE8  
                        l1308 0FAC                          l1164 1208                          l1156 11E0  
                        l1148 11D8                          l1172 111C                          l1094 1168  
                        l1350 0E72                          l1342 0E4A                          l1318 10A8  
                        l1334 0E08                          l1326 0DD4                          l1190 0F2E  
                        l1182 0EF0                          l1166 1210                          l1158 11E2  
                        l1174 113C                          l1096 116A                          l1088 1152  
                        l1360 0EA2                          l1352 0E82                          l1344 0E56  
                        l1336 0E18                          l1328 0DEA                          l1192 0F3C  
                        l1184 0F04                          l1176 0ECC                          l1098 1172  
                        l1370 0EC0                          l1362 0EA8                          l1354 0E88  
                        l1346 0E5C                          l1338 0E2E                          l1194 0F44  
                        l1186 0F12                          l1178 0EDA                          l1372 0EC6  
                        l1364 0EAE                          l1356 0E96                          l1348 0E6C  
                        l1188 0F1A                          l1284 0F4E                          l1710 0B40  
                        l1374 1252                          l1366 0EB4                          l1358 0E9C  
                        l1294 0F72                          l1286 0F5E                          l1278 0F4C  
                        l1720 0B64                          l1800 0894                          l1368 0EBA  
                        l1296 0F84                          l1288 0F60                          l1722 0B6A  
                        l1802 08AE                          l1298 0F86                          l1740 0BB0  
                        l1724 0B6C                          l1716 0B42                          l1708 0B36  
                        l1476 1260                          l1812 08C8                          l1804 08B0  
                        l1670 0C40                          l1742 0BB2                          l1734 0B88  
                        l1726 0B7C                          l1718 0B5A                          l1830 092C  
                        l1814 08E2                          l1806 08C4                          l1680 0C7A  
                        l1672 0C46                          l1760 0BF8                          l1752 0BCE  
                        l1744 0BC2                          l1736 0BA0                          l1728 0B86  
                        l1840 094C                          l1824 08FC                          l1816 08E4  
                        l1690 0CB8                          l1682 0C84                          l1674 0C50  
                        l1666 0C1E                          l1762 0C08                          l1754 0BE6  
                        l1746 0BCC                          l1738 0BAA                          l1850 097E  
                        l1842 0960                          l1826 0916                          l1818 08F8  
                        l1770 082A                          l1692 0CCA                          l1684 0C96  
                        l1676 0C62                          l1668 0C2E                          l1764 0C12  
                        l1756 0BF0                          l1860 0998                          l1852 0980  
                        l1836 0930                          l1828 0918                          l1780 0848  
                        l1940 0A10                          l1694 0CDC                          l1686 0CA8  
                        l1678 0C74                          l1766 0C16                          l1758 0BF6  
                        l1862 09B2                          l1854 0994                          l1838 094A  
                        l1790 087A                          l1782 085C                          l1870 10C4  
                        l1950 0A40                          l1942 0A20                          l1696 0CE2  
                        l1688 0CAE                          l1864 09B4                          l1848 0964  
                        l1792 087C                          l1776 0830                          l1872 10D0  
                        l1960 0A6E                          l1952 0A4A                          l1944 0A2A  
                        l1794 0890                          l1778 0846                          l1874 10E6  
                        l1970 0AB4                          l1962 0A76                          l1954 0A52  
                        l1946 0A38                          l1788 0860                          l1868 09C8  
                        l1876 10EA                          l1980 0AE6                          l1972 0AB8  
                        l1964 0A8E                          l1956 0A5C                          l1948 0A3C  
                        l1990 0B2A                          l1982 0AF6                          l1974 0AC6  
                        l1966 0A92                          l1958 0A64                          l1984 0AFA  
                        l1976 0AD4                          l1968 0AA6                          l1986 0B0A  
                        l1978 0AD8                          l1988 0B1A                          STR_1 0819  
                        STR_2 0811                          STR_3 0820               ?_Lcd_CGRAM_Init 0001  
                        u1100 0AB4                          u1101 0AB0                          u1110 0AC6  
                        u1111 0AC2                          u1120 0AD4                          u1121 0AD0  
                        u1130 0AE6                          u1131 0AE2                          u1140 0B0A  
                        u1141 0B06                          u1150 0B1A                          u1207 0E22  
                        u1151 0B16                          u1160 0B2A                          u1217 0E3A  
                        u1161 0B26                          u1090 0AA6                          u1227 0E62  
                        u1091 0AA2                          u1237 0E78                          _LATA 0F89  
                        _LATB 0F8A                          u1247 0E8E                          _LATC 0F8B  
                        _LATD 0F8C                          u1257 116C                          u1177 0A80  
                        _LATE 0F8D                          u1267 117E                          u1187 0DDE  
                        u1277 119A                          u1197 0DF6                          _Stop 0008  
           ?_Lcd_Write_String 0011                          _main 0A10           ??_Actualizar_Matriz 0015  
                        fsr2h 0FDA                          indf2 0FDF                          fsr2l 0FD9  
                        btemp 002F                          start 00D8            ??_Lcd_Write_String 0012  
             __end_of_Lcd_Cmd 11A8                  ___param_bank 0000                         ?_Stop 0001  
                       ?_main 0001                         _EEADR 0FA9              ?_Lcd_CGRAM_Close 0001  
   __end_of_Actualizar_Matriz 0C1C                         _T0CON 0FD5                         _NEGRA 002C  
                       i1l230 105C                         i1l222 1030                         i1l240 11C6  
                       i1l234 1072                         i1l226 1046                         i1l164 00C8  
                       i1l237 1074                         i1l253 0DBE                         _METAL 002E  
                       i1l249 0DBE                         i1l274 127A                         i2l169 1222  
           ?i1_Lcd_Set_Cursor 0004                         _TMR0L 0FD6                         _PORTB 0F81  
                       _TRISA 0F92                         _TRISB 0F93                         _TRISC 0F94  
                       _TRISD 0F95                         _TRISE 0F96                         _Fila1 0026  
                       _Fila2 0022                         _Fila3 001E                   ?i1_Lcd_Port 0001  
          ??i1_Lcd_Set_Cursor 0005                         _dejar 0DC0                         tablat 0FF5  
                       ttemp5 0030                         ttemp6 0033                         ttemp7 0037  
                       status 0FD8                         wtemp8 0030                   LowISR@dummy 000C  
            __end_of_Lcd_Init 0ECC              __end_of_Lcd_Port 101A        Actualizar_Matriz@i_682 0016  
      Actualizar_Matriz@i_683 0017               __initialization 11E6                  __end_of_Stop 1226  
                __end_of_main 0B36                        ??_Stop 0001                   _Lcd_NoBlink 1236  
                      ??_main 001C                 __activetblptr 0002       Lcd_CGRAM_CreateChar@add 0013  
                 estado@i_691 000F                   estado@i_692 0010                        ?_dejar 0001  
                      _EEDATA 0FA8                        _BLANCA 002D                        _EECON2 0FA7  
                      i1l1700 11AC                        i1l1702 11B2                        i1l1704 11B4  
                      i1l1650 101C                        i1l1706 11C4                        i1l1660 1056  
                      i1l1652 102A                        i1l1900 0D80                        i1l1662 105E  
                      i1l1654 1032                        i1l1902 0D8A                        i1l1910 0026  
                      i1l1664 106C                        i1l1656 1040                        i1l1904 0D9C  
                      i1l1920 005E                        i1l1912 002A                        i1l1658 1048  
                      i1l1906 0DAE                        i1l1930 009C                        i1l1922 006C  
                      i1l1914 0038                        i1l1908 0DB4                        i1l1932 009E  
                      i1l1924 007C                        i1l1916 004C                        i1l1934 00AC  
                      i1l1926 007E                        i1l1918 005C                        i1l1768 126E  
                      i1l1880 0D00                        i1l1936 00BC                        i1l1928 008C  
                      i1l1698 11AA                        i1l1890 0D46                        i1l1882 0D12  
                      i1l1938 00BE                        i1l1892 0D4C                        i1l1884 0D18  
                      i1l1894 0D56                        i1l1886 0D22                        i1l1878 0CF0  
                      i1l1896 0D68                        i1l1888 0D34                        i1l1898 0D7A  
                      i2l1580 1216                        _INTCON 0FF2                     ??_Lcd_Cmd 000E  
            __end_of_detectar 0F4C                        _LowISR 0018             __end_ofi1_Lcd_Cmd 11C8  
            __end_of_figura_1 0811              __end_of_figura_2 0809  Lcd_CGRAM_CreateChar@chardata 0011  
                      _estado 0F4C              __end_of_init_int 1214                        clear_0 11EC  
                      _reposo 110E                        isa$std 0001                  __mediumconst 0800  
                      tblptrh 0FF7                        tblptrl 0FF6                        tblptru 0FF8  
             Lcd_Set_Cursor@a 0011               Lcd_Set_Cursor@b 0010               Lcd_Set_Cursor@y 0013  
             Lcd_Set_Cursor@z 0012     Lcd_CGRAM_CreateChar@i_871 0015     Lcd_CGRAM_CreateChar@i_872 0016  
   Lcd_CGRAM_CreateChar@i_873 0017     Lcd_CGRAM_CreateChar@i_874 0018     Lcd_CGRAM_CreateChar@i_875 0019  
   Lcd_CGRAM_CreateChar@i_876 001A     Lcd_CGRAM_CreateChar@i_877 001B                    __accesstop 0060  
     __end_of__initialization 11F2             __end_of_Lcd_Clear 1252             __end_of_Lcd_Blink 127C  
               ___rparam_used 0001                __pcstackCOMRAM 0001                 __end_of_dejar 0E4A  
              _Lcd_Set_Cursor 0C1C              ??_Lcd_CGRAM_Init 0010             __end_of_Modificar 10C4  
                   ?_Lcd_Init 0001                       ??_dejar 000D                     ?_Lcd_Port 0001  
                     ?_LowISR 0001                       ?_estado 0001        __end_of_Lcd_Set_Cursor 0CEE  
                     ?_reposo 0001                  ??i1_Lcd_Port 0001                       i1u73_20 102A  
                     i1u73_21 1026                       i1u74_20 1040                       i1u74_21 103C  
                     i1u75_20 1056                       i1u75_21 1052                       i1u76_20 106C  
                     i1u76_21 1068                       i1u96_20 0D00                       i1u96_21 0CFC  
                     i1u97_20 0D34                       i1u97_21 0D30                       i1u98_20 0D68  
                     i1u98_21 0D64                       i1u99_20 0D9C                       i1u99_21 0D98  
                  ??_Lcd_Init 0010                     ?_detectar 0001                    ??_Lcd_Port 000D  
              _Lcd_Write_Char 1150                       _Lcd_Cmd 1188                     ?_init_int 0001  
                     __Hparam 0000                       __Lparam 0000            __end_ofi1_Lcd_Port 1076  
                __psmallconst 0800                       __pcinit 11E6                    _init_ports 11C8  
                     __ramtop 0800               ?_Lcd_Set_Cursor 0010                  ?_Lcd_NoBlink 0001  
                     __ptext0 0A10                       __ptext1 110E                       __ptext2 11C8  
                     __ptext3 1200                       __ptext4 0F4C                       __ptext5 1226  
                     __ptext6 0ECC                       __ptext7 0DC0                       __ptext8 1076  
                     __ptext9 1236                     _T0CONbits 0FD5                    ??_detectar 000D  
      __end_of_Lcd_Write_Char 1188                __pintcode_body 1214          end_of_initialization 11F2  
                     estado@i 000E                 ??_EEPROM_Read 000D                 __Lmediumconst 0000  
                  ??_init_int 000D                       int_func 1214                       postinc0 0FEE  
                   Lcd_Port@a 000D                     i1_Lcd_Cmd 11A8                     _PORTAbits 0F80  
                   _PORTBbits 0F81                     _PORTCbits 0F82                     _TRISCbits 0F94  
                   _TRISDbits 0F95               ?_Lcd_Write_Char 0001             Lcd_Write_String@a 0011  
           Lcd_Write_String@i 0013           __end_of_EEPROM_Read 1236                __end_of_LowISR 00D8  
                   _Lcd_Clear 1244                     _Lcd_Blink 126E                    ?i1_Lcd_Cmd 0001  
            _Lcd_Write_String 10C4                   ?_init_ports 0001                __end_of_estado 0FBE  
__end_of_Lcd_CGRAM_CreateChar 0A10                __end_of_reposo 1150           start_initialization 11E6  
                   _Modificar 1076              i1_Lcd_Set_Cursor 0CEE             ??_Lcd_CGRAM_Close 0010  
                    ??_LowISR 0009                    ?_Lcd_Clear 0001                    ?_Lcd_Blink 0001  
                    ??_estado 000E               Lcd_Write_Char@a 0010               Lcd_Write_Char@y 000F  
                    ??_reposo 000D                   __pbssCOMRAM 001E                    ?_Modificar 0001  
                    ?_Lcd_Cmd 0001                   _EEPROM_Read 1226              ??_Lcd_Set_Cursor 0011  
                   __pintcode 0008                   ??i1_Lcd_Cmd 0002          i1Lcd_Set_Cursor@temp 0008  
                 __pintcodelo 0018                   __smallconst 0800                      _LATCbits 0F8B  
                    _LATDbits 0F8C                      _LATEbits 0F8D          _Lcd_CGRAM_CreateChar 0828  
                    i1u100_20 0038                      i1u100_21 0034                      i1u101_20 004C  
                    i1u101_21 0048                      i1u102_20 005C                      i1u102_21 0058  
                    i1u103_20 006C                      i1u103_21 0068                      i1u104_20 007C  
                    i1u104_21 0078                      i1u105_20 008C                      i1u105_21 0088  
                    i1u106_20 009C                      i1u106_21 0098                      i1u107_20 00AC  
                    i1u107_21 00A8                      i1u108_20 00BC                      i1u108_21 00B8  
                    i1u128_27 11BA                      Lcd_Cmd@a 000F                      _PIR2bits 0FA1  
                 ??_Lcd_Clear 0010                      _RCONbits 0FD0                   ??_Lcd_Blink 0004  
                  _ADCON1bits 0FC1            Actualizar_Matriz@i 0015              ??_Lcd_Write_Char 000E  
                    _Lcd_Init 0E4A                      _Lcd_Port 0FBE                   _INTCON2bits 0FF1  
                 ??_Modificar 0011      __end_of_Lcd_Write_String 110E         ?_Lcd_CGRAM_CreateChar 0011  
                  _EECON1bits 0FA6                      __Hrparam 0000                      __Lrparam 0000  
                ??_init_ports 000D      __end_ofi1_Lcd_Set_Cursor 0DC0             i1Lcd_Set_Cursor@a 0005  
           i1Lcd_Set_Cursor@b 0004             i1Lcd_Set_Cursor@y 0007             i1Lcd_Set_Cursor@z 0006  
             _Lcd_CGRAM_Close 1260                      _detectar 0ECC                      __ptext10 10C4  
                    __ptext11 0E4A                      __ptext20 0FBE                      __ptext12 1244  
                    __ptext13 1252                      __ptext22 0CEE                      __ptext14 0828  
                    __ptext23 126E                      __ptext15 1260                      __ptext24 11A8  
                    __ptext16 0B36                      __ptext25 101A                      __ptext17 1150  
                    __ptext18 0C1C                      __ptext19 1188                      _figura_1 0809  
                    _figura_2 0801                      _init_int 1200            __end_of_init_ports 11E6  
                 i1Lcd_Port@a 0001                      isa$xinst 0000                      int$flags 002F  
                  _INTCONbits 0FF2            Lcd_Write_Char@temp 000E                      intlevel1 0000  
                    intlevel2 0000        ??_Lcd_CGRAM_CreateChar 0012                _Lcd_CGRAM_Init 1252  
                ?_EEPROM_Read 0001                    i1Lcd_Cmd@a 0003            Lcd_Set_Cursor@temp 0014  
               ??_Lcd_NoBlink 0010       __end_of_Lcd_CGRAM_Close 126E                    i1_Lcd_Port 101A  
      __end_of_Lcd_CGRAM_Init 1260                EEPROM_Read@dir 000D  
