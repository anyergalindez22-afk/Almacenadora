

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Wed Oct 01 02:21:56 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
    17                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    18                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    20                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    21   000000                     
    22                           ; Generated 17/01/2025 GMT
    23                           ; 
    24                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC18F4550 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56   000FE0                     bsr             equ	4064
    57   000FE9                     fsr0            equ	4073
    58   000FEA                     fsr0h           equ	4074
    59   000FE9                     fsr0l           equ	4073
    60   000FE1                     fsr1            equ	4065
    61   000FE2                     fsr1h           equ	4066
    62   000FE1                     fsr1l           equ	4065
    63   000FD9                     fsr2            equ	4057
    64   000FDA                     fsr2h           equ	4058
    65   000FD9                     fsr2l           equ	4057
    66   000FEF                     indf0           equ	4079
    67   000FE7                     indf1           equ	4071
    68   000FDF                     indf2           equ	4063
    69   000FF2                     intcon          equ	4082
    70   000000                     nvmcon          equ	0
    71   000FF9                     pcl             equ	4089
    72   000FFA                     pclath          equ	4090
    73   000FFB                     pclatu          equ	4091
    74   000FEB                     plusw0          equ	4075
    75   000FE3                     plusw1          equ	4067
    76   000FDB                     plusw2          equ	4059
    77   000FED                     postdec0        equ	4077
    78   000FE5                     postdec1        equ	4069
    79   000FDD                     postdec2        equ	4061
    80   000FEE                     postinc0        equ	4078
    81   000FE6                     postinc1        equ	4070
    82   000FDE                     postinc2        equ	4062
    83   000FEC                     preinc0         equ	4076
    84   000FE4                     preinc1         equ	4068
    85   000FDC                     preinc2         equ	4060
    86   000FF3                     prod            equ	4083
    87   000FF4                     prodh           equ	4084
    88   000FF3                     prodl           equ	4083
    89   000FD8                     status          equ	4056
    90   000FF5                     tablat          equ	4085
    91   000FF6                     tblptr          equ	4086
    92   000FF7                     tblptrh         equ	4087
    93   000FF6                     tblptrl         equ	4086
    94   000FF8                     tblptru         equ	4088
    95   000FFD                     tosl            equ	4093
    96   000FE8                     wreg            equ	4072
    97   000F62                     SPPDATA         equ	3938	;# 
    98   000F63                     SPPCFG          equ	3939	;# 
    99   000F64                     SPPEPS          equ	3940	;# 
   100   000F65                     SPPCON          equ	3941	;# 
   101   000F66                     UFRM            equ	3942	;# 
   102   000F66                     UFRML           equ	3942	;# 
   103   000F67                     UFRMH           equ	3943	;# 
   104   000F68                     UIR             equ	3944	;# 
   105   000F69                     UIE             equ	3945	;# 
   106   000F6A                     UEIR            equ	3946	;# 
   107   000F6B                     UEIE            equ	3947	;# 
   108   000F6C                     USTAT           equ	3948	;# 
   109   000F6D                     UCON            equ	3949	;# 
   110   000F6E                     UADDR           equ	3950	;# 
   111   000F6F                     UCFG            equ	3951	;# 
   112   000F70                     UEP0            equ	3952	;# 
   113   000F71                     UEP1            equ	3953	;# 
   114   000F72                     UEP2            equ	3954	;# 
   115   000F73                     UEP3            equ	3955	;# 
   116   000F74                     UEP4            equ	3956	;# 
   117   000F75                     UEP5            equ	3957	;# 
   118   000F76                     UEP6            equ	3958	;# 
   119   000F77                     UEP7            equ	3959	;# 
   120   000F78                     UEP8            equ	3960	;# 
   121   000F79                     UEP9            equ	3961	;# 
   122   000F7A                     UEP10           equ	3962	;# 
   123   000F7B                     UEP11           equ	3963	;# 
   124   000F7C                     UEP12           equ	3964	;# 
   125   000F7D                     UEP13           equ	3965	;# 
   126   000F7E                     UEP14           equ	3966	;# 
   127   000F7F                     UEP15           equ	3967	;# 
   128   000F80                     PORTA           equ	3968	;# 
   129   000F81                     PORTB           equ	3969	;# 
   130   000F82                     PORTC           equ	3970	;# 
   131   000F83                     PORTD           equ	3971	;# 
   132   000F84                     PORTE           equ	3972	;# 
   133   000F89                     LATA            equ	3977	;# 
   134   000F8A                     LATB            equ	3978	;# 
   135   000F8B                     LATC            equ	3979	;# 
   136   000F8C                     LATD            equ	3980	;# 
   137   000F8D                     LATE            equ	3981	;# 
   138   000F92                     TRISA           equ	3986	;# 
   139   000F92                     DDRA            equ	3986	;# 
   140   000F93                     TRISB           equ	3987	;# 
   141   000F93                     DDRB            equ	3987	;# 
   142   000F94                     TRISC           equ	3988	;# 
   143   000F94                     DDRC            equ	3988	;# 
   144   000F95                     TRISD           equ	3989	;# 
   145   000F95                     DDRD            equ	3989	;# 
   146   000F96                     TRISE           equ	3990	;# 
   147   000F96                     DDRE            equ	3990	;# 
   148   000F9B                     OSCTUNE         equ	3995	;# 
   149   000F9D                     PIE1            equ	3997	;# 
   150   000F9E                     PIR1            equ	3998	;# 
   151   000F9F                     IPR1            equ	3999	;# 
   152   000FA0                     PIE2            equ	4000	;# 
   153   000FA1                     PIR2            equ	4001	;# 
   154   000FA2                     IPR2            equ	4002	;# 
   155   000FA6                     EECON1          equ	4006	;# 
   156   000FA7                     EECON2          equ	4007	;# 
   157   000FA8                     EEDATA          equ	4008	;# 
   158   000FA9                     EEADR           equ	4009	;# 
   159   000FAB                     RCSTA           equ	4011	;# 
   160   000FAB                     RCSTA1          equ	4011	;# 
   161   000FAC                     TXSTA           equ	4012	;# 
   162   000FAC                     TXSTA1          equ	4012	;# 
   163   000FAD                     TXREG           equ	4013	;# 
   164   000FAD                     TXREG1          equ	4013	;# 
   165   000FAE                     RCREG           equ	4014	;# 
   166   000FAE                     RCREG1          equ	4014	;# 
   167   000FAF                     SPBRG           equ	4015	;# 
   168   000FAF                     SPBRG1          equ	4015	;# 
   169   000FB0                     SPBRGH          equ	4016	;# 
   170   000FB1                     T3CON           equ	4017	;# 
   171   000FB2                     TMR3            equ	4018	;# 
   172   000FB2                     TMR3L           equ	4018	;# 
   173   000FB3                     TMR3H           equ	4019	;# 
   174   000FB4                     CMCON           equ	4020	;# 
   175   000FB5                     CVRCON          equ	4021	;# 
   176   000FB6                     ECCP1AS         equ	4022	;# 
   177   000FB6                     CCP1AS          equ	4022	;# 
   178   000FB7                     ECCP1DEL        equ	4023	;# 
   179   000FB7                     CCP1DEL         equ	4023	;# 
   180   000FB8                     BAUDCON         equ	4024	;# 
   181   000FB8                     BAUDCTL         equ	4024	;# 
   182   000FBA                     CCP2CON         equ	4026	;# 
   183   000FBB                     CCPR2           equ	4027	;# 
   184   000FBB                     CCPR2L          equ	4027	;# 
   185   000FBC                     CCPR2H          equ	4028	;# 
   186   000FBD                     CCP1CON         equ	4029	;# 
   187   000FBD                     ECCP1CON        equ	4029	;# 
   188   000FBE                     CCPR1           equ	4030	;# 
   189   000FBE                     CCPR1L          equ	4030	;# 
   190   000FBF                     CCPR1H          equ	4031	;# 
   191   000FC0                     ADCON2          equ	4032	;# 
   192   000FC1                     ADCON1          equ	4033	;# 
   193   000FC2                     ADCON0          equ	4034	;# 
   194   000FC3                     ADRES           equ	4035	;# 
   195   000FC3                     ADRESL          equ	4035	;# 
   196   000FC4                     ADRESH          equ	4036	;# 
   197   000FC5                     SSPCON2         equ	4037	;# 
   198   000FC6                     SSPCON1         equ	4038	;# 
   199   000FC7                     SSPSTAT         equ	4039	;# 
   200   000FC8                     SSPADD          equ	4040	;# 
   201   000FC9                     SSPBUF          equ	4041	;# 
   202   000FCA                     T2CON           equ	4042	;# 
   203   000FCB                     PR2             equ	4043	;# 
   204   000FCB                     MEMCON          equ	4043	;# 
   205   000FCC                     TMR2            equ	4044	;# 
   206   000FCD                     T1CON           equ	4045	;# 
   207   000FCE                     TMR1            equ	4046	;# 
   208   000FCE                     TMR1L           equ	4046	;# 
   209   000FCF                     TMR1H           equ	4047	;# 
   210   000FD0                     RCON            equ	4048	;# 
   211   000FD1                     WDTCON          equ	4049	;# 
   212   000FD2                     HLVDCON         equ	4050	;# 
   213   000FD2                     LVDCON          equ	4050	;# 
   214   000FD3                     OSCCON          equ	4051	;# 
   215   000FD5                     T0CON           equ	4053	;# 
   216   000FD6                     TMR0            equ	4054	;# 
   217   000FD6                     TMR0L           equ	4054	;# 
   218   000FD7                     TMR0H           equ	4055	;# 
   219   000FD8                     STATUS          equ	4056	;# 
   220   000FD9                     FSR2            equ	4057	;# 
   221   000FD9                     FSR2L           equ	4057	;# 
   222   000FDA                     FSR2H           equ	4058	;# 
   223   000FDB                     PLUSW2          equ	4059	;# 
   224   000FDC                     PREINC2         equ	4060	;# 
   225   000FDD                     POSTDEC2        equ	4061	;# 
   226   000FDE                     POSTINC2        equ	4062	;# 
   227   000FDF                     INDF2           equ	4063	;# 
   228   000FE0                     BSR             equ	4064	;# 
   229   000FE1                     FSR1            equ	4065	;# 
   230   000FE1                     FSR1L           equ	4065	;# 
   231   000FE2                     FSR1H           equ	4066	;# 
   232   000FE3                     PLUSW1          equ	4067	;# 
   233   000FE4                     PREINC1         equ	4068	;# 
   234   000FE5                     POSTDEC1        equ	4069	;# 
   235   000FE6                     POSTINC1        equ	4070	;# 
   236   000FE7                     INDF1           equ	4071	;# 
   237   000FE8                     WREG            equ	4072	;# 
   238   000FE9                     FSR0            equ	4073	;# 
   239   000FE9                     FSR0L           equ	4073	;# 
   240   000FEA                     FSR0H           equ	4074	;# 
   241   000FEB                     PLUSW0          equ	4075	;# 
   242   000FEC                     PREINC0         equ	4076	;# 
   243   000FED                     POSTDEC0        equ	4077	;# 
   244   000FEE                     POSTINC0        equ	4078	;# 
   245   000FEF                     INDF0           equ	4079	;# 
   246   000FF0                     INTCON3         equ	4080	;# 
   247   000FF1                     INTCON2         equ	4081	;# 
   248   000FF2                     INTCON          equ	4082	;# 
   249   000FF3                     PROD            equ	4083	;# 
   250   000FF3                     PRODL           equ	4083	;# 
   251   000FF4                     PRODH           equ	4084	;# 
   252   000FF5                     TABLAT          equ	4085	;# 
   253   000FF6                     TBLPTR          equ	4086	;# 
   254   000FF6                     TBLPTRL         equ	4086	;# 
   255   000FF7                     TBLPTRH         equ	4087	;# 
   256   000FF8                     TBLPTRU         equ	4088	;# 
   257   000FF9                     PCLAT           equ	4089	;# 
   258   000FF9                     PC              equ	4089	;# 
   259   000FF9                     PCL             equ	4089	;# 
   260   000FFA                     PCLATH          equ	4090	;# 
   261   000FFB                     PCLATU          equ	4091	;# 
   262   000FFC                     STKPTR          equ	4092	;# 
   263   000FFD                     TOS             equ	4093	;# 
   264   000FFD                     TOSL            equ	4093	;# 
   265   000FFE                     TOSH            equ	4094	;# 
   266   000FFF                     TOSU            equ	4095	;# 
   267   000F81                     _PORTBbits      set	3969
   268   000F8B                     _LATCbits       set	3979
   269   000FD6                     _TMR0L          set	4054
   270   000F82                     _PORTCbits      set	3970
   271   000F80                     _PORTAbits      set	3968
   272   000F8C                     _LATDbits       set	3980
   273   000FD5                     _T0CONbits      set	4053
   274   000FF2                     _INTCONbits     set	4082
   275   000FF1                     _INTCON2bits    set	4081
   276   000FF2                     _INTCON         set	4082
   277   000FD5                     _T0CON          set	4053
   278   000FD0                     _RCONbits       set	4048
   279   000F8D                     _LATE           set	3981
   280   000F8C                     _LATD           set	3980
   281   000F8B                     _LATC           set	3979
   282   000F8A                     _LATB           set	3978
   283   000F89                     _LATA           set	3977
   284   000F94                     _TRISCbits      set	3988
   285   000F94                     _TRISC          set	3988
   286   000F96                     _TRISE          set	3990
   287   000F95                     _TRISD          set	3989
   288   000F92                     _TRISA          set	3986
   289   000F93                     _TRISB          set	3987
   290   000FC1                     _ADCON1bits     set	4033
   291                           
   292                           ; #config settings
   293                           
   294                           	psect	cinit
   295   000A10                     __pcinit:
   296                           	callstack 0
   297   000A10                     start_initialization:
   298                           	callstack 0
   299   000A10                     __initialization:
   300                           	callstack 0
   301                           
   302                           ; Clear objects allocated to COMRAM (3 bytes)
   303   000A10  6A07               	clrf	(__pbssCOMRAM+2)& (0+255),c
   304   000A12  6A06               	clrf	(__pbssCOMRAM+1)& (0+255),c
   305   000A14  6A05               	clrf	__pbssCOMRAM& (0+255),c
   306   000A16                     end_of_initialization:
   307                           	callstack 0
   308   000A16                     __end_of__initialization:
   309                           	callstack 0
   310   000A16  9008               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   311   000A18  9208               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   312   000A1A  0100               	movlb	0
   313   000A1C  EF01  F004         	goto	_main	;jump to C main() function
   314                           
   315                           	psect	bssCOMRAM
   316   000005                     __pbssCOMRAM:
   317                           	callstack 0
   318   000005                     _NEGRA:
   319                           	callstack 0
   320   000005                     	ds	1
   321   000006                     _BLANCA:
   322                           	callstack 0
   323   000006                     	ds	1
   324   000007                     _METAL:
   325                           	callstack 0
   326   000007                     	ds	1
   327                           
   328                           	psect	cstackCOMRAM
   329   000001                     __pcstackCOMRAM:
   330                           	callstack 0
   331   000001                     ??_dejar:
   332                           
   333                           ; 1 bytes @ 0x0
   334   000001                     	ds	2
   335   000003                     ??_main:
   336                           
   337                           ; 1 bytes @ 0x2
   338   000003                     	ds	2
   339                           
   340 ;;
   341 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   342 ;;
   343 ;; *************** function _main *****************
   344 ;; Defined at:
   345 ;;		line 121 in file "ASCENSOR.c"
   346 ;; Parameters:    Size  Location     Type
   347 ;;		None
   348 ;; Auto vars:     Size  Location     Type
   349 ;;		None
   350 ;; Return value:  Size  Location     Type
   351 ;;                  1    wreg      void 
   352 ;; Registers used:
   353 ;;		wreg, status,2, status,0, cstack
   354 ;; Tracked objects:
   355 ;;		On entry : 0/0
   356 ;;		On exit  : 0/0
   357 ;;		Unchanged: 0/0
   358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   359 ;;      Params:         0       0       0       0       0       0       0       0       0
   360 ;;      Locals:         0       0       0       0       0       0       0       0       0
   361 ;;      Temps:          2       0       0       0       0       0       0       0       0
   362 ;;      Totals:         2       0       0       0       0       0       0       0       0
   363 ;;Total ram usage:        2 bytes
   364 ;; Hardware stack levels required when called: 2
   365 ;; This function calls:
   366 ;;		_dejar
   367 ;;		_detectar
   368 ;;		_init_int
   369 ;;		_init_ports
   370 ;;		_reposo
   371 ;; This function is called by:
   372 ;;		Startup code after reset
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376                           	psect	text0
   377   000802                     __ptext0:
   378                           	callstack 0
   379   000802                     _main:
   380                           	callstack 29
   381   000802                     
   382                           ;ASCENSOR.c: 122:     init_ports();
   383   000802  ECF0  F004         	call	_init_ports	;wreg free
   384                           
   385                           ;ASCENSOR.c: 123:     init_int();
   386   000806  EC10  F005         	call	_init_int	;wreg free
   387   00080A                     
   388                           ;ASCENSOR.c: 124:     _delay((unsigned long)((200)*(4000000/4000.0)));
   389   00080A  0E02               	movlw	2
   390   00080C  6E04               	movwf	(??_main+1)^0,c
   391   00080E  0E04               	movlw	4
   392   000810  6E03               	movwf	??_main^0,c
   393   000812  0EBA               	movlw	186
   394   000814                     u197:
   395   000814  2EE8               	decfsz	wreg,f,c
   396   000816  D7FE               	bra	u197
   397   000818  2E03               	decfsz	??_main^0,f,c
   398   00081A  D7FC               	bra	u197
   399   00081C  2E04               	decfsz	(??_main+1)^0,f,c
   400   00081E  D7FA               	bra	u197
   401   000820  D000               	nop2	
   402   000822  EF25  F004         	goto	l881
   403   000826                     l102:
   404                           
   405                           ;ASCENSOR.c: 128:   if(PORTAbits.RA2==1 || PORTAbits.RA1==1){
   406   000826  B480               	btfsc	128,2,c	;volatile
   407   000828  EF18  F004         	goto	u131
   408   00082C  EF1A  F004         	goto	u130
   409   000830                     u131:
   410   000830  EF21  F004         	goto	l879
   411   000834                     u130:
   412   000834  A280               	btfss	128,1,c	;volatile
   413   000836  EF1F  F004         	goto	u141
   414   00083A  EF21  F004         	goto	u140
   415   00083E                     u141:
   416   00083E  EF25  F004         	goto	l881
   417   000842                     u140:
   418   000842                     l879:
   419                           
   420                           ;ASCENSOR.c: 129:       reposo();
   421   000842  ECCF  F004         	call	_reposo	;wreg free
   422   000846  EF25  F004         	goto	l881
   423   00084A                     l101:
   424   00084A                     l881:
   425                           
   426                           ;ASCENSOR.c: 127:     while(PORTBbits.RB0==1){
   427   00084A  B081               	btfsc	129,0,c	;volatile
   428   00084C  EF2A  F004         	goto	u151
   429   000850  EF2C  F004         	goto	u150
   430   000854                     u151:
   431   000854  EF13  F004         	goto	l102
   432   000858                     u150:
   433   000858                     
   434                           ;ASCENSOR.c: 132:     detectar();
   435   000858  EC8F  F004         	call	_detectar	;wreg free
   436   00085C                     
   437                           ;ASCENSOR.c: 133:     if(METAL==1 || BLANCA==1 || NEGRA==1){
   438   00085C  0407               	decf	_METAL^0,w,c
   439   00085E  B4D8               	btfsc	status,2,c
   440   000860  EF34  F004         	goto	u161
   441   000864  EF36  F004         	goto	u160
   442   000868                     u161:
   443   000868  EF46  F004         	goto	l891
   444   00086C                     u160:
   445   00086C  0406               	decf	_BLANCA^0,w,c
   446   00086E  B4D8               	btfsc	status,2,c
   447   000870  EF3C  F004         	goto	u171
   448   000874  EF3E  F004         	goto	u170
   449   000878                     u171:
   450   000878  EF46  F004         	goto	l891
   451   00087C                     u170:
   452   00087C  0405               	decf	_NEGRA^0,w,c
   453   00087E  A4D8               	btfss	status,2,c
   454   000880  EF44  F004         	goto	u181
   455   000884  EF46  F004         	goto	u180
   456   000888                     u181:
   457   000888  EF25  F004         	goto	l101
   458   00088C                     u180:
   459   00088C                     l891:
   460                           
   461                           ;ASCENSOR.c: 134:     dejar();
   462   00088C  EC4C  F004         	call	_dejar	;wreg free
   463                           
   464                           ;ASCENSOR.c: 135:      }
   465   000890  EF25  F004         	goto	l881
   466   000894  EF07  F000         	goto	start
   467   000898                     __end_of_main:
   468                           	callstack 0
   469                           
   470 ;; *************** function _reposo *****************
   471 ;; Defined at:
   472 ;;		line 69 in file "ASCENSOR.c"
   473 ;; Parameters:    Size  Location     Type
   474 ;;		None
   475 ;; Auto vars:     Size  Location     Type
   476 ;;		None
   477 ;; Return value:  Size  Location     Type
   478 ;;                  1    wreg      void 
   479 ;; Registers used:
   480 ;;		None
   481 ;; Tracked objects:
   482 ;;		On entry : 0/0
   483 ;;		On exit  : 0/0
   484 ;;		Unchanged: 0/0
   485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   486 ;;      Params:         0       0       0       0       0       0       0       0       0
   487 ;;      Locals:         0       0       0       0       0       0       0       0       0
   488 ;;      Temps:          0       0       0       0       0       0       0       0       0
   489 ;;      Totals:         0       0       0       0       0       0       0       0       0
   490 ;;Total ram usage:        0 bytes
   491 ;; Hardware stack levels used: 1
   492 ;; Hardware stack levels required when called: 1
   493 ;; This function calls:
   494 ;;		Nothing
   495 ;; This function is called by:
   496 ;;		_main
   497 ;; This function uses a non-reentrant model
   498 ;;
   499                           
   500                           	psect	text1
   501   00099E                     __ptext1:
   502                           	callstack 0
   503   00099E                     _reposo:
   504                           	callstack 29
   505   00099E                     
   506                           ;ASCENSOR.c: 70:  if(PORTAbits.RA2==1){
   507   00099E  A480               	btfss	128,2,c	;volatile
   508   0009A0  EFD4  F004         	goto	u11
   509   0009A4  EFD6  F004         	goto	u10
   510   0009A8                     u11:
   511   0009A8  EFDF  F004         	goto	l70
   512   0009AC                     u10:
   513   0009AC                     
   514                           ;ASCENSOR.c: 71:   LATDbits.LATD3=1;
   515   0009AC  868C               	bsf	140,3,c	;volatile
   516   0009AE                     l71:
   517   0009AE  B280               	btfsc	128,1,c	;volatile
   518   0009B0  EFDC  F004         	goto	u21
   519   0009B4  EFDE  F004         	goto	u20
   520   0009B8                     u21:
   521   0009B8  EFD7  F004         	goto	l71
   522   0009BC                     u20:
   523   0009BC                     
   524                           ;ASCENSOR.c: 73:      LATDbits.LATD3=0;
   525   0009BC  968C               	bcf	140,3,c	;volatile
   526   0009BE                     l70:
   527                           
   528                           ;ASCENSOR.c: 76:     if(PORTAbits.RA1==1){
   529   0009BE  A280               	btfss	128,1,c	;volatile
   530   0009C0  EFE4  F004         	goto	u31
   531   0009C4  EFE6  F004         	goto	u30
   532   0009C8                     u31:
   533   0009C8  EFEF  F004         	goto	l78
   534   0009CC                     u30:
   535   0009CC                     
   536                           ;ASCENSOR.c: 77:      LATDbits.LATD0=1;
   537   0009CC  808C               	bsf	140,0,c	;volatile
   538   0009CE                     l75:
   539   0009CE  B480               	btfsc	128,2,c	;volatile
   540   0009D0  EFEC  F004         	goto	u41
   541   0009D4  EFEE  F004         	goto	u40
   542   0009D8                     u41:
   543   0009D8  EFE7  F004         	goto	l75
   544   0009DC                     u40:
   545   0009DC                     
   546                           ;ASCENSOR.c: 79:      LATDbits.LATD0=0;
   547   0009DC  908C               	bcf	140,0,c	;volatile
   548   0009DE                     l78:
   549   0009DE  0012               	return		;funcret
   550   0009E0                     __end_of_reposo:
   551                           	callstack 0
   552                           
   553 ;; *************** function _init_ports *****************
   554 ;; Defined at:
   555 ;;		line 34 in file "ASCENSOR.c"
   556 ;; Parameters:    Size  Location     Type
   557 ;;		None
   558 ;; Auto vars:     Size  Location     Type
   559 ;;		None
   560 ;; Return value:  Size  Location     Type
   561 ;;                  1    wreg      void 
   562 ;; Registers used:
   563 ;;		wreg, status,2
   564 ;; Tracked objects:
   565 ;;		On entry : 0/0
   566 ;;		On exit  : 0/0
   567 ;;		Unchanged: 0/0
   568 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   569 ;;      Params:         0       0       0       0       0       0       0       0       0
   570 ;;      Locals:         0       0       0       0       0       0       0       0       0
   571 ;;      Temps:          0       0       0       0       0       0       0       0       0
   572 ;;      Totals:         0       0       0       0       0       0       0       0       0
   573 ;;Total ram usage:        0 bytes
   574 ;; Hardware stack levels used: 1
   575 ;; Hardware stack levels required when called: 1
   576 ;; This function calls:
   577 ;;		Nothing
   578 ;; This function is called by:
   579 ;;		_main
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           	psect	text2
   584   0009E0                     __ptext2:
   585                           	callstack 0
   586   0009E0                     _init_ports:
   587                           	callstack 29
   588   0009E0                     
   589                           ;ASCENSOR.c: 35:     ADCON1bits.PCFG=0x0F;
   590   0009E0  0E0F               	movlw	15
   591   0009E2  12C1               	iorwf	193,f,c	;volatile
   592   0009E4                     
   593                           ;ASCENSOR.c: 36:     TRISB=0XFF;
   594   0009E4  6893               	setf	147,c	;volatile
   595   0009E6                     
   596                           ;ASCENSOR.c: 37:     TRISA=0XFF;
   597   0009E6  6892               	setf	146,c	;volatile
   598   0009E8                     
   599                           ;ASCENSOR.c: 38:     TRISD=0X00;
   600   0009E8  6A95               	clrf	149,c	;volatile
   601   0009EA                     
   602                           ;ASCENSOR.c: 39:     TRISE=0X00;
   603   0009EA  6A96               	clrf	150,c	;volatile
   604   0009EC                     
   605                           ;ASCENSOR.c: 40:     TRISC=0XFF;
   606   0009EC  6894               	setf	148,c	;volatile
   607   0009EE                     
   608                           ;ASCENSOR.c: 41:     TRISCbits.RC0=0;
   609   0009EE  9094               	bcf	148,0,c	;volatile
   610   0009F0                     
   611                           ;ASCENSOR.c: 42:     TRISCbits.RC6=0;
   612   0009F0  9C94               	bcf	148,6,c	;volatile
   613   0009F2                     
   614                           ;ASCENSOR.c: 44:     LATA=0X00;
   615   0009F2  6A89               	clrf	137,c	;volatile
   616   0009F4                     
   617                           ;ASCENSOR.c: 45:     LATB=0X00;
   618   0009F4  6A8A               	clrf	138,c	;volatile
   619   0009F6                     
   620                           ;ASCENSOR.c: 46:     LATC=0X00;
   621   0009F6  6A8B               	clrf	139,c	;volatile
   622   0009F8                     
   623                           ;ASCENSOR.c: 47:     LATD=0X00;
   624   0009F8  6A8C               	clrf	140,c	;volatile
   625   0009FA                     
   626                           ;ASCENSOR.c: 48:     LATE=0X00;
   627   0009FA  6A8D               	clrf	141,c	;volatile
   628   0009FC  0012               	return		;funcret
   629   0009FE                     __end_of_init_ports:
   630                           	callstack 0
   631                           
   632 ;; *************** function _init_int *****************
   633 ;; Defined at:
   634 ;;		line 52 in file "ASCENSOR.c"
   635 ;; Parameters:    Size  Location     Type
   636 ;;		None
   637 ;; Auto vars:     Size  Location     Type
   638 ;;		None
   639 ;; Return value:  Size  Location     Type
   640 ;;                  1    wreg      void 
   641 ;; Registers used:
   642 ;;		wreg, status,2
   643 ;; Tracked objects:
   644 ;;		On entry : 0/0
   645 ;;		On exit  : 0/0
   646 ;;		Unchanged: 0/0
   647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   648 ;;      Params:         0       0       0       0       0       0       0       0       0
   649 ;;      Locals:         0       0       0       0       0       0       0       0       0
   650 ;;      Temps:          0       0       0       0       0       0       0       0       0
   651 ;;      Totals:         0       0       0       0       0       0       0       0       0
   652 ;;Total ram usage:        0 bytes
   653 ;; Hardware stack levels used: 1
   654 ;; Hardware stack levels required when called: 1
   655 ;; This function calls:
   656 ;;		Nothing
   657 ;; This function is called by:
   658 ;;		_main
   659 ;; This function uses a non-reentrant model
   660 ;;
   661                           
   662                           	psect	text3
   663   000A20                     __ptext3:
   664                           	callstack 0
   665   000A20                     _init_int:
   666                           	callstack 29
   667   000A20                     
   668                           ;ASCENSOR.c: 53:     RCONbits.IPEN= 1;
   669   000A20  8ED0               	bsf	208,7,c	;volatile
   670   000A22                     
   671                           ;ASCENSOR.c: 54:     T0CON = 0B01111000;
   672   000A22  0E78               	movlw	120
   673   000A24  6ED5               	movwf	213,c	;volatile
   674                           
   675                           ;ASCENSOR.c: 55:     INTCON = 0B10101000;
   676   000A26  0EA8               	movlw	168
   677   000A28  6EF2               	movwf	242,c	;volatile
   678   000A2A                     
   679                           ;ASCENSOR.c: 56:     INTCON2bits.TMR0IP = 1;
   680   000A2A  84F1               	bsf	241,2,c	;volatile
   681   000A2C  0012               	return		;funcret
   682   000A2E                     __end_of_init_int:
   683                           	callstack 0
   684                           
   685 ;; *************** function _detectar *****************
   686 ;; Defined at:
   687 ;;		line 84 in file "ASCENSOR.c"
   688 ;; Parameters:    Size  Location     Type
   689 ;;		None
   690 ;; Auto vars:     Size  Location     Type
   691 ;;		None
   692 ;; Return value:  Size  Location     Type
   693 ;;                  1    wreg      void 
   694 ;; Registers used:
   695 ;;		wreg, status,2
   696 ;; Tracked objects:
   697 ;;		On entry : 0/0
   698 ;;		On exit  : 0/0
   699 ;;		Unchanged: 0/0
   700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   701 ;;      Params:         0       0       0       0       0       0       0       0       0
   702 ;;      Locals:         0       0       0       0       0       0       0       0       0
   703 ;;      Temps:          0       0       0       0       0       0       0       0       0
   704 ;;      Totals:         0       0       0       0       0       0       0       0       0
   705 ;;Total ram usage:        0 bytes
   706 ;; Hardware stack levels used: 1
   707 ;; Hardware stack levels required when called: 1
   708 ;; This function calls:
   709 ;;		Nothing
   710 ;; This function is called by:
   711 ;;		_main
   712 ;; This function uses a non-reentrant model
   713 ;;
   714                           
   715                           	psect	text4
   716   00091E                     __ptext4:
   717                           	callstack 0
   718   00091E                     _detectar:
   719                           	callstack 29
   720   00091E                     
   721                           ;ASCENSOR.c: 85:  if(PORTCbits.RC1==0 && PORTCbits.RC2==1){
   722   00091E  B282               	btfsc	130,1,c	;volatile
   723   000920  EF94  F004         	goto	u51
   724   000924  EF96  F004         	goto	u50
   725   000928                     u51:
   726   000928  EFA4  F004         	goto	l81
   727   00092C                     u50:
   728   00092C  A482               	btfss	130,2,c	;volatile
   729   00092E  EF9B  F004         	goto	u61
   730   000932  EF9D  F004         	goto	u60
   731   000936                     u61:
   732   000936  EFA4  F004         	goto	l81
   733   00093A                     u60:
   734   00093A                     
   735                           ;ASCENSOR.c: 86:   METAL=1;
   736   00093A  0E01               	movlw	1
   737   00093C  6E07               	movwf	_METAL^0,c
   738                           
   739                           ;ASCENSOR.c: 87:   TMR0L= 250;
   740   00093E  0EFA               	movlw	250
   741   000940  6ED6               	movwf	214,c	;volatile
   742   000942                     
   743                           ;ASCENSOR.c: 88:         T0CONbits.TMR0ON = 1;
   744   000942  8ED5               	bsf	213,7,c	;volatile
   745                           
   746                           ;ASCENSOR.c: 89:  }
   747   000944  EFCE  F004         	goto	l86
   748   000948                     l81:
   749   000948  A282               	btfss	130,1,c	;volatile
   750   00094A  EFA9  F004         	goto	u71
   751   00094E  EFAB  F004         	goto	u70
   752   000952                     u71:
   753   000952  EFB9  F004         	goto	l83
   754   000956                     u70:
   755   000956  B482               	btfsc	130,2,c	;volatile
   756   000958  EFB0  F004         	goto	u81
   757   00095C  EFB2  F004         	goto	u80
   758   000960                     u81:
   759   000960  EFB9  F004         	goto	l83
   760   000964                     u80:
   761   000964                     
   762                           ;ASCENSOR.c: 91:   BLANCA=1;
   763   000964  0E01               	movlw	1
   764   000966  6E06               	movwf	_BLANCA^0,c
   765                           
   766                           ;ASCENSOR.c: 92:         TMR0L= 233;
   767   000968  0EE9               	movlw	233
   768   00096A  6ED6               	movwf	214,c	;volatile
   769   00096C                     
   770                           ;ASCENSOR.c: 93:         T0CONbits.TMR0ON = 1;
   771   00096C  8ED5               	bsf	213,7,c	;volatile
   772                           
   773                           ;ASCENSOR.c: 94:  }
   774   00096E  EFCE  F004         	goto	l86
   775   000972                     l83:
   776   000972  B282               	btfsc	130,1,c	;volatile
   777   000974  EFBE  F004         	goto	u91
   778   000978  EFC0  F004         	goto	u90
   779   00097C                     u91:
   780   00097C  EFCE  F004         	goto	l82
   781   000980                     u90:
   782   000980  B482               	btfsc	130,2,c	;volatile
   783   000982  EFC5  F004         	goto	u101
   784   000986  EFC7  F004         	goto	u100
   785   00098A                     u101:
   786   00098A  EFCE  F004         	goto	l82
   787   00098E                     u100:
   788   00098E                     
   789                           ;ASCENSOR.c: 96:   NEGRA=1;
   790   00098E  0E01               	movlw	1
   791   000990  6E05               	movwf	_NEGRA^0,c
   792                           
   793                           ;ASCENSOR.c: 97:         TMR0L= 222;
   794   000992  0EDE               	movlw	222
   795   000994  6ED6               	movwf	214,c	;volatile
   796   000996                     
   797                           ;ASCENSOR.c: 98:         T0CONbits.TMR0ON = 1;
   798   000996  8ED5               	bsf	213,7,c	;volatile
   799   000998  EFCE  F004         	goto	l86
   800   00099C                     l82:
   801   00099C                     l86:
   802   00099C  0012               	return		;funcret
   803   00099E                     __end_of_detectar:
   804                           	callstack 0
   805                           
   806 ;; *************** function _dejar *****************
   807 ;; Defined at:
   808 ;;		line 103 in file "ASCENSOR.c"
   809 ;; Parameters:    Size  Location     Type
   810 ;;		None
   811 ;; Auto vars:     Size  Location     Type
   812 ;;		None
   813 ;; Return value:  Size  Location     Type
   814 ;;                  1    wreg      void 
   815 ;; Registers used:
   816 ;;		wreg, status,2
   817 ;; Tracked objects:
   818 ;;		On entry : 0/0
   819 ;;		On exit  : 0/0
   820 ;;		Unchanged: 0/0
   821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   822 ;;      Params:         0       0       0       0       0       0       0       0       0
   823 ;;      Locals:         0       0       0       0       0       0       0       0       0
   824 ;;      Temps:          2       0       0       0       0       0       0       0       0
   825 ;;      Totals:         2       0       0       0       0       0       0       0       0
   826 ;;Total ram usage:        2 bytes
   827 ;; Hardware stack levels used: 1
   828 ;; Hardware stack levels required when called: 1
   829 ;; This function calls:
   830 ;;		Nothing
   831 ;; This function is called by:
   832 ;;		_main
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836                           	psect	text5
   837   000898                     __ptext5:
   838                           	callstack 0
   839   000898                     _dejar:
   840                           	callstack 29
   841   000898                     
   842                           ;ASCENSOR.c: 106:     LATDbits.LATD2= 1;
   843   000898  848C               	bsf	140,2,c	;volatile
   844   00089A                     l89:
   845   00089A  B48C               	btfsc	140,2,c	;volatile
   846   00089C  EF52  F004         	goto	u111
   847   0008A0  EF54  F004         	goto	u110
   848   0008A4                     u111:
   849   0008A4  EF4D  F004         	goto	l89
   850   0008A8                     u110:
   851   0008A8                     
   852                           ;ASCENSOR.c: 108:     _delay((unsigned long)((500)*(4000000/4000.0)));
   853   0008A8  0E03               	movlw	3
   854   0008AA  6E02               	movwf	(??_dejar+1)^0,c
   855   0008AC  0E8A               	movlw	138
   856   0008AE  6E01               	movwf	??_dejar^0,c
   857   0008B0  0E56               	movlw	86
   858   0008B2                     u207:
   859   0008B2  2EE8               	decfsz	wreg,f,c
   860   0008B4  D7FE               	bra	u207
   861   0008B6  2E01               	decfsz	??_dejar^0,f,c
   862   0008B8  D7FC               	bra	u207
   863   0008BA  2E02               	decfsz	(??_dejar+1)^0,f,c
   864   0008BC  D7FA               	bra	u207
   865   0008BE                     
   866                           ;ASCENSOR.c: 109:     LATCbits.LC0=1;
   867   0008BE  808B               	bsf	139,0,c	;volatile
   868                           
   869                           ;ASCENSOR.c: 110:     _delay((unsigned long)((250)*(4000000/4000.0)));
   870   0008C0  0E02               	movlw	2
   871   0008C2  6E02               	movwf	(??_dejar+1)^0,c
   872   0008C4  0E45               	movlw	69
   873   0008C6  6E01               	movwf	??_dejar^0,c
   874   0008C8  0EAA               	movlw	170
   875   0008CA                     u217:
   876   0008CA  2EE8               	decfsz	wreg,f,c
   877   0008CC  D7FE               	bra	u217
   878   0008CE  2E01               	decfsz	??_dejar^0,f,c
   879   0008D0  D7FC               	bra	u217
   880   0008D2  2E02               	decfsz	(??_dejar+1)^0,f,c
   881   0008D4  D7FA               	bra	u217
   882   0008D6                     
   883                           ;ASCENSOR.c: 111:     TMR0L= 253;
   884   0008D6  0EFD               	movlw	253
   885   0008D8  6ED6               	movwf	214,c	;volatile
   886   0008DA                     
   887                           ;ASCENSOR.c: 112:     T0CONbits.TMR0ON = 1;
   888   0008DA  8ED5               	bsf	213,7,c	;volatile
   889   0008DC                     
   890                           ;ASCENSOR.c: 113:     LATDbits.LATD3=1;
   891   0008DC  868C               	bsf	140,3,c	;volatile
   892   0008DE                     l92:
   893   0008DE  B68C               	btfsc	140,3,c	;volatile
   894   0008E0  EF74  F004         	goto	u121
   895   0008E4  EF76  F004         	goto	u120
   896   0008E8                     u121:
   897   0008E8  EF6F  F004         	goto	l92
   898   0008EC                     u120:
   899   0008EC                     
   900                           ;ASCENSOR.c: 115:     _delay((unsigned long)((500)*(4000000/4000.0)));
   901   0008EC  0E03               	movlw	3
   902   0008EE  6E02               	movwf	(??_dejar+1)^0,c
   903   0008F0  0E8A               	movlw	138
   904   0008F2  6E01               	movwf	??_dejar^0,c
   905   0008F4  0E56               	movlw	86
   906   0008F6                     u227:
   907   0008F6  2EE8               	decfsz	wreg,f,c
   908   0008F8  D7FE               	bra	u227
   909   0008FA  2E01               	decfsz	??_dejar^0,f,c
   910   0008FC  D7FC               	bra	u227
   911   0008FE  2E02               	decfsz	(??_dejar+1)^0,f,c
   912   000900  D7FA               	bra	u227
   913   000902                     
   914                           ;ASCENSOR.c: 116:     LATCbits.LC0=0;
   915   000902  908B               	bcf	139,0,c	;volatile
   916                           
   917                           ;ASCENSOR.c: 117:     _delay((unsigned long)((200)*(4000000/4000.0)));
   918   000904  0E02               	movlw	2
   919   000906  6E02               	movwf	(??_dejar+1)^0,c
   920   000908  0E04               	movlw	4
   921   00090A  6E01               	movwf	??_dejar^0,c
   922   00090C  0EBA               	movlw	186
   923   00090E                     u237:
   924   00090E  2EE8               	decfsz	wreg,f,c
   925   000910  D7FE               	bra	u237
   926   000912  2E01               	decfsz	??_dejar^0,f,c
   927   000914  D7FC               	bra	u237
   928   000916  2E02               	decfsz	(??_dejar+1)^0,f,c
   929   000918  D7FA               	bra	u237
   930   00091A  D000               	nop2	
   931   00091C  0012               	return		;funcret
   932   00091E                     __end_of_dejar:
   933                           	callstack 0
   934                           
   935 ;; *************** function _Stop *****************
   936 ;; Defined at:
   937 ;;		line 60 in file "ASCENSOR.c"
   938 ;; Parameters:    Size  Location     Type
   939 ;;		None
   940 ;; Auto vars:     Size  Location     Type
   941 ;;		None
   942 ;; Return value:  Size  Location     Type
   943 ;;                  1    wreg      void 
   944 ;; Registers used:
   945 ;;		None
   946 ;; Tracked objects:
   947 ;;		On entry : 0/0
   948 ;;		On exit  : 0/0
   949 ;;		Unchanged: 0/0
   950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   951 ;;      Params:         0       0       0       0       0       0       0       0       0
   952 ;;      Locals:         0       0       0       0       0       0       0       0       0
   953 ;;      Temps:          0       0       0       0       0       0       0       0       0
   954 ;;      Totals:         0       0       0       0       0       0       0       0       0
   955 ;;Total ram usage:        0 bytes
   956 ;; Hardware stack levels used: 1
   957 ;; This function calls:
   958 ;;		Nothing
   959 ;; This function is called by:
   960 ;;		Interrupt level 2
   961 ;; This function uses a non-reentrant model
   962 ;;
   963                           
   964                           	psect	intcode
   965   000008                     __pintcode:
   966                           	callstack 0
   967   000008                     _Stop:
   968                           	callstack 29
   969                           
   970                           ;incstack = 0
   971   000008  8208               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   972   00000A  EDFF  F004         	call	int_func,f	;refresh shadow registers
   973                           
   974                           	psect	intcode_body
   975   0009FE                     __pintcode_body:
   976                           	callstack 29
   977   0009FE                     int_func:
   978                           	callstack 29
   979   0009FE  0006               	pop		; remove dummy address from shadow register refresh
   980   000A00                     
   981                           ;ASCENSOR.c: 61: INTCONbits.GIEH = 0;
   982   000A00  9EF2               	bcf	242,7,c	;volatile
   983                           
   984                           ;ASCENSOR.c: 62: T0CONbits.TMR0ON = 0;
   985   000A02  9ED5               	bcf	213,7,c	;volatile
   986                           
   987                           ;ASCENSOR.c: 63: LATDbits.LATD2=0;
   988   000A04  948C               	bcf	140,2,c	;volatile
   989                           
   990                           ;ASCENSOR.c: 64: LATDbits.LATD3=0;
   991   000A06  968C               	bcf	140,3,c	;volatile
   992                           
   993                           ;ASCENSOR.c: 65: INTCONbits.TMR0IF = 0;
   994   000A08  94F2               	bcf	242,2,c	;volatile
   995                           
   996                           ;ASCENSOR.c: 66: INTCONbits.GIEH = 1;
   997   000A0A  8EF2               	bsf	242,7,c	;volatile
   998   000A0C  9208               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   999   000A0E  0011               	retfie		f
  1000   000A10                     __end_of_Stop:
  1001                           	callstack 0
  1002                           
  1003                           	psect	smallconst
  1004   000800                     __psmallconst:
  1005                           	callstack 0
  1006   000800  00                 	db	0
  1007   000801  00                 	db	0	; dummy byte at the end
  1008   000800                     __smallconst    set	__psmallconst
  1009   000800                     __mediumconst   set	__psmallconst
  1010   000000                     __activetblptr  equ	0
  1011                           
  1012                           	psect	rparam
  1013   000001                     ___rparam_used  equ	1
  1014   000000                     ___param_bank   equ	0
  1015   000000                     __Lparam        equ	__Lrparam
  1016   000000                     __Hparam        equ	__Hrparam
  1017                           
  1018                           	psect	temp
  1019   000008                     btemp:
  1020                           	callstack 0
  1021   000008                     	ds	1
  1022   000008                     int$flags       set	btemp
  1023   000009                     wtemp8          set	btemp+1
  1024   000009                     ttemp5          set	btemp+1
  1025   00000C                     ttemp6          set	btemp+4
  1026   000010                     ttemp7          set	btemp+8
  1027                           
  1028                           	psect	config
  1029                           
  1030                           ;Config register CONFIG1L @ 0x300000
  1031                           ;	PLL Prescaler Selection bits
  1032                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  1033                           ;	System Clock Postscaler Selection bits
  1034                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  1035                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  1036                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  1037   300000                     	org	3145728
  1038   300000  00                 	db	0
  1039                           
  1040                           ;Config register CONFIG1H @ 0x300001
  1041                           ;	Oscillator Selection bits
  1042                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
  1043                           ;	Fail-Safe Clock Monitor Enable bit
  1044                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1045                           ;	Internal/External Oscillator Switchover bit
  1046                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1047   300001                     	org	3145729
  1048   300001  08                 	db	8
  1049                           
  1050                           ;Config register CONFIG2L @ 0x300002
  1051                           ;	Power-up Timer Enable bit
  1052                           ;	PWRT = OFF, PWRT disabled
  1053                           ;	Brown-out Reset Enable bits
  1054                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  1055                           ;	Brown-out Reset Voltage bits
  1056                           ;	BORV = 3, Minimum setting 2.05V
  1057                           ;	USB Voltage Regulator Enable bit
  1058                           ;	VREGEN = OFF, USB voltage regulator disabled
  1059   300002                     	org	3145730
  1060   300002  19                 	db	25
  1061                           
  1062                           ;Config register CONFIG2H @ 0x300003
  1063                           ;	Watchdog Timer Enable bit
  1064                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  1065                           ;	Watchdog Timer Postscale Select bits
  1066                           ;	WDTPS = 32768, 1:32768
  1067   300003                     	org	3145731
  1068   300003  1E                 	db	30
  1069                           
  1070                           ; Padding undefined space
  1071   300004                     	org	3145732
  1072   300004  FF                 	db	255
  1073                           
  1074                           ;Config register CONFIG3H @ 0x300005
  1075                           ;	CCP2 MUX bit
  1076                           ;	CCP2MX = OFF, CCP2 input/output is multiplexed with RB3
  1077                           ;	PORTB A/D Enable bit
  1078                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  1079                           ;	Low-Power Timer 1 Oscillator Enable bit
  1080                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  1081                           ;	MCLR Pin Enable bit
  1082                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  1083   300005                     	org	3145733
  1084   300005  00                 	db	0
  1085                           
  1086                           ;Config register CONFIG4L @ 0x300006
  1087                           ;	Stack Full/Underflow Reset Enable bit
  1088                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  1089                           ;	Single-Supply ICSP Enable bit
  1090                           ;	LVP = OFF, Single-Supply ICSP disabled
  1091                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  1092                           ;	ICPRT = ON, ICPORT enabled
  1093                           ;	Extended Instruction Set Enable bit
  1094                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1095                           ;	Background Debugger Enable bit
  1096                           ;	DEBUG = 0x1, unprogrammed default
  1097   300006                     	org	3145734
  1098   300006  A0                 	db	160
  1099                           
  1100                           ; Padding undefined space
  1101   300007                     	org	3145735
  1102   300007  FF                 	db	255
  1103                           
  1104                           ;Config register CONFIG5L @ 0x300008
  1105                           ;	Code Protection bit
  1106                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  1107                           ;	Code Protection bit
  1108                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  1109                           ;	Code Protection bit
  1110                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  1111                           ;	Code Protection bit
  1112                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  1113   300008                     	org	3145736
  1114   300008  0F                 	db	15
  1115                           
  1116                           ;Config register CONFIG5H @ 0x300009
  1117                           ;	Boot Block Code Protection bit
  1118                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  1119                           ;	Data EEPROM Code Protection bit
  1120                           ;	CPD = OFF, Data EEPROM is not code-protected
  1121   300009                     	org	3145737
  1122   300009  C0                 	db	192
  1123                           
  1124                           ;Config register CONFIG6L @ 0x30000A
  1125                           ;	Write Protection bit
  1126                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  1127                           ;	Write Protection bit
  1128                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  1129                           ;	Write Protection bit
  1130                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  1131                           ;	Write Protection bit
  1132                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  1133   30000A                     	org	3145738
  1134   30000A  0F                 	db	15
  1135                           
  1136                           ;Config register CONFIG6H @ 0x30000B
  1137                           ;	Configuration Register Write Protection bit
  1138                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  1139                           ;	Boot Block Write Protection bit
  1140                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  1141                           ;	Data EEPROM Write Protection bit
  1142                           ;	WRTD = OFF, Data EEPROM is not write-protected
  1143   30000B                     	org	3145739
  1144   30000B  E0                 	db	224
  1145                           
  1146                           ;Config register CONFIG7L @ 0x30000C
  1147                           ;	Table Read Protection bit
  1148                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1149                           ;	Table Read Protection bit
  1150                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1151                           ;	Table Read Protection bit
  1152                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1153                           ;	Table Read Protection bit
  1154                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  1155   30000C                     	org	3145740
  1156   30000C  0F                 	db	15
  1157                           
  1158                           ;Config register CONFIG7H @ 0x30000D
  1159                           ;	Boot Block Table Read Protection bit
  1160                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  1161   30000D                     	org	3145741
  1162   30000D  40                 	db	64
  1163                           tosu	equ	0xFFF
  1164                           tosh	equ	0xFFE
  1165                           tosl	equ	0xFFD
  1166                           stkptr	equ	0xFFC
  1167                           pclatu	equ	0xFFB
  1168                           pclath	equ	0xFFA
  1169                           pcl	equ	0xFF9
  1170                           tblptru	equ	0xFF8
  1171                           tblptrh	equ	0xFF7
  1172                           tblptrl	equ	0xFF6
  1173                           tablat	equ	0xFF5
  1174                           prodh	equ	0xFF4
  1175                           prodl	equ	0xFF3
  1176                           indf0	equ	0xFEF
  1177                           postinc0	equ	0xFEE
  1178                           postdec0	equ	0xFED
  1179                           preinc0	equ	0xFEC
  1180                           plusw0	equ	0xFEB
  1181                           fsr0h	equ	0xFEA
  1182                           fsr0l	equ	0xFE9
  1183                           wreg	equ	0xFE8
  1184                           indf1	equ	0xFE7
  1185                           postinc1	equ	0xFE6
  1186                           postdec1	equ	0xFE5
  1187                           preinc1	equ	0xFE4
  1188                           plusw1	equ	0xFE3
  1189                           fsr1h	equ	0xFE2
  1190                           fsr1l	equ	0xFE1
  1191                           bsr	equ	0xFE0
  1192                           indf2	equ	0xFDF
  1193                           postinc2	equ	0xFDE
  1194                           postdec2	equ	0xFDD
  1195                           preinc2	equ	0xFDC
  1196                           plusw2	equ	0xFDB
  1197                           fsr2h	equ	0xFDA
  1198                           fsr2l	equ	0xFD9
  1199                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      4       7
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_dejar

Critical Paths under _Stop in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _Stop in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _Stop in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _Stop in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _Stop in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _Stop in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _Stop in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _Stop in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _Stop in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0       0
                                              2 COMRAM     2     2      0
                              _dejar
                           _detectar
                           _init_int
                         _init_ports
                             _reposo
 ---------------------------------------------------------------------------------
 (1) _reposo                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_int                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _detectar                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _dejar                                                2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _Stop                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _dejar
   _detectar
   _init_int
   _init_ports
   _reposo

 _Stop (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            2047      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITBIGSFRh         126      0       0      0.0%
BITCOMRAM           94      0       0      0.0%
COMRAM              94      4       7      7.4%
BITBIGSFRl          32      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       7      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Wed Oct 01 02:21:56 2025

                     l62 0A2C                       l70 09BE                       l71 09AE  
                     l81 0948                       l73 09BC                       l82 099C  
                     l83 0972                       l59 09FC                       l75 09CE  
                     l92 08DE                       l77 09DC                       l86 099C  
                     l78 09DE                       l95 091C                       l89 089A  
                     u10 09AC                       u11 09A8                       u20 09BC  
                     u21 09B8                       u30 09CC                       u31 09C8  
                     u40 09DC                       u41 09D8                       u50 092C  
                     u51 0928                       u60 093A                       u61 0936  
                     u70 0956                       u71 0952                       u80 0964  
                     u81 0960                       u90 0980                       u91 097C  
                    l101 084A                      l102 0826                      l801 09EE  
                    l811 09F8                      l803 09F0                      l821 0A2A  
                    l813 09FA                      l805 09F2                      l831 091E  
                    l807 09F4                      l841 0964                      l833 092C  
                    l817 0A20                      l809 09F6                      l825 099E  
                    l843 096C                      l835 093A                      l819 0A22  
                    l827 09AC                      l861 08DA                      l853 0898  
                    l845 0980                      l837 0942                      l829 09CC  
                    l863 08DC                      l855 08A8                      l847 098E  
                    l839 0956                      l791 09E4                      l865 08EC  
                    l857 08BE                      l849 0996                      l793 09E6  
                    l881 084A                      l873 0802                      l867 0902  
                    l859 08D6                      l795 09E8                      l891 088C  
                    l883 0858                      l875 080A                      l797 09EA  
                    l789 09E0                      l885 085C                      l877 0834  
                    l799 09EC                      l887 086C                      l879 0842  
                    l889 087C                      u100 098E                      u101 098A  
                    u110 08A8                      u111 08A4                      u120 08EC  
                    u121 08E8                      u130 0834                      u131 0830  
                    u140 0842                      u141 083E                      u150 0858  
                    u207 08B2                      u151 0854                      u160 086C  
                    u217 08CA                      u161 0868                      u170 087C  
                    u227 08F6                      u171 0878                      u180 088C  
                    u237 090E                      u181 0888                      u197 0814  
                    wreg 0FE8                     _LATA 0F89                     _LATB 0F8A  
                   _LATC 0F8B                     _LATD 0F8C                     _LATE 0F8D  
                   i2l67 0A0C                     _Stop 0008                     _main 0802  
                   btemp 0008                     start 000E             ___param_bank 0000  
                  ?_Stop 0001                    ?_main 0001                    _T0CON 0FD5  
                  _NEGRA 0005                    _METAL 0007                    i2l871 0A00  
                  _TMR0L 0FD6                    _TRISA 0F92                    _TRISB 0F93  
                  _TRISC 0F94                    _TRISD 0F95                    _TRISE 0F96  
                  _dejar 0898                    ttemp5 0009                    ttemp6 000C  
                  ttemp7 0010                    status 0FD8                    wtemp8 0009  
        __initialization 0A10             __end_of_Stop 0A10             __end_of_main 0898  
                 ??_Stop 0001                   ??_main 0003            __activetblptr 0000  
                 ?_dejar 0001                   _BLANCA 0006                   _INTCON 0FF2  
       __end_of_detectar 099E         __end_of_init_int 0A2E                   _reposo 099E  
                 isa$std 0001             __mediumconst 0800               __accesstop 0060  
__end_of__initialization 0A16            ___rparam_used 0001           __pcstackCOMRAM 0001  
          __end_of_dejar 091E                  ??_dejar 0001                  ?_reposo 0001  
              ?_detectar 0001                ?_init_int 0001                  __Hparam 0000  
                __Lparam 0000             __psmallconst 0800                  __pcinit 0A10  
             _init_ports 09E0                  __ramtop 0800                  __ptext0 0802  
                __ptext1 099E                  __ptext2 09E0                  __ptext3 0A20  
                __ptext4 091E                  __ptext5 0898                _T0CONbits 0FD5  
             ??_detectar 0001           __pintcode_body 09FE     end_of_initialization 0A16  
             ??_init_int 0001                  int_func 09FE                _PORTAbits 0F80  
              _PORTBbits 0F81                _PORTCbits 0F82                _TRISCbits 0F94  
            ?_init_ports 0001           __end_of_reposo 09E0      start_initialization 0A10  
               ??_reposo 0001              __pbssCOMRAM 0005                __pintcode 0008  
            __smallconst 0800                 _LATCbits 0F8B                 _LATDbits 0F8C  
               _RCONbits 0FD0               _ADCON1bits 0FC1              _INTCON2bits 0FF1  
               __Hrparam 0000                 __Lrparam 0000             ??_init_ports 0001  
               _detectar 091E                 _init_int 0A20       __end_of_init_ports 09FE  
               isa$xinst 0000                 int$flags 0008               _INTCONbits 0FF2  
               intlevel2 0000  
