

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Thu Oct 02 17:25:54 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1
    21                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1
    22                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1
    23                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1
    24                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1
    25                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    26                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    27                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    38                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    39                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    40                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    41   000000                     
    42                           ; Generated 17/01/2025 GMT
    43                           ; 
    44                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    45                           ; All rights reserved.
    46                           ; 
    47                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    48                           ; 
    49                           ; Redistribution and use in source and binary forms, with or without modification, are
    50                           ; permitted provided that the following conditions are met:
    51                           ; 
    52                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    53                           ;        conditions and the following disclaimer.
    54                           ; 
    55                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    56                           ;        of conditions and the following disclaimer in the documentation and/or other
    57                           ;        materials provided with the distribution. Publication is not required when
    58                           ;        this file is used in an embedded application.
    59                           ; 
    60                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    61                           ;        software without specific prior written permission.
    62                           ; 
    63                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    64                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    65                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    66                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    67                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    68                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    69                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    70                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    71                           ; 
    72                           ; 
    73                           ; Code-generator required, PIC18F4550 Definitions
    74                           ; 
    75                           ; SFR Addresses
    76   000FE0                     bsr             equ	4064
    77   000FE9                     fsr0            equ	4073
    78   000FEA                     fsr0h           equ	4074
    79   000FE9                     fsr0l           equ	4073
    80   000FE1                     fsr1            equ	4065
    81   000FE2                     fsr1h           equ	4066
    82   000FE1                     fsr1l           equ	4065
    83   000FD9                     fsr2            equ	4057
    84   000FDA                     fsr2h           equ	4058
    85   000FD9                     fsr2l           equ	4057
    86   000FEF                     indf0           equ	4079
    87   000FE7                     indf1           equ	4071
    88   000FDF                     indf2           equ	4063
    89   000FF2                     intcon          equ	4082
    90   000000                     nvmcon          equ	0
    91   000FF9                     pcl             equ	4089
    92   000FFA                     pclath          equ	4090
    93   000FFB                     pclatu          equ	4091
    94   000FEB                     plusw0          equ	4075
    95   000FE3                     plusw1          equ	4067
    96   000FDB                     plusw2          equ	4059
    97   000FED                     postdec0        equ	4077
    98   000FE5                     postdec1        equ	4069
    99   000FDD                     postdec2        equ	4061
   100   000FEE                     postinc0        equ	4078
   101   000FE6                     postinc1        equ	4070
   102   000FDE                     postinc2        equ	4062
   103   000FEC                     preinc0         equ	4076
   104   000FE4                     preinc1         equ	4068
   105   000FDC                     preinc2         equ	4060
   106   000FF3                     prod            equ	4083
   107   000FF4                     prodh           equ	4084
   108   000FF3                     prodl           equ	4083
   109   000FD8                     status          equ	4056
   110   000FF5                     tablat          equ	4085
   111   000FF6                     tblptr          equ	4086
   112   000FF7                     tblptrh         equ	4087
   113   000FF6                     tblptrl         equ	4086
   114   000FF8                     tblptru         equ	4088
   115   000FFD                     tosl            equ	4093
   116   000FE8                     wreg            equ	4072
   117   000F62                     SPPDATA         equ	3938	;# 
   118   000F63                     SPPCFG          equ	3939	;# 
   119   000F64                     SPPEPS          equ	3940	;# 
   120   000F65                     SPPCON          equ	3941	;# 
   121   000F66                     UFRM            equ	3942	;# 
   122   000F66                     UFRML           equ	3942	;# 
   123   000F67                     UFRMH           equ	3943	;# 
   124   000F68                     UIR             equ	3944	;# 
   125   000F69                     UIE             equ	3945	;# 
   126   000F6A                     UEIR            equ	3946	;# 
   127   000F6B                     UEIE            equ	3947	;# 
   128   000F6C                     USTAT           equ	3948	;# 
   129   000F6D                     UCON            equ	3949	;# 
   130   000F6E                     UADDR           equ	3950	;# 
   131   000F6F                     UCFG            equ	3951	;# 
   132   000F70                     UEP0            equ	3952	;# 
   133   000F71                     UEP1            equ	3953	;# 
   134   000F72                     UEP2            equ	3954	;# 
   135   000F73                     UEP3            equ	3955	;# 
   136   000F74                     UEP4            equ	3956	;# 
   137   000F75                     UEP5            equ	3957	;# 
   138   000F76                     UEP6            equ	3958	;# 
   139   000F77                     UEP7            equ	3959	;# 
   140   000F78                     UEP8            equ	3960	;# 
   141   000F79                     UEP9            equ	3961	;# 
   142   000F7A                     UEP10           equ	3962	;# 
   143   000F7B                     UEP11           equ	3963	;# 
   144   000F7C                     UEP12           equ	3964	;# 
   145   000F7D                     UEP13           equ	3965	;# 
   146   000F7E                     UEP14           equ	3966	;# 
   147   000F7F                     UEP15           equ	3967	;# 
   148   000F80                     PORTA           equ	3968	;# 
   149   000F81                     PORTB           equ	3969	;# 
   150   000F82                     PORTC           equ	3970	;# 
   151   000F83                     PORTD           equ	3971	;# 
   152   000F84                     PORTE           equ	3972	;# 
   153   000F89                     LATA            equ	3977	;# 
   154   000F8A                     LATB            equ	3978	;# 
   155   000F8B                     LATC            equ	3979	;# 
   156   000F8C                     LATD            equ	3980	;# 
   157   000F8D                     LATE            equ	3981	;# 
   158   000F92                     TRISA           equ	3986	;# 
   159   000F92                     DDRA            equ	3986	;# 
   160   000F93                     TRISB           equ	3987	;# 
   161   000F93                     DDRB            equ	3987	;# 
   162   000F94                     TRISC           equ	3988	;# 
   163   000F94                     DDRC            equ	3988	;# 
   164   000F95                     TRISD           equ	3989	;# 
   165   000F95                     DDRD            equ	3989	;# 
   166   000F96                     TRISE           equ	3990	;# 
   167   000F96                     DDRE            equ	3990	;# 
   168   000F9B                     OSCTUNE         equ	3995	;# 
   169   000F9D                     PIE1            equ	3997	;# 
   170   000F9E                     PIR1            equ	3998	;# 
   171   000F9F                     IPR1            equ	3999	;# 
   172   000FA0                     PIE2            equ	4000	;# 
   173   000FA1                     PIR2            equ	4001	;# 
   174   000FA2                     IPR2            equ	4002	;# 
   175   000FA6                     EECON1          equ	4006	;# 
   176   000FA7                     EECON2          equ	4007	;# 
   177   000FA8                     EEDATA          equ	4008	;# 
   178   000FA9                     EEADR           equ	4009	;# 
   179   000FAB                     RCSTA           equ	4011	;# 
   180   000FAB                     RCSTA1          equ	4011	;# 
   181   000FAC                     TXSTA           equ	4012	;# 
   182   000FAC                     TXSTA1          equ	4012	;# 
   183   000FAD                     TXREG           equ	4013	;# 
   184   000FAD                     TXREG1          equ	4013	;# 
   185   000FAE                     RCREG           equ	4014	;# 
   186   000FAE                     RCREG1          equ	4014	;# 
   187   000FAF                     SPBRG           equ	4015	;# 
   188   000FAF                     SPBRG1          equ	4015	;# 
   189   000FB0                     SPBRGH          equ	4016	;# 
   190   000FB1                     T3CON           equ	4017	;# 
   191   000FB2                     TMR3            equ	4018	;# 
   192   000FB2                     TMR3L           equ	4018	;# 
   193   000FB3                     TMR3H           equ	4019	;# 
   194   000FB4                     CMCON           equ	4020	;# 
   195   000FB5                     CVRCON          equ	4021	;# 
   196   000FB6                     ECCP1AS         equ	4022	;# 
   197   000FB6                     CCP1AS          equ	4022	;# 
   198   000FB7                     ECCP1DEL        equ	4023	;# 
   199   000FB7                     CCP1DEL         equ	4023	;# 
   200   000FB8                     BAUDCON         equ	4024	;# 
   201   000FB8                     BAUDCTL         equ	4024	;# 
   202   000FBA                     CCP2CON         equ	4026	;# 
   203   000FBB                     CCPR2           equ	4027	;# 
   204   000FBB                     CCPR2L          equ	4027	;# 
   205   000FBC                     CCPR2H          equ	4028	;# 
   206   000FBD                     CCP1CON         equ	4029	;# 
   207   000FBD                     ECCP1CON        equ	4029	;# 
   208   000FBE                     CCPR1           equ	4030	;# 
   209   000FBE                     CCPR1L          equ	4030	;# 
   210   000FBF                     CCPR1H          equ	4031	;# 
   211   000FC0                     ADCON2          equ	4032	;# 
   212   000FC1                     ADCON1          equ	4033	;# 
   213   000FC2                     ADCON0          equ	4034	;# 
   214   000FC3                     ADRES           equ	4035	;# 
   215   000FC3                     ADRESL          equ	4035	;# 
   216   000FC4                     ADRESH          equ	4036	;# 
   217   000FC5                     SSPCON2         equ	4037	;# 
   218   000FC6                     SSPCON1         equ	4038	;# 
   219   000FC7                     SSPSTAT         equ	4039	;# 
   220   000FC8                     SSPADD          equ	4040	;# 
   221   000FC9                     SSPBUF          equ	4041	;# 
   222   000FCA                     T2CON           equ	4042	;# 
   223   000FCB                     PR2             equ	4043	;# 
   224   000FCB                     MEMCON          equ	4043	;# 
   225   000FCC                     TMR2            equ	4044	;# 
   226   000FCD                     T1CON           equ	4045	;# 
   227   000FCE                     TMR1            equ	4046	;# 
   228   000FCE                     TMR1L           equ	4046	;# 
   229   000FCF                     TMR1H           equ	4047	;# 
   230   000FD0                     RCON            equ	4048	;# 
   231   000FD1                     WDTCON          equ	4049	;# 
   232   000FD2                     HLVDCON         equ	4050	;# 
   233   000FD2                     LVDCON          equ	4050	;# 
   234   000FD3                     OSCCON          equ	4051	;# 
   235   000FD5                     T0CON           equ	4053	;# 
   236   000FD6                     TMR0            equ	4054	;# 
   237   000FD6                     TMR0L           equ	4054	;# 
   238   000FD7                     TMR0H           equ	4055	;# 
   239   000FD8                     STATUS          equ	4056	;# 
   240   000FD9                     FSR2            equ	4057	;# 
   241   000FD9                     FSR2L           equ	4057	;# 
   242   000FDA                     FSR2H           equ	4058	;# 
   243   000FDB                     PLUSW2          equ	4059	;# 
   244   000FDC                     PREINC2         equ	4060	;# 
   245   000FDD                     POSTDEC2        equ	4061	;# 
   246   000FDE                     POSTINC2        equ	4062	;# 
   247   000FDF                     INDF2           equ	4063	;# 
   248   000FE0                     BSR             equ	4064	;# 
   249   000FE1                     FSR1            equ	4065	;# 
   250   000FE1                     FSR1L           equ	4065	;# 
   251   000FE2                     FSR1H           equ	4066	;# 
   252   000FE3                     PLUSW1          equ	4067	;# 
   253   000FE4                     PREINC1         equ	4068	;# 
   254   000FE5                     POSTDEC1        equ	4069	;# 
   255   000FE6                     POSTINC1        equ	4070	;# 
   256   000FE7                     INDF1           equ	4071	;# 
   257   000FE8                     WREG            equ	4072	;# 
   258   000FE9                     FSR0            equ	4073	;# 
   259   000FE9                     FSR0L           equ	4073	;# 
   260   000FEA                     FSR0H           equ	4074	;# 
   261   000FEB                     PLUSW0          equ	4075	;# 
   262   000FEC                     PREINC0         equ	4076	;# 
   263   000FED                     POSTDEC0        equ	4077	;# 
   264   000FEE                     POSTINC0        equ	4078	;# 
   265   000FEF                     INDF0           equ	4079	;# 
   266   000FF0                     INTCON3         equ	4080	;# 
   267   000FF1                     INTCON2         equ	4081	;# 
   268   000FF2                     INTCON          equ	4082	;# 
   269   000FF3                     PROD            equ	4083	;# 
   270   000FF3                     PRODL           equ	4083	;# 
   271   000FF4                     PRODH           equ	4084	;# 
   272   000FF5                     TABLAT          equ	4085	;# 
   273   000FF6                     TBLPTR          equ	4086	;# 
   274   000FF6                     TBLPTRL         equ	4086	;# 
   275   000FF7                     TBLPTRH         equ	4087	;# 
   276   000FF8                     TBLPTRU         equ	4088	;# 
   277   000FF9                     PCLAT           equ	4089	;# 
   278   000FF9                     PC              equ	4089	;# 
   279   000FF9                     PCL             equ	4089	;# 
   280   000FFA                     PCLATH          equ	4090	;# 
   281   000FFB                     PCLATU          equ	4091	;# 
   282   000FFC                     STKPTR          equ	4092	;# 
   283   000FFD                     TOS             equ	4093	;# 
   284   000FFD                     TOSL            equ	4093	;# 
   285   000FFE                     TOSH            equ	4094	;# 
   286   000FFF                     TOSU            equ	4095	;# 
   287   000F62                     SPPDATA         equ	3938	;# 
   288   000F63                     SPPCFG          equ	3939	;# 
   289   000F64                     SPPEPS          equ	3940	;# 
   290   000F65                     SPPCON          equ	3941	;# 
   291   000F66                     UFRM            equ	3942	;# 
   292   000F66                     UFRML           equ	3942	;# 
   293   000F67                     UFRMH           equ	3943	;# 
   294   000F68                     UIR             equ	3944	;# 
   295   000F69                     UIE             equ	3945	;# 
   296   000F6A                     UEIR            equ	3946	;# 
   297   000F6B                     UEIE            equ	3947	;# 
   298   000F6C                     USTAT           equ	3948	;# 
   299   000F6D                     UCON            equ	3949	;# 
   300   000F6E                     UADDR           equ	3950	;# 
   301   000F6F                     UCFG            equ	3951	;# 
   302   000F70                     UEP0            equ	3952	;# 
   303   000F71                     UEP1            equ	3953	;# 
   304   000F72                     UEP2            equ	3954	;# 
   305   000F73                     UEP3            equ	3955	;# 
   306   000F74                     UEP4            equ	3956	;# 
   307   000F75                     UEP5            equ	3957	;# 
   308   000F76                     UEP6            equ	3958	;# 
   309   000F77                     UEP7            equ	3959	;# 
   310   000F78                     UEP8            equ	3960	;# 
   311   000F79                     UEP9            equ	3961	;# 
   312   000F7A                     UEP10           equ	3962	;# 
   313   000F7B                     UEP11           equ	3963	;# 
   314   000F7C                     UEP12           equ	3964	;# 
   315   000F7D                     UEP13           equ	3965	;# 
   316   000F7E                     UEP14           equ	3966	;# 
   317   000F7F                     UEP15           equ	3967	;# 
   318   000F80                     PORTA           equ	3968	;# 
   319   000F81                     PORTB           equ	3969	;# 
   320   000F82                     PORTC           equ	3970	;# 
   321   000F83                     PORTD           equ	3971	;# 
   322   000F84                     PORTE           equ	3972	;# 
   323   000F89                     LATA            equ	3977	;# 
   324   000F8A                     LATB            equ	3978	;# 
   325   000F8B                     LATC            equ	3979	;# 
   326   000F8C                     LATD            equ	3980	;# 
   327   000F8D                     LATE            equ	3981	;# 
   328   000F92                     TRISA           equ	3986	;# 
   329   000F92                     DDRA            equ	3986	;# 
   330   000F93                     TRISB           equ	3987	;# 
   331   000F93                     DDRB            equ	3987	;# 
   332   000F94                     TRISC           equ	3988	;# 
   333   000F94                     DDRC            equ	3988	;# 
   334   000F95                     TRISD           equ	3989	;# 
   335   000F95                     DDRD            equ	3989	;# 
   336   000F96                     TRISE           equ	3990	;# 
   337   000F96                     DDRE            equ	3990	;# 
   338   000F9B                     OSCTUNE         equ	3995	;# 
   339   000F9D                     PIE1            equ	3997	;# 
   340   000F9E                     PIR1            equ	3998	;# 
   341   000F9F                     IPR1            equ	3999	;# 
   342   000FA0                     PIE2            equ	4000	;# 
   343   000FA1                     PIR2            equ	4001	;# 
   344   000FA2                     IPR2            equ	4002	;# 
   345   000FA6                     EECON1          equ	4006	;# 
   346   000FA7                     EECON2          equ	4007	;# 
   347   000FA8                     EEDATA          equ	4008	;# 
   348   000FA9                     EEADR           equ	4009	;# 
   349   000FAB                     RCSTA           equ	4011	;# 
   350   000FAB                     RCSTA1          equ	4011	;# 
   351   000FAC                     TXSTA           equ	4012	;# 
   352   000FAC                     TXSTA1          equ	4012	;# 
   353   000FAD                     TXREG           equ	4013	;# 
   354   000FAD                     TXREG1          equ	4013	;# 
   355   000FAE                     RCREG           equ	4014	;# 
   356   000FAE                     RCREG1          equ	4014	;# 
   357   000FAF                     SPBRG           equ	4015	;# 
   358   000FAF                     SPBRG1          equ	4015	;# 
   359   000FB0                     SPBRGH          equ	4016	;# 
   360   000FB1                     T3CON           equ	4017	;# 
   361   000FB2                     TMR3            equ	4018	;# 
   362   000FB2                     TMR3L           equ	4018	;# 
   363   000FB3                     TMR3H           equ	4019	;# 
   364   000FB4                     CMCON           equ	4020	;# 
   365   000FB5                     CVRCON          equ	4021	;# 
   366   000FB6                     ECCP1AS         equ	4022	;# 
   367   000FB6                     CCP1AS          equ	4022	;# 
   368   000FB7                     ECCP1DEL        equ	4023	;# 
   369   000FB7                     CCP1DEL         equ	4023	;# 
   370   000FB8                     BAUDCON         equ	4024	;# 
   371   000FB8                     BAUDCTL         equ	4024	;# 
   372   000FBA                     CCP2CON         equ	4026	;# 
   373   000FBB                     CCPR2           equ	4027	;# 
   374   000FBB                     CCPR2L          equ	4027	;# 
   375   000FBC                     CCPR2H          equ	4028	;# 
   376   000FBD                     CCP1CON         equ	4029	;# 
   377   000FBD                     ECCP1CON        equ	4029	;# 
   378   000FBE                     CCPR1           equ	4030	;# 
   379   000FBE                     CCPR1L          equ	4030	;# 
   380   000FBF                     CCPR1H          equ	4031	;# 
   381   000FC0                     ADCON2          equ	4032	;# 
   382   000FC1                     ADCON1          equ	4033	;# 
   383   000FC2                     ADCON0          equ	4034	;# 
   384   000FC3                     ADRES           equ	4035	;# 
   385   000FC3                     ADRESL          equ	4035	;# 
   386   000FC4                     ADRESH          equ	4036	;# 
   387   000FC5                     SSPCON2         equ	4037	;# 
   388   000FC6                     SSPCON1         equ	4038	;# 
   389   000FC7                     SSPSTAT         equ	4039	;# 
   390   000FC8                     SSPADD          equ	4040	;# 
   391   000FC9                     SSPBUF          equ	4041	;# 
   392   000FCA                     T2CON           equ	4042	;# 
   393   000FCB                     PR2             equ	4043	;# 
   394   000FCB                     MEMCON          equ	4043	;# 
   395   000FCC                     TMR2            equ	4044	;# 
   396   000FCD                     T1CON           equ	4045	;# 
   397   000FCE                     TMR1            equ	4046	;# 
   398   000FCE                     TMR1L           equ	4046	;# 
   399   000FCF                     TMR1H           equ	4047	;# 
   400   000FD0                     RCON            equ	4048	;# 
   401   000FD1                     WDTCON          equ	4049	;# 
   402   000FD2                     HLVDCON         equ	4050	;# 
   403   000FD2                     LVDCON          equ	4050	;# 
   404   000FD3                     OSCCON          equ	4051	;# 
   405   000FD5                     T0CON           equ	4053	;# 
   406   000FD6                     TMR0            equ	4054	;# 
   407   000FD6                     TMR0L           equ	4054	;# 
   408   000FD7                     TMR0H           equ	4055	;# 
   409   000FD8                     STATUS          equ	4056	;# 
   410   000FD9                     FSR2            equ	4057	;# 
   411   000FD9                     FSR2L           equ	4057	;# 
   412   000FDA                     FSR2H           equ	4058	;# 
   413   000FDB                     PLUSW2          equ	4059	;# 
   414   000FDC                     PREINC2         equ	4060	;# 
   415   000FDD                     POSTDEC2        equ	4061	;# 
   416   000FDE                     POSTINC2        equ	4062	;# 
   417   000FDF                     INDF2           equ	4063	;# 
   418   000FE0                     BSR             equ	4064	;# 
   419   000FE1                     FSR1            equ	4065	;# 
   420   000FE1                     FSR1L           equ	4065	;# 
   421   000FE2                     FSR1H           equ	4066	;# 
   422   000FE3                     PLUSW1          equ	4067	;# 
   423   000FE4                     PREINC1         equ	4068	;# 
   424   000FE5                     POSTDEC1        equ	4069	;# 
   425   000FE6                     POSTINC1        equ	4070	;# 
   426   000FE7                     INDF1           equ	4071	;# 
   427   000FE8                     WREG            equ	4072	;# 
   428   000FE9                     FSR0            equ	4073	;# 
   429   000FE9                     FSR0L           equ	4073	;# 
   430   000FEA                     FSR0H           equ	4074	;# 
   431   000FEB                     PLUSW0          equ	4075	;# 
   432   000FEC                     PREINC0         equ	4076	;# 
   433   000FED                     POSTDEC0        equ	4077	;# 
   434   000FEE                     POSTINC0        equ	4078	;# 
   435   000FEF                     INDF0           equ	4079	;# 
   436   000FF0                     INTCON3         equ	4080	;# 
   437   000FF1                     INTCON2         equ	4081	;# 
   438   000FF2                     INTCON          equ	4082	;# 
   439   000FF3                     PROD            equ	4083	;# 
   440   000FF3                     PRODL           equ	4083	;# 
   441   000FF4                     PRODH           equ	4084	;# 
   442   000FF5                     TABLAT          equ	4085	;# 
   443   000FF6                     TBLPTR          equ	4086	;# 
   444   000FF6                     TBLPTRL         equ	4086	;# 
   445   000FF7                     TBLPTRH         equ	4087	;# 
   446   000FF8                     TBLPTRU         equ	4088	;# 
   447   000FF9                     PCLAT           equ	4089	;# 
   448   000FF9                     PC              equ	4089	;# 
   449   000FF9                     PCL             equ	4089	;# 
   450   000FFA                     PCLATH          equ	4090	;# 
   451   000FFB                     PCLATU          equ	4091	;# 
   452   000FFC                     STKPTR          equ	4092	;# 
   453   000FFD                     TOS             equ	4093	;# 
   454   000FFD                     TOSL            equ	4093	;# 
   455   000FFE                     TOSH            equ	4094	;# 
   456   000FFF                     TOSU            equ	4095	;# 
   457   000F62                     SPPDATA         equ	3938	;# 
   458   000F63                     SPPCFG          equ	3939	;# 
   459   000F64                     SPPEPS          equ	3940	;# 
   460   000F65                     SPPCON          equ	3941	;# 
   461   000F66                     UFRM            equ	3942	;# 
   462   000F66                     UFRML           equ	3942	;# 
   463   000F67                     UFRMH           equ	3943	;# 
   464   000F68                     UIR             equ	3944	;# 
   465   000F69                     UIE             equ	3945	;# 
   466   000F6A                     UEIR            equ	3946	;# 
   467   000F6B                     UEIE            equ	3947	;# 
   468   000F6C                     USTAT           equ	3948	;# 
   469   000F6D                     UCON            equ	3949	;# 
   470   000F6E                     UADDR           equ	3950	;# 
   471   000F6F                     UCFG            equ	3951	;# 
   472   000F70                     UEP0            equ	3952	;# 
   473   000F71                     UEP1            equ	3953	;# 
   474   000F72                     UEP2            equ	3954	;# 
   475   000F73                     UEP3            equ	3955	;# 
   476   000F74                     UEP4            equ	3956	;# 
   477   000F75                     UEP5            equ	3957	;# 
   478   000F76                     UEP6            equ	3958	;# 
   479   000F77                     UEP7            equ	3959	;# 
   480   000F78                     UEP8            equ	3960	;# 
   481   000F79                     UEP9            equ	3961	;# 
   482   000F7A                     UEP10           equ	3962	;# 
   483   000F7B                     UEP11           equ	3963	;# 
   484   000F7C                     UEP12           equ	3964	;# 
   485   000F7D                     UEP13           equ	3965	;# 
   486   000F7E                     UEP14           equ	3966	;# 
   487   000F7F                     UEP15           equ	3967	;# 
   488   000F80                     PORTA           equ	3968	;# 
   489   000F81                     PORTB           equ	3969	;# 
   490   000F82                     PORTC           equ	3970	;# 
   491   000F83                     PORTD           equ	3971	;# 
   492   000F84                     PORTE           equ	3972	;# 
   493   000F89                     LATA            equ	3977	;# 
   494   000F8A                     LATB            equ	3978	;# 
   495   000F8B                     LATC            equ	3979	;# 
   496   000F8C                     LATD            equ	3980	;# 
   497   000F8D                     LATE            equ	3981	;# 
   498   000F92                     TRISA           equ	3986	;# 
   499   000F92                     DDRA            equ	3986	;# 
   500   000F93                     TRISB           equ	3987	;# 
   501   000F93                     DDRB            equ	3987	;# 
   502   000F94                     TRISC           equ	3988	;# 
   503   000F94                     DDRC            equ	3988	;# 
   504   000F95                     TRISD           equ	3989	;# 
   505   000F95                     DDRD            equ	3989	;# 
   506   000F96                     TRISE           equ	3990	;# 
   507   000F96                     DDRE            equ	3990	;# 
   508   000F9B                     OSCTUNE         equ	3995	;# 
   509   000F9D                     PIE1            equ	3997	;# 
   510   000F9E                     PIR1            equ	3998	;# 
   511   000F9F                     IPR1            equ	3999	;# 
   512   000FA0                     PIE2            equ	4000	;# 
   513   000FA1                     PIR2            equ	4001	;# 
   514   000FA2                     IPR2            equ	4002	;# 
   515   000FA6                     EECON1          equ	4006	;# 
   516   000FA7                     EECON2          equ	4007	;# 
   517   000FA8                     EEDATA          equ	4008	;# 
   518   000FA9                     EEADR           equ	4009	;# 
   519   000FAB                     RCSTA           equ	4011	;# 
   520   000FAB                     RCSTA1          equ	4011	;# 
   521   000FAC                     TXSTA           equ	4012	;# 
   522   000FAC                     TXSTA1          equ	4012	;# 
   523   000FAD                     TXREG           equ	4013	;# 
   524   000FAD                     TXREG1          equ	4013	;# 
   525   000FAE                     RCREG           equ	4014	;# 
   526   000FAE                     RCREG1          equ	4014	;# 
   527   000FAF                     SPBRG           equ	4015	;# 
   528   000FAF                     SPBRG1          equ	4015	;# 
   529   000FB0                     SPBRGH          equ	4016	;# 
   530   000FB1                     T3CON           equ	4017	;# 
   531   000FB2                     TMR3            equ	4018	;# 
   532   000FB2                     TMR3L           equ	4018	;# 
   533   000FB3                     TMR3H           equ	4019	;# 
   534   000FB4                     CMCON           equ	4020	;# 
   535   000FB5                     CVRCON          equ	4021	;# 
   536   000FB6                     ECCP1AS         equ	4022	;# 
   537   000FB6                     CCP1AS          equ	4022	;# 
   538   000FB7                     ECCP1DEL        equ	4023	;# 
   539   000FB7                     CCP1DEL         equ	4023	;# 
   540   000FB8                     BAUDCON         equ	4024	;# 
   541   000FB8                     BAUDCTL         equ	4024	;# 
   542   000FBA                     CCP2CON         equ	4026	;# 
   543   000FBB                     CCPR2           equ	4027	;# 
   544   000FBB                     CCPR2L          equ	4027	;# 
   545   000FBC                     CCPR2H          equ	4028	;# 
   546   000FBD                     CCP1CON         equ	4029	;# 
   547   000FBD                     ECCP1CON        equ	4029	;# 
   548   000FBE                     CCPR1           equ	4030	;# 
   549   000FBE                     CCPR1L          equ	4030	;# 
   550   000FBF                     CCPR1H          equ	4031	;# 
   551   000FC0                     ADCON2          equ	4032	;# 
   552   000FC1                     ADCON1          equ	4033	;# 
   553   000FC2                     ADCON0          equ	4034	;# 
   554   000FC3                     ADRES           equ	4035	;# 
   555   000FC3                     ADRESL          equ	4035	;# 
   556   000FC4                     ADRESH          equ	4036	;# 
   557   000FC5                     SSPCON2         equ	4037	;# 
   558   000FC6                     SSPCON1         equ	4038	;# 
   559   000FC7                     SSPSTAT         equ	4039	;# 
   560   000FC8                     SSPADD          equ	4040	;# 
   561   000FC9                     SSPBUF          equ	4041	;# 
   562   000FCA                     T2CON           equ	4042	;# 
   563   000FCB                     PR2             equ	4043	;# 
   564   000FCB                     MEMCON          equ	4043	;# 
   565   000FCC                     TMR2            equ	4044	;# 
   566   000FCD                     T1CON           equ	4045	;# 
   567   000FCE                     TMR1            equ	4046	;# 
   568   000FCE                     TMR1L           equ	4046	;# 
   569   000FCF                     TMR1H           equ	4047	;# 
   570   000FD0                     RCON            equ	4048	;# 
   571   000FD1                     WDTCON          equ	4049	;# 
   572   000FD2                     HLVDCON         equ	4050	;# 
   573   000FD2                     LVDCON          equ	4050	;# 
   574   000FD3                     OSCCON          equ	4051	;# 
   575   000FD5                     T0CON           equ	4053	;# 
   576   000FD6                     TMR0            equ	4054	;# 
   577   000FD6                     TMR0L           equ	4054	;# 
   578   000FD7                     TMR0H           equ	4055	;# 
   579   000FD8                     STATUS          equ	4056	;# 
   580   000FD9                     FSR2            equ	4057	;# 
   581   000FD9                     FSR2L           equ	4057	;# 
   582   000FDA                     FSR2H           equ	4058	;# 
   583   000FDB                     PLUSW2          equ	4059	;# 
   584   000FDC                     PREINC2         equ	4060	;# 
   585   000FDD                     POSTDEC2        equ	4061	;# 
   586   000FDE                     POSTINC2        equ	4062	;# 
   587   000FDF                     INDF2           equ	4063	;# 
   588   000FE0                     BSR             equ	4064	;# 
   589   000FE1                     FSR1            equ	4065	;# 
   590   000FE1                     FSR1L           equ	4065	;# 
   591   000FE2                     FSR1H           equ	4066	;# 
   592   000FE3                     PLUSW1          equ	4067	;# 
   593   000FE4                     PREINC1         equ	4068	;# 
   594   000FE5                     POSTDEC1        equ	4069	;# 
   595   000FE6                     POSTINC1        equ	4070	;# 
   596   000FE7                     INDF1           equ	4071	;# 
   597   000FE8                     WREG            equ	4072	;# 
   598   000FE9                     FSR0            equ	4073	;# 
   599   000FE9                     FSR0L           equ	4073	;# 
   600   000FEA                     FSR0H           equ	4074	;# 
   601   000FEB                     PLUSW0          equ	4075	;# 
   602   000FEC                     PREINC0         equ	4076	;# 
   603   000FED                     POSTDEC0        equ	4077	;# 
   604   000FEE                     POSTINC0        equ	4078	;# 
   605   000FEF                     INDF0           equ	4079	;# 
   606   000FF0                     INTCON3         equ	4080	;# 
   607   000FF1                     INTCON2         equ	4081	;# 
   608   000FF2                     INTCON          equ	4082	;# 
   609   000FF3                     PROD            equ	4083	;# 
   610   000FF3                     PRODL           equ	4083	;# 
   611   000FF4                     PRODH           equ	4084	;# 
   612   000FF5                     TABLAT          equ	4085	;# 
   613   000FF6                     TBLPTR          equ	4086	;# 
   614   000FF6                     TBLPTRL         equ	4086	;# 
   615   000FF7                     TBLPTRH         equ	4087	;# 
   616   000FF8                     TBLPTRU         equ	4088	;# 
   617   000FF9                     PCLAT           equ	4089	;# 
   618   000FF9                     PC              equ	4089	;# 
   619   000FF9                     PCL             equ	4089	;# 
   620   000FFA                     PCLATH          equ	4090	;# 
   621   000FFB                     PCLATU          equ	4091	;# 
   622   000FFC                     STKPTR          equ	4092	;# 
   623   000FFD                     TOS             equ	4093	;# 
   624   000FFD                     TOSL            equ	4093	;# 
   625   000FFE                     TOSH            equ	4094	;# 
   626   000FFF                     TOSU            equ	4095	;# 
   627                           
   628                           	psect	smallconst
   629   000800                     __psmallconst:
   630                           	callstack 0
   631   000800  00                 	db	0
   632   000801                     _figura_2:
   633                           	callstack 0
   634   000801  1B                 	db	27
   635   000802  11                 	db	17
   636   000803  1F                 	db	31
   637   000804  1F                 	db	31
   638   000805  1F                 	db	31
   639   000806  11                 	db	17
   640   000807  1B                 	db	27
   641   000808  00                 	db	0
   642   000809                     __end_of_figura_2:
   643                           	callstack 0
   644   000809                     _figura_1:
   645                           	callstack 0
   646   000809  1B                 	db	27
   647   00080A  11                 	db	17
   648   00080B  11                 	db	17
   649   00080C  11                 	db	17
   650   00080D  11                 	db	17
   651   00080E  11                 	db	17
   652   00080F  1B                 	db	27
   653   000810  1F                 	db	31
   654   000811                     __end_of_figura_1:
   655                           	callstack 0
   656   000FA1                     _PIR2bits       set	4001
   657   000FA7                     _EECON2         set	4007
   658   000FA6                     _EECON1bits     set	4006
   659   000FA8                     _EEDATA         set	4008
   660   000FA9                     _EEADR          set	4009
   661   000F95                     _TRISDbits      set	3989
   662   000F8D                     _LATEbits       set	3981
   663   000F8B                     _LATCbits       set	3979
   664   000F81                     _PORTBbits      set	3969
   665   000F81                     _PORTB          set	3969
   666   000FD5                     _T0CONbits      set	4053
   667   000FD6                     _TMR0L          set	4054
   668   000F82                     _PORTCbits      set	3970
   669   000F8C                     _LATDbits       set	3980
   670   000F80                     _PORTAbits      set	3968
   671   000FF2                     _INTCON         set	4082
   672   000FD5                     _T0CON          set	4053
   673   000FF1                     _INTCON2bits    set	4081
   674   000FF2                     _INTCONbits     set	4082
   675   000FD0                     _RCONbits       set	4048
   676   000F8D                     _LATE           set	3981
   677   000F8C                     _LATD           set	3980
   678   000F8B                     _LATC           set	3979
   679   000F8A                     _LATB           set	3978
   680   000F89                     _LATA           set	3977
   681   000F94                     _TRISCbits      set	3988
   682   000F94                     _TRISC          set	3988
   683   000F96                     _TRISE          set	3990
   684   000F95                     _TRISD          set	3989
   685   000F92                     _TRISA          set	3986
   686   000F93                     _TRISB          set	3987
   687   000FC1                     _ADCON1bits     set	4033
   688   000811                     STR_1:
   689   000811  44                 	db	68	;'D'
   690   000812  45                 	db	69	;'E'
   691   000813  54                 	db	84	;'T'
   692   000814  45                 	db	69	;'E'
   693   000815  43                 	db	67	;'C'
   694   000816  54                 	db	84	;'T'
   695   000817  41                 	db	65	;'A'
   696   000818  44                 	db	68	;'D'
   697   000819  4F                 	db	79	;'O'
   698   00081A  00                 	db	0
   699   00081B                     STR_3:
   700   00081B  42                 	db	66	;'B'
   701   00081C  4C                 	db	76	;'L'
   702   00081D  41                 	db	65	;'A'
   703   00081E  4E                 	db	78	;'N'
   704   00081F  43                 	db	67	;'C'
   705   000820  41                 	db	65	;'A'
   706   000821  53                 	db	83	;'S'
   707   000822  00                 	db	0
   708   000823                     STR_5:
   709   000823  49                 	db	73	;'I'
   710   000824  4E                 	db	78	;'N'
   711   000825  49                 	db	73	;'I'
   712   000826  43                 	db	67	;'C'
   713   000827  49                 	db	73	;'I'
   714   000828  4F                 	db	79	;'O'
   715   000829  00                 	db	0
   716   00082A                     STR_2:
   717   00082A  4E                 	db	78	;'N'
   718   00082B  45                 	db	69	;'E'
   719   00082C  47                 	db	71	;'G'
   720   00082D  52                 	db	82	;'R'
   721   00082E  41                 	db	65	;'A'
   722   00082F  53                 	db	83	;'S'
   723   000830  00                 	db	0
   724   000831                     STR_4:
   725   000831  4D                 	db	77	;'M'
   726   000832  45                 	db	69	;'E'
   727   000833  54                 	db	84	;'T'
   728   000834  41                 	db	65	;'A'
   729   000835  4C                 	db	76	;'L'
   730   000836  00                 	db	0
   731   000837                     STR_6:
   732   000837  48                 	db	72	;'H'
   733   000838  6F                 	db	111	;'o'
   734   000839  6C                 	db	108	;'l'
   735   00083A  61                 	db	97	;'a'
   736   00083B  00                 	db	0
   737   00083C  00                 	db	0	; dummy byte at the end
   738   000800                     __smallconst    set	__psmallconst
   739   000800                     __mediumconst   set	__psmallconst
   740   000002                     __activetblptr  equ	2
   741                           
   742                           ; #config settings
   743                           
   744                           	psect	cinit
   745   0013D2                     __pcinit:
   746                           	callstack 0
   747   0013D2                     start_initialization:
   748                           	callstack 0
   749   0013D2                     __initialization:
   750                           	callstack 0
   751                           
   752                           ; Clear objects allocated to COMRAM (17 bytes)
   753   0013D2  EE00  F01E         	lfsr	0,__pbssCOMRAM
   754   0013D6  0E11               	movlw	17
   755   0013D8                     clear_0:
   756   0013D8  6AEE               	clrf	postinc0,c
   757   0013DA  06E8               	decf	wreg,f,c
   758   0013DC  E1FD               	bnz	clear_0
   759   0013DE                     end_of_initialization:
   760                           	callstack 0
   761   0013DE                     __end_of__initialization:
   762                           	callstack 0
   763   0013DE  902F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   764   0013E0  922F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   765   0013E2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   766   0013E4  6EF8               	movwf	tblptru,c
   767   0013E6  0100               	movlb	0
   768   0013E8  EF1A  F006         	goto	_main	;jump to C main() function
   769                           
   770                           	psect	bssCOMRAM
   771   00001E                     __pbssCOMRAM:
   772                           	callstack 0
   773   00001E                     _Fila3:
   774                           	callstack 0
   775   00001E                     	ds	4
   776   000022                     _Fila2:
   777                           	callstack 0
   778   000022                     	ds	4
   779   000026                     _Fila1:
   780                           	callstack 0
   781   000026                     	ds	4
   782   00002A                     _c:
   783                           	callstack 0
   784   00002A                     	ds	1
   785   00002B                     _f:
   786                           	callstack 0
   787   00002B                     	ds	1
   788   00002C                     _NEGRA:
   789                           	callstack 0
   790   00002C                     	ds	1
   791   00002D                     _BLANCA:
   792                           	callstack 0
   793   00002D                     	ds	1
   794   00002E                     _METAL:
   795                           	callstack 0
   796   00002E                     	ds	1
   797                           
   798                           	psect	cstackCOMRAM
   799   000001                     __pcstackCOMRAM:
   800                           	callstack 0
   801   000001                     i1Lcd_Port@a:
   802                           	callstack 0
   803   000001                     
   804                           ; 1 bytes @ 0x0
   805   000001                     	ds	1
   806   000002                     ??i1_Lcd_Cmd:
   807                           
   808                           ; 1 bytes @ 0x1
   809   000002                     	ds	1
   810   000003                     i1Lcd_Cmd@a:
   811                           	callstack 0
   812                           
   813                           ; 1 bytes @ 0x2
   814   000003                     	ds	1
   815   000004                     i1Lcd_Set_Cursor@b:
   816                           	callstack 0
   817   000004                     
   818                           ; 1 bytes @ 0x3
   819   000004                     	ds	1
   820   000005                     i1Lcd_Set_Cursor@a:
   821                           	callstack 0
   822   000005                     
   823                           ; 1 bytes @ 0x4
   824   000005                     	ds	1
   825   000006                     i1Lcd_Set_Cursor@z:
   826                           	callstack 0
   827                           
   828                           ; 1 bytes @ 0x5
   829   000006                     	ds	1
   830   000007                     i1Lcd_Set_Cursor@y:
   831                           	callstack 0
   832                           
   833                           ; 1 bytes @ 0x6
   834   000007                     	ds	1
   835   000008                     i1Lcd_Set_Cursor@temp:
   836                           	callstack 0
   837                           
   838                           ; 1 bytes @ 0x7
   839   000008                     	ds	1
   840   000009                     ??_LowISR:
   841                           
   842                           ; 1 bytes @ 0x8
   843   000009                     	ds	3
   844   00000C                     LowISR@dummy:
   845                           	callstack 0
   846                           
   847                           ; 1 bytes @ 0xB
   848   00000C                     	ds	1
   849   00000D                     Lcd_Port@a:
   850                           	callstack 0
   851   00000D                     EEPROM_Write@data:
   852                           	callstack 0
   853   00000D                     ??_dejar:
   854   00000D                     
   855                           ; 1 bytes @ 0xC
   856   00000D                     	ds	1
   857   00000E                     Lcd_Write_Char@temp:
   858                           	callstack 0
   859   00000E                     EEPROM_Write@dir:
   860                           	callstack 0
   861   00000E                     ??_Lcd_Cmd:
   862                           
   863                           ; 1 bytes @ 0xD
   864   00000E                     	ds	1
   865   00000F                     guardar@media:
   866                           	callstack 0
   867   00000F                     dejar@acum:
   868                           	callstack 0
   869   00000F                     Lcd_Cmd@a:
   870                           	callstack 0
   871   00000F                     Lcd_Write_Char@y:
   872                           	callstack 0
   873   00000F                     
   874                           ; 1 bytes @ 0xE
   875   00000F                     	ds	1
   876   000010                     guardar@i:
   877                           	callstack 0
   878   000010                     dejar@SALTO:
   879                           	callstack 0
   880   000010                     Lcd_Set_Cursor@b:
   881                           	callstack 0
   882   000010                     Lcd_Write_Char@a:
   883                           	callstack 0
   884   000010                     ??_Lcd_Init:
   885   000010                     
   886                           ; 1 bytes @ 0xF
   887   000010                     	ds	1
   888   000011                     guardar@i_692:
   889                           	callstack 0
   890   000011                     dejar@i:
   891                           	callstack 0
   892   000011                     Lcd_Set_Cursor@a:
   893                           	callstack 0
   894   000011                     Lcd_Write_String@a:
   895                           	callstack 0
   896   000011                     Lcd_CGRAM_CreateChar@chardata:
   897                           	callstack 0
   898   000011                     
   899                           ; 1 bytes @ 0x10
   900   000011                     	ds	1
   901   000012                     guardar@i_693:
   902                           	callstack 0
   903   000012                     dejar@i_726:
   904                           	callstack 0
   905   000012                     Lcd_Set_Cursor@z:
   906                           	callstack 0
   907   000012                     ??_Lcd_Write_String:
   908   000012                     ??_Lcd_CGRAM_CreateChar:
   909                           
   910                           ; 1 bytes @ 0x11
   911   000012                     	ds	1
   912   000013                     dejar@i_727:
   913                           	callstack 0
   914   000013                     Lcd_Set_Cursor@y:
   915                           	callstack 0
   916   000013                     Lcd_CGRAM_CreateChar@add:
   917                           	callstack 0
   918   000013                     Lcd_Write_String@i:
   919                           	callstack 0
   920                           
   921                           ; 2 bytes @ 0x12
   922   000013                     	ds	1
   923   000014                     Lcd_Set_Cursor@temp:
   924                           	callstack 0
   925   000014                     Lcd_CGRAM_CreateChar@i:
   926                           	callstack 0
   927                           
   928                           ; 1 bytes @ 0x13
   929   000014                     	ds	1
   930   000015                     Actualizar_Matriz@acum:
   931                           	callstack 0
   932   000015                     Lcd_CGRAM_CreateChar@i_884:
   933                           	callstack 0
   934   000015                     
   935                           ; 1 bytes @ 0x14
   936   000015                     	ds	1
   937   000016                     Actualizar_Matriz@i:
   938                           	callstack 0
   939   000016                     Lcd_CGRAM_CreateChar@i_885:
   940                           	callstack 0
   941                           
   942                           ; 1 bytes @ 0x15
   943   000016                     	ds	1
   944   000017                     Actualizar_Matriz@i_684:
   945                           	callstack 0
   946   000017                     Lcd_CGRAM_CreateChar@i_886:
   947                           	callstack 0
   948                           
   949                           ; 1 bytes @ 0x16
   950   000017                     	ds	1
   951   000018                     Actualizar_Matriz@i_685:
   952                           	callstack 0
   953   000018                     Lcd_CGRAM_CreateChar@i_887:
   954                           	callstack 0
   955                           
   956                           ; 1 bytes @ 0x17
   957   000018                     	ds	1
   958   000019                     Lcd_CGRAM_CreateChar@i_888:
   959                           	callstack 0
   960                           
   961                           ; 1 bytes @ 0x18
   962   000019                     	ds	1
   963   00001A                     Lcd_CGRAM_CreateChar@i_889:
   964                           	callstack 0
   965                           
   966                           ; 1 bytes @ 0x19
   967   00001A                     	ds	1
   968   00001B                     Lcd_CGRAM_CreateChar@i_890:
   969                           	callstack 0
   970                           
   971                           ; 1 bytes @ 0x1A
   972   00001B                     	ds	1
   973   00001C                     ??_main:
   974                           
   975                           ; 1 bytes @ 0x1B
   976   00001C                     	ds	2
   977                           
   978 ;;
   979 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   980 ;;
   981 ;; *************** function _main *****************
   982 ;; Defined at:
   983 ;;		line 301 in file "ASCENSOR.c"
   984 ;; Parameters:    Size  Location     Type
   985 ;;		None
   986 ;; Auto vars:     Size  Location     Type
   987 ;;		None
   988 ;; Return value:  Size  Location     Type
   989 ;;                  1    wreg      void 
   990 ;; Registers used:
   991 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   992 ;; Tracked objects:
   993 ;;		On entry : 0/0
   994 ;;		On exit  : 0/0
   995 ;;		Unchanged: 0/0
   996 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   997 ;;      Params:         0       0       0       0       0       0       0       0       0
   998 ;;      Locals:         0       0       0       0       0       0       0       0       0
   999 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1000 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1001 ;;Total ram usage:        2 bytes
  1002 ;; Hardware stack levels required when called: 9
  1003 ;; This function calls:
  1004 ;;		_Actualizar_Matriz
  1005 ;;		_Lcd_CGRAM_Close
  1006 ;;		_Lcd_CGRAM_CreateChar
  1007 ;;		_Lcd_CGRAM_Init
  1008 ;;		_Lcd_Clear
  1009 ;;		_Lcd_Init
  1010 ;;		_Lcd_Set_Cursor
  1011 ;;		_Lcd_Write_String
  1012 ;;		_Modificar
  1013 ;;		_dejar
  1014 ;;		_detectar
  1015 ;;		_guardar
  1016 ;;		_init_int
  1017 ;;		_init_ports
  1018 ;;		_reposo
  1019 ;; This function is called by:
  1020 ;;		Startup code after reset
  1021 ;; This function uses a non-reentrant model
  1022 ;;
  1023                           
  1024                           	psect	text0
  1025   000C34                     __ptext0:
  1026                           	callstack 0
  1027   000C34                     _main:
  1028                           	callstack 22
  1029   000C34                     
  1030                           ;ASCENSOR.c: 302:     init_ports();
  1031   000C34  ECDA  F009         	call	_init_ports	;wreg free
  1032                           
  1033                           ;ASCENSOR.c: 303:     init_int();
  1034   000C38  ECF6  F009         	call	_init_int	;wreg free
  1035                           
  1036                           ;ASCENSOR.c: 304:     Lcd_Init();
  1037   000C3C  EC7B  F008         	call	_Lcd_Init	;wreg free
  1038                           
  1039                           ;ASCENSOR.c: 305:     Lcd_CGRAM_Init();
  1040   000C40  EC17  F00A         	call	_Lcd_CGRAM_Init	;wreg free
  1041   000C44                     
  1042                           ;ASCENSOR.c: 306:     Lcd_CGRAM_CreateChar(0,figura_1);
  1043   000C44  0E09               	movlw	low _figura_1
  1044   000C46  6E11               	movwf	Lcd_CGRAM_CreateChar@chardata^0,c
  1045   000C48  0E00               	movlw	0
  1046   000C4A  EC26  F005         	call	_Lcd_CGRAM_CreateChar
  1047   000C4E                     
  1048                           ;ASCENSOR.c: 307:     Lcd_CGRAM_CreateChar(1,figura_2);
  1049   000C4E  0E01               	movlw	low _figura_2
  1050   000C50  6E11               	movwf	Lcd_CGRAM_CreateChar@chardata^0,c
  1051   000C52  0E01               	movlw	1
  1052   000C54  EC26  F005         	call	_Lcd_CGRAM_CreateChar
  1053                           
  1054                           ;ASCENSOR.c: 308:     Lcd_CGRAM_Close();
  1055   000C58  EC1E  F00A         	call	_Lcd_CGRAM_Close	;wreg free
  1056                           
  1057                           ;ASCENSOR.c: 311:     Lcd_Clear();
  1058   000C5C  EC10  F00A         	call	_Lcd_Clear	;wreg free
  1059   000C60                     
  1060                           ;ASCENSOR.c: 312:     Lcd_Set_Cursor(1,1);
  1061   000C60  0E01               	movlw	1
  1062   000C62  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1063   000C64  0E01               	movlw	1
  1064   000C66  EC20  F007         	call	_Lcd_Set_Cursor
  1065   000C6A                     
  1066                           ;ASCENSOR.c: 313:     Lcd_Write_String("NEGRAS");
  1067   000C6A  0E2A               	movlw	low STR_2
  1068   000C6C  6E11               	movwf	Lcd_Write_String@a^0,c
  1069   000C6E  EC3F  F009         	call	_Lcd_Write_String	;wreg free
  1070   000C72                     
  1071                           ;ASCENSOR.c: 314:     Lcd_Set_Cursor(2,1);
  1072   000C72  0E01               	movlw	1
  1073   000C74  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1074   000C76  0E02               	movlw	2
  1075   000C78  EC20  F007         	call	_Lcd_Set_Cursor
  1076   000C7C                     
  1077                           ;ASCENSOR.c: 315:     Lcd_Write_String("BLANCAS");
  1078   000C7C  0E1B               	movlw	low STR_3
  1079   000C7E  6E11               	movwf	Lcd_Write_String@a^0,c
  1080   000C80  EC3F  F009         	call	_Lcd_Write_String	;wreg free
  1081   000C84                     
  1082                           ;ASCENSOR.c: 316:     Lcd_Set_Cursor(3,1);
  1083   000C84  0E01               	movlw	1
  1084   000C86  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1085   000C88  0E03               	movlw	3
  1086   000C8A  EC20  F007         	call	_Lcd_Set_Cursor
  1087   000C8E                     
  1088                           ;ASCENSOR.c: 317:     Lcd_Write_String("METAL");
  1089   000C8E  0E31               	movlw	low STR_4
  1090   000C90  6E11               	movwf	Lcd_Write_String@a^0,c
  1091   000C92  EC3F  F009         	call	_Lcd_Write_String	;wreg free
  1092   000C96                     
  1093                           ;ASCENSOR.c: 318:     _delay((unsigned long)((200)*(4000000/4000.0)));
  1094   000C96  0E02               	movlw	2
  1095   000C98  6E1D               	movwf	(??_main+1)^0,c
  1096   000C9A  0E04               	movlw	4
  1097   000C9C  6E1C               	movwf	??_main^0,c
  1098   000C9E  0EBA               	movlw	186
  1099   000CA0                     u1407:
  1100   000CA0  2EE8               	decfsz	wreg,f,c
  1101   000CA2  D7FE               	bra	u1407
  1102   000CA4  2E1C               	decfsz	??_main^0,f,c
  1103   000CA6  D7FC               	bra	u1407
  1104   000CA8  2E1D               	decfsz	(??_main+1)^0,f,c
  1105   000CAA  D7FA               	bra	u1407
  1106   000CAC  D000               	nop2	
  1107   000CAE                     l2196:
  1108                           
  1109                           ;ASCENSOR.c: 321:         Actualizar_Matriz();
  1110   000CAE  ECA9  F006         	call	_Actualizar_Matriz	;wreg free
  1111   000CB2                     
  1112                           ;ASCENSOR.c: 322:         reposo();
  1113   000CB2  EC64  F009         	call	_reposo	;wreg free
  1114   000CB6                     
  1115                           ;ASCENSOR.c: 323:         INTCONbits.GIEL=1;
  1116   000CB6  8CF2               	bsf	242,6,c	;volatile
  1117   000CB8                     
  1118                           ;ASCENSOR.c: 324:         Lcd_Set_Cursor(4,1);
  1119   000CB8  0E01               	movlw	1
  1120   000CBA  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1121   000CBC  0E04               	movlw	4
  1122   000CBE  EC20  F007         	call	_Lcd_Set_Cursor
  1123   000CC2                     
  1124                           ;ASCENSOR.c: 325:         Lcd_Write_String("INICIO");
  1125   000CC2  0E23               	movlw	low STR_5
  1126   000CC4  6E11               	movwf	Lcd_Write_String@a^0,c
  1127   000CC6  EC3F  F009         	call	_Lcd_Write_String	;wreg free
  1128                           
  1129                           ;ASCENSOR.c: 326:     while(PORTBbits.RB0==1){
  1130   000CCA  EF77  F006         	goto	l2210
  1131   000CCE                     l228:
  1132                           
  1133                           ;ASCENSOR.c: 328:         if( PORTBbits.RB3==1 || PORTBbits.RB2==1){
  1134   000CCE  B681               	btfsc	129,3,c	;volatile
  1135   000CD0  EF6C  F006         	goto	u1331
  1136   000CD4  EF6E  F006         	goto	u1330
  1137   000CD8                     u1331:
  1138   000CD8  EF75  F006         	goto	l2208
  1139   000CDC                     u1330:
  1140   000CDC  A481               	btfss	129,2,c	;volatile
  1141   000CDE  EF73  F006         	goto	u1341
  1142   000CE2  EF75  F006         	goto	u1340
  1143   000CE6                     u1341:
  1144   000CE6  EF77  F006         	goto	l2210
  1145   000CEA                     u1340:
  1146   000CEA                     l2208:
  1147                           
  1148                           ;ASCENSOR.c: 329:             Modificar();
  1149   000CEA  EC18  F009         	call	_Modificar	;wreg free
  1150   000CEE                     l2210:
  1151                           
  1152                           ;ASCENSOR.c: 326:     while(PORTBbits.RB0==1){
  1153   000CEE  B081               	btfsc	129,0,c	;volatile
  1154   000CF0  EF7C  F006         	goto	u1351
  1155   000CF4  EF7E  F006         	goto	u1350
  1156   000CF8                     u1351:
  1157   000CF8  EF67  F006         	goto	l228
  1158   000CFC                     u1350:
  1159   000CFC                     
  1160                           ;ASCENSOR.c: 332:     Lcd_Set_Cursor(4,1);
  1161   000CFC  0E01               	movlw	1
  1162   000CFE  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1163   000D00  0E04               	movlw	4
  1164   000D02  EC20  F007         	call	_Lcd_Set_Cursor
  1165   000D06                     
  1166                           ;ASCENSOR.c: 333:     Lcd_Write_String("Hola");
  1167   000D06  0E37               	movlw	low STR_6
  1168   000D08  6E11               	movwf	Lcd_Write_String@a^0,c
  1169   000D0A  EC3F  F009         	call	_Lcd_Write_String	;wreg free
  1170   000D0E                     
  1171                           ;ASCENSOR.c: 334:     detectar();
  1172   000D0E  ECF2  F007         	call	_detectar	;wreg free
  1173   000D12                     
  1174                           ;ASCENSOR.c: 335:     if((METAL==1 || BLANCA==1 || NEGRA==1)){
  1175   000D12  042E               	decf	_METAL^0,w,c
  1176   000D14  B4D8               	btfsc	status,2,c
  1177   000D16  EF8F  F006         	goto	u1361
  1178   000D1A  EF91  F006         	goto	u1360
  1179   000D1E                     u1361:
  1180   000D1E  EFA1  F006         	goto	l2224
  1181   000D22                     u1360:
  1182   000D22  042D               	decf	_BLANCA^0,w,c
  1183   000D24  B4D8               	btfsc	status,2,c
  1184   000D26  EF97  F006         	goto	u1371
  1185   000D2A  EF99  F006         	goto	u1370
  1186   000D2E                     u1371:
  1187   000D2E  EFA1  F006         	goto	l2224
  1188   000D32                     u1370:
  1189   000D32  042C               	decf	_NEGRA^0,w,c
  1190   000D34  A4D8               	btfss	status,2,c
  1191   000D36  EF9F  F006         	goto	u1381
  1192   000D3A  EFA1  F006         	goto	u1380
  1193   000D3E                     u1381:
  1194   000D3E  EF57  F006         	goto	l2196
  1195   000D42                     u1380:
  1196   000D42                     l2224:
  1197                           
  1198                           ;ASCENSOR.c: 336:     dejar();
  1199   000D42  EC1F  F004         	call	_dejar	;wreg free
  1200   000D46                     
  1201                           ;ASCENSOR.c: 337:     guardar();
  1202   000D46  EC39  F008         	call	_guardar	;wreg free
  1203   000D4A  EF57  F006         	goto	l2196
  1204   000D4E  EF6C  F000         	goto	start
  1205   000D52                     __end_of_main:
  1206                           	callstack 0
  1207                           
  1208 ;; *************** function _reposo *****************
  1209 ;; Defined at:
  1210 ;;		line 70 in file "ASCENSOR.c"
  1211 ;; Parameters:    Size  Location     Type
  1212 ;;		None
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;		None
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  1    wreg      void 
  1217 ;; Registers used:
  1218 ;;		None
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1224 ;;      Params:         0       0       0       0       0       0       0       0       0
  1225 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1226 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1227 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1228 ;;Total ram usage:        0 bytes
  1229 ;; Hardware stack levels used: 1
  1230 ;; Hardware stack levels required when called: 5
  1231 ;; This function calls:
  1232 ;;		Nothing
  1233 ;; This function is called by:
  1234 ;;		_main
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238                           	psect	text1
  1239   0012C8                     __ptext1:
  1240                           	callstack 0
  1241   0012C8                     _reposo:
  1242                           	callstack 25
  1243   0012C8                     
  1244                           ;ASCENSOR.c: 71:  if(PORTAbits.RA1==1){
  1245   0012C8  A280               	btfss	128,1,c	;volatile
  1246   0012CA  EF69  F009         	goto	u151
  1247   0012CE  EF6B  F009         	goto	u150
  1248   0012D2                     u151:
  1249   0012D2  EF74  F009         	goto	l105
  1250   0012D6                     u150:
  1251   0012D6                     
  1252                           ;ASCENSOR.c: 72:   LATDbits.LATD3=1;
  1253   0012D6  868C               	bsf	140,3,c	;volatile
  1254   0012D8                     l106:
  1255   0012D8  B280               	btfsc	128,1,c	;volatile
  1256   0012DA  EF71  F009         	goto	u161
  1257   0012DE  EF73  F009         	goto	u160
  1258   0012E2                     u161:
  1259   0012E2  EF6C  F009         	goto	l106
  1260   0012E6                     u160:
  1261   0012E6                     
  1262                           ;ASCENSOR.c: 74:      LATDbits.LATD3=0;
  1263   0012E6  968C               	bcf	140,3,c	;volatile
  1264   0012E8                     l105:
  1265                           
  1266                           ;ASCENSOR.c: 77:     if(PORTAbits.RA2==1){
  1267   0012E8  A480               	btfss	128,2,c	;volatile
  1268   0012EA  EF79  F009         	goto	u171
  1269   0012EE  EF7B  F009         	goto	u170
  1270   0012F2                     u171:
  1271   0012F2  EF84  F009         	goto	l113
  1272   0012F6                     u170:
  1273   0012F6                     
  1274                           ;ASCENSOR.c: 78:      LATDbits.LATD0=1;
  1275   0012F6  808C               	bsf	140,0,c	;volatile
  1276   0012F8                     l110:
  1277   0012F8  B480               	btfsc	128,2,c	;volatile
  1278   0012FA  EF81  F009         	goto	u181
  1279   0012FE  EF83  F009         	goto	u180
  1280   001302                     u181:
  1281   001302  EF7C  F009         	goto	l110
  1282   001306                     u180:
  1283   001306                     
  1284                           ;ASCENSOR.c: 80:      LATDbits.LATD0=0;
  1285   001306  908C               	bcf	140,0,c	;volatile
  1286   001308                     l113:
  1287   001308  0012               	return		;funcret
  1288   00130A                     __end_of_reposo:
  1289                           	callstack 0
  1290                           
  1291 ;; *************** function _init_ports *****************
  1292 ;; Defined at:
  1293 ;;		line 41 in file "ASCENSOR.c"
  1294 ;; Parameters:    Size  Location     Type
  1295 ;;		None
  1296 ;; Auto vars:     Size  Location     Type
  1297 ;;		None
  1298 ;; Return value:  Size  Location     Type
  1299 ;;                  1    wreg      void 
  1300 ;; Registers used:
  1301 ;;		wreg, status,2
  1302 ;; Tracked objects:
  1303 ;;		On entry : 0/0
  1304 ;;		On exit  : 0/0
  1305 ;;		Unchanged: 0/0
  1306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1307 ;;      Params:         0       0       0       0       0       0       0       0       0
  1308 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1309 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1310 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1311 ;;Total ram usage:        0 bytes
  1312 ;; Hardware stack levels used: 1
  1313 ;; Hardware stack levels required when called: 5
  1314 ;; This function calls:
  1315 ;;		Nothing
  1316 ;; This function is called by:
  1317 ;;		_main
  1318 ;; This function uses a non-reentrant model
  1319 ;;
  1320                           
  1321                           	psect	text2
  1322   0013B4                     __ptext2:
  1323                           	callstack 0
  1324   0013B4                     _init_ports:
  1325                           	callstack 25
  1326   0013B4                     
  1327                           ;ASCENSOR.c: 42:     ADCON1bits.PCFG=0x0F;
  1328   0013B4  0E0F               	movlw	15
  1329   0013B6  12C1               	iorwf	193,f,c	;volatile
  1330   0013B8                     
  1331                           ;ASCENSOR.c: 43:     TRISB=0XFF;
  1332   0013B8  6893               	setf	147,c	;volatile
  1333   0013BA                     
  1334                           ;ASCENSOR.c: 44:     TRISA=0XFF;
  1335   0013BA  6892               	setf	146,c	;volatile
  1336   0013BC                     
  1337                           ;ASCENSOR.c: 45:     TRISD=0X00;
  1338   0013BC  6A95               	clrf	149,c	;volatile
  1339   0013BE                     
  1340                           ;ASCENSOR.c: 46:     TRISE=0X00;
  1341   0013BE  6A96               	clrf	150,c	;volatile
  1342   0013C0                     
  1343                           ;ASCENSOR.c: 47:     TRISC=0XFF;
  1344   0013C0  6894               	setf	148,c	;volatile
  1345   0013C2                     
  1346                           ;ASCENSOR.c: 48:     TRISCbits.RC0=0;
  1347   0013C2  9094               	bcf	148,0,c	;volatile
  1348   0013C4                     
  1349                           ;ASCENSOR.c: 49:     TRISCbits.RC6=0;
  1350   0013C4  9C94               	bcf	148,6,c	;volatile
  1351   0013C6                     
  1352                           ;ASCENSOR.c: 51:     LATA=0X00;
  1353   0013C6  6A89               	clrf	137,c	;volatile
  1354   0013C8                     
  1355                           ;ASCENSOR.c: 52:     LATB=0X00;
  1356   0013C8  6A8A               	clrf	138,c	;volatile
  1357   0013CA                     
  1358                           ;ASCENSOR.c: 53:     LATC=0X00;
  1359   0013CA  6A8B               	clrf	139,c	;volatile
  1360   0013CC                     
  1361                           ;ASCENSOR.c: 54:     LATD=0X00;
  1362   0013CC  6A8C               	clrf	140,c	;volatile
  1363   0013CE                     
  1364                           ;ASCENSOR.c: 55:     LATE=0X00;
  1365   0013CE  6A8D               	clrf	141,c	;volatile
  1366   0013D0  0012               	return		;funcret
  1367   0013D2                     __end_of_init_ports:
  1368                           	callstack 0
  1369                           
  1370 ;; *************** function _init_int *****************
  1371 ;; Defined at:
  1372 ;;		line 59 in file "ASCENSOR.c"
  1373 ;; Parameters:    Size  Location     Type
  1374 ;;		None
  1375 ;; Auto vars:     Size  Location     Type
  1376 ;;		None
  1377 ;; Return value:  Size  Location     Type
  1378 ;;                  1    wreg      void 
  1379 ;; Registers used:
  1380 ;;		wreg, status,2
  1381 ;; Tracked objects:
  1382 ;;		On entry : 0/0
  1383 ;;		On exit  : 0/0
  1384 ;;		Unchanged: 0/0
  1385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1386 ;;      Params:         0       0       0       0       0       0       0       0       0
  1387 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1388 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1389 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1390 ;;Total ram usage:        0 bytes
  1391 ;; Hardware stack levels used: 1
  1392 ;; Hardware stack levels required when called: 5
  1393 ;; This function calls:
  1394 ;;		Nothing
  1395 ;; This function is called by:
  1396 ;;		_main
  1397 ;; This function uses a non-reentrant model
  1398 ;;
  1399                           
  1400                           	psect	text3
  1401   0013EC                     __ptext3:
  1402                           	callstack 0
  1403   0013EC                     _init_int:
  1404                           	callstack 25
  1405   0013EC                     
  1406                           ;ASCENSOR.c: 60:     RCONbits.IPEN= 1;
  1407   0013EC  8ED0               	bsf	208,7,c	;volatile
  1408                           
  1409                           ;ASCENSOR.c: 61:     INTCONbits.RBIE=1;
  1410   0013EE  86F2               	bsf	242,3,c	;volatile
  1411                           
  1412                           ;ASCENSOR.c: 62:     INTCONbits.RBIF=0;
  1413   0013F0  90F2               	bcf	242,0,c	;volatile
  1414                           
  1415                           ;ASCENSOR.c: 63:     INTCON2bits.RBIP=0;
  1416   0013F2  90F1               	bcf	241,0,c	;volatile
  1417   0013F4                     
  1418                           ;ASCENSOR.c: 64:     T0CON = 0B01111000;
  1419   0013F4  0E78               	movlw	120
  1420   0013F6  6ED5               	movwf	213,c	;volatile
  1421                           
  1422                           ;ASCENSOR.c: 65:     INTCON = 0B10101000;
  1423   0013F8  0EA8               	movlw	168
  1424   0013FA  6EF2               	movwf	242,c	;volatile
  1425   0013FC                     
  1426                           ;ASCENSOR.c: 66:     INTCON2bits.TMR0IP = 1;
  1427   0013FC  84F1               	bsf	241,2,c	;volatile
  1428   0013FE  0012               	return		;funcret
  1429   001400                     __end_of_init_int:
  1430                           	callstack 0
  1431                           
  1432 ;; *************** function _guardar *****************
  1433 ;; Defined at:
  1434 ;;		line 160 in file "ASCENSOR.c"
  1435 ;; Parameters:    Size  Location     Type
  1436 ;;		None
  1437 ;; Auto vars:     Size  Location     Type
  1438 ;;  i               1   17[COMRAM] unsigned char 
  1439 ;;  i               1   16[COMRAM] unsigned char 
  1440 ;;  i               1   15[COMRAM] unsigned char 
  1441 ;;  media           1   14[COMRAM] unsigned char 
  1442 ;; Return value:  Size  Location     Type
  1443 ;;                  1    wreg      void 
  1444 ;; Registers used:
  1445 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  1446 ;; Tracked objects:
  1447 ;;		On entry : 0/0
  1448 ;;		On exit  : 0/0
  1449 ;;		Unchanged: 0/0
  1450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1451 ;;      Params:         0       0       0       0       0       0       0       0       0
  1452 ;;      Locals:         4       0       0       0       0       0       0       0       0
  1453 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1454 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1455 ;;Total ram usage:        4 bytes
  1456 ;; Hardware stack levels used: 1
  1457 ;; Hardware stack levels required when called: 6
  1458 ;; This function calls:
  1459 ;;		_EEPROM_Write
  1460 ;; This function is called by:
  1461 ;;		_main
  1462 ;; This function uses a non-reentrant model
  1463 ;;
  1464                           
  1465                           	psect	text4
  1466   001072                     __ptext4:
  1467                           	callstack 0
  1468   001072                     _guardar:
  1469                           	callstack 24
  1470   001072                     
  1471                           ;ASCENSOR.c: 161:     char media;;ASCENSOR.c: 162:     for (char i=0; i<=3; i++){
  1472   001072  6A10               	clrf	guardar@i^0,c
  1473   001074                     l1968:
  1474                           
  1475                           ;ASCENSOR.c: 163:         media= Fila1[i];
  1476   001074  5010               	movf	guardar@i^0,w,c
  1477   001076  0F26               	addlw	low _Fila1
  1478   001078  6ED9               	movwf	fsr2l,c
  1479   00107A  6ADA               	clrf	fsr2h,c
  1480   00107C  50DF               	movf	indf2,w,c
  1481   00107E  6E0F               	movwf	guardar@media^0,c
  1482   001080                     
  1483                           ;ASCENSOR.c: 164:         EEPROM_Write(i,media);
  1484   001080  C00F  F00D         	movff	guardar@media,EEPROM_Write@data
  1485   001084  5010               	movf	guardar@i^0,w,c
  1486   001086  ECA1  F009         	call	_EEPROM_Write
  1487   00108A                     
  1488                           ;ASCENSOR.c: 165:     }
  1489   00108A  2A10               	incf	guardar@i^0,f,c
  1490   00108C  0E03               	movlw	3
  1491   00108E  6410               	cpfsgt	guardar@i^0,c
  1492   001090  EF4C  F008         	goto	u1081
  1493   001094  EF4E  F008         	goto	u1080
  1494   001098                     u1081:
  1495   001098  EF3A  F008         	goto	l1968
  1496   00109C                     u1080:
  1497   00109C                     
  1498                           ;ASCENSOR.c: 166:     for (char i=0; i<=3; i++){
  1499   00109C  6A11               	clrf	guardar@i_692^0,c
  1500   00109E                     l1980:
  1501                           
  1502                           ;ASCENSOR.c: 167:         media= Fila2[i];
  1503   00109E  5011               	movf	guardar@i_692^0,w,c
  1504   0010A0  0F22               	addlw	low _Fila2
  1505   0010A2  6ED9               	movwf	fsr2l,c
  1506   0010A4  6ADA               	clrf	fsr2h,c
  1507   0010A6  50DF               	movf	indf2,w,c
  1508   0010A8  6E0F               	movwf	guardar@media^0,c
  1509   0010AA                     
  1510                           ;ASCENSOR.c: 168:         EEPROM_Write(i+4,media);
  1511   0010AA  C00F  F00D         	movff	guardar@media,EEPROM_Write@data
  1512   0010AE  5011               	movf	guardar@i_692^0,w,c
  1513   0010B0  0F04               	addlw	4
  1514   0010B2  ECA1  F009         	call	_EEPROM_Write
  1515   0010B6                     
  1516                           ;ASCENSOR.c: 169:     }
  1517   0010B6  2A11               	incf	guardar@i_692^0,f,c
  1518   0010B8  0E03               	movlw	3
  1519   0010BA  6411               	cpfsgt	guardar@i_692^0,c
  1520   0010BC  EF62  F008         	goto	u1091
  1521   0010C0  EF64  F008         	goto	u1090
  1522   0010C4                     u1091:
  1523   0010C4  EF4F  F008         	goto	l1980
  1524   0010C8                     u1090:
  1525   0010C8                     
  1526                           ;ASCENSOR.c: 170:     for (char i=0; i<=3; i++){
  1527   0010C8  6A12               	clrf	guardar@i_693^0,c
  1528   0010CA                     l1992:
  1529                           
  1530                           ;ASCENSOR.c: 171:         media= Fila3[i];
  1531   0010CA  5012               	movf	guardar@i_693^0,w,c
  1532   0010CC  0F1E               	addlw	low _Fila3
  1533   0010CE  6ED9               	movwf	fsr2l,c
  1534   0010D0  6ADA               	clrf	fsr2h,c
  1535   0010D2  50DF               	movf	indf2,w,c
  1536   0010D4  6E0F               	movwf	guardar@media^0,c
  1537   0010D6                     
  1538                           ;ASCENSOR.c: 172:         EEPROM_Write(i+8,media);
  1539   0010D6  C00F  F00D         	movff	guardar@media,EEPROM_Write@data
  1540   0010DA  5012               	movf	guardar@i_693^0,w,c
  1541   0010DC  0F08               	addlw	8
  1542   0010DE  ECA1  F009         	call	_EEPROM_Write
  1543   0010E2                     
  1544                           ;ASCENSOR.c: 173:     }
  1545   0010E2  2A12               	incf	guardar@i_693^0,f,c
  1546   0010E4  0E03               	movlw	3
  1547   0010E6  6412               	cpfsgt	guardar@i_693^0,c
  1548   0010E8  EF78  F008         	goto	u1101
  1549   0010EC  EF7A  F008         	goto	u1100
  1550   0010F0                     u1101:
  1551   0010F0  EF65  F008         	goto	l1992
  1552   0010F4                     u1100:
  1553   0010F4  0012               	return		;funcret
  1554   0010F6                     __end_of_guardar:
  1555                           	callstack 0
  1556                           
  1557 ;; *************** function _EEPROM_Write *****************
  1558 ;; Defined at:
  1559 ;;		line 3 in file "../EEPROM_RW.X/eeprom.c"
  1560 ;; Parameters:    Size  Location     Type
  1561 ;;  dir             1    wreg     unsigned char 
  1562 ;;  data            1   12[COMRAM] unsigned char 
  1563 ;; Auto vars:     Size  Location     Type
  1564 ;;  dir             1   13[COMRAM] unsigned char 
  1565 ;; Return value:  Size  Location     Type
  1566 ;;                  1    wreg      void 
  1567 ;; Registers used:
  1568 ;;		wreg, status,2
  1569 ;; Tracked objects:
  1570 ;;		On entry : 0/0
  1571 ;;		On exit  : 0/0
  1572 ;;		Unchanged: 0/0
  1573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1574 ;;      Params:         1       0       0       0       0       0       0       0       0
  1575 ;;      Locals:         1       0       0       0       0       0       0       0       0
  1576 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1577 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1578 ;;Total ram usage:        2 bytes
  1579 ;; Hardware stack levels used: 1
  1580 ;; Hardware stack levels required when called: 5
  1581 ;; This function calls:
  1582 ;;		Nothing
  1583 ;; This function is called by:
  1584 ;;		_guardar
  1585 ;;		_Clear
  1586 ;;		_EEPROM_Clear
  1587 ;; This function uses a non-reentrant model
  1588 ;;
  1589                           
  1590                           	psect	text5
  1591   001342                     __ptext5:
  1592                           	callstack 0
  1593   001342                     _EEPROM_Write:
  1594                           	callstack 24
  1595                           
  1596                           ;incstack = 0
  1597                           ;EEPROM_Write@dir stored from wreg
  1598   001342  6E0E               	movwf	EEPROM_Write@dir^0,c
  1599   001344                     
  1600                           ;../EEPROM_RW.X/eeprom.c: 3: void EEPROM_Write(unsigned char dir, unsigned char data);..
      +                          /EEPROM_RW.X/eeprom.c: 4: {;../EEPROM_RW.X/eeprom.c: 5:     EEADR = dir;
  1601   001344  C00E  FFA9         	movff	EEPROM_Write@dir,4009	;volatile
  1602   001348                     
  1603                           ;../EEPROM_RW.X/eeprom.c: 6:     EEDATA = data;
  1604   001348  C00D  FFA8         	movff	EEPROM_Write@data,4008	;volatile
  1605   00134C                     
  1606                           ;../EEPROM_RW.X/eeprom.c: 7:     EECON1bits.EEPGD = 0;
  1607   00134C  9EA6               	bcf	166,7,c	;volsfr
  1608   00134E                     
  1609                           ;../EEPROM_RW.X/eeprom.c: 8:     EECON1bits.CFGS = 0;
  1610   00134E  9CA6               	bcf	166,6,c	;volsfr
  1611   001350                     
  1612                           ;../EEPROM_RW.X/eeprom.c: 9:     EECON1bits.WREN = 1;
  1613   001350  84A6               	bsf	166,2,c	;volsfr
  1614   001352                     
  1615                           ;../EEPROM_RW.X/eeprom.c: 10:     INTCONbits.GIE = 0;
  1616   001352  9EF2               	bcf	242,7,c	;volatile
  1617   001354                     
  1618                           ;../EEPROM_RW.X/eeprom.c: 11:     EECON2 = 0x55;
  1619   001354  0E55               	movlw	85
  1620   001356  6EA7               	movwf	167,c	;volsfr
  1621   001358                     
  1622                           ;../EEPROM_RW.X/eeprom.c: 12:     EECON2 = 0x0AA;
  1623   001358  0EAA               	movlw	170
  1624   00135A  6EA7               	movwf	167,c	;volsfr
  1625   00135C                     
  1626                           ;../EEPROM_RW.X/eeprom.c: 13:     EECON1bits.WR = 1;
  1627   00135C  82A6               	bsf	166,1,c	;volsfr
  1628   00135E                     
  1629                           ;../EEPROM_RW.X/eeprom.c: 14:     INTCONbits.GIE = 1;
  1630   00135E  8EF2               	bsf	242,7,c	;volatile
  1631   001360                     l355:
  1632   001360  A8A1               	btfss	161,4,c	;volatile
  1633   001362  EFB5  F009         	goto	u951
  1634   001366  EFB7  F009         	goto	u950
  1635   00136A                     u951:
  1636   00136A  EFB0  F009         	goto	l355
  1637   00136E                     u950:
  1638   00136E                     
  1639                           ;../EEPROM_RW.X/eeprom.c: 16:     PIR2bits.EEIF = 0;
  1640   00136E  98A1               	bcf	161,4,c	;volatile
  1641                           
  1642                           ;../EEPROM_RW.X/eeprom.c: 17:     EECON1bits.WREN = 0;
  1643   001370  94A6               	bcf	166,2,c	;volsfr
  1644   001372  0012               	return		;funcret
  1645   001374                     __end_of_EEPROM_Write:
  1646                           	callstack 0
  1647                           
  1648 ;; *************** function _detectar *****************
  1649 ;; Defined at:
  1650 ;;		line 85 in file "ASCENSOR.c"
  1651 ;; Parameters:    Size  Location     Type
  1652 ;;		None
  1653 ;; Auto vars:     Size  Location     Type
  1654 ;;		None
  1655 ;; Return value:  Size  Location     Type
  1656 ;;                  1    wreg      void 
  1657 ;; Registers used:
  1658 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1659 ;; Tracked objects:
  1660 ;;		On entry : 0/0
  1661 ;;		On exit  : 0/0
  1662 ;;		Unchanged: 0/0
  1663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1664 ;;      Params:         0       0       0       0       0       0       0       0       0
  1665 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1666 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1667 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1668 ;;Total ram usage:        0 bytes
  1669 ;; Hardware stack levels used: 1
  1670 ;; Hardware stack levels required when called: 8
  1671 ;; This function calls:
  1672 ;;		_Lcd_Set_Cursor
  1673 ;;		_Lcd_Write_String
  1674 ;; This function is called by:
  1675 ;;		_main
  1676 ;; This function uses a non-reentrant model
  1677 ;;
  1678                           
  1679                           	psect	text6
  1680   000FE4                     __ptext6:
  1681                           	callstack 0
  1682   000FE4                     _detectar:
  1683                           	callstack 22
  1684   000FE4                     
  1685                           ;ASCENSOR.c: 86:  if(PORTCbits.RC1==0 && PORTCbits.RC2==1){
  1686   000FE4  B282               	btfsc	130,1,c	;volatile
  1687   000FE6  EFF7  F007         	goto	u961
  1688   000FEA  EFF9  F007         	goto	u960
  1689   000FEE                     u961:
  1690   000FEE  EF07  F008         	goto	l116
  1691   000FF2                     u960:
  1692   000FF2  A482               	btfss	130,2,c	;volatile
  1693   000FF4  EFFE  F007         	goto	u971
  1694   000FF8  EF00  F008         	goto	u970
  1695   000FFC                     u971:
  1696   000FFC  EF07  F008         	goto	l116
  1697   001000                     u970:
  1698   001000                     
  1699                           ;ASCENSOR.c: 87:   METAL=1;
  1700   001000  0E01               	movlw	1
  1701   001002  6E2E               	movwf	_METAL^0,c
  1702                           
  1703                           ;ASCENSOR.c: 88:   TMR0L= 249;
  1704   001004  0EF9               	movlw	249
  1705   001006  6ED6               	movwf	214,c	;volatile
  1706   001008                     
  1707                           ;ASCENSOR.c: 89:         T0CONbits.TMR0ON = 1;
  1708   001008  8ED5               	bsf	213,7,c	;volatile
  1709                           
  1710                           ;ASCENSOR.c: 90:  }
  1711   00100A  EF2F  F008         	goto	l1888
  1712   00100E                     l116:
  1713   00100E  A282               	btfss	130,1,c	;volatile
  1714   001010  EF0C  F008         	goto	u981
  1715   001014  EF0E  F008         	goto	u980
  1716   001018                     u981:
  1717   001018  EF1C  F008         	goto	l118
  1718   00101C                     u980:
  1719   00101C  B482               	btfsc	130,2,c	;volatile
  1720   00101E  EF13  F008         	goto	u991
  1721   001022  EF15  F008         	goto	u990
  1722   001026                     u991:
  1723   001026  EF1C  F008         	goto	l118
  1724   00102A                     u990:
  1725   00102A                     
  1726                           ;ASCENSOR.c: 92:   BLANCA=1;
  1727   00102A  0E01               	movlw	1
  1728   00102C  6E2D               	movwf	_BLANCA^0,c
  1729                           
  1730                           ;ASCENSOR.c: 93:         TMR0L= 232;
  1731   00102E  0EE8               	movlw	232
  1732   001030  6ED6               	movwf	214,c	;volatile
  1733   001032                     
  1734                           ;ASCENSOR.c: 94:         T0CONbits.TMR0ON = 1;
  1735   001032  8ED5               	bsf	213,7,c	;volatile
  1736                           
  1737                           ;ASCENSOR.c: 95:  }
  1738   001034  EF2F  F008         	goto	l1888
  1739   001038                     l118:
  1740   001038  B282               	btfsc	130,1,c	;volatile
  1741   00103A  EF21  F008         	goto	u1001
  1742   00103E  EF23  F008         	goto	u1000
  1743   001042                     u1001:
  1744   001042  EF2F  F008         	goto	l1888
  1745   001046                     u1000:
  1746   001046  B482               	btfsc	130,2,c	;volatile
  1747   001048  EF28  F008         	goto	u1011
  1748   00104C  EF2A  F008         	goto	u1010
  1749   001050                     u1011:
  1750   001050  EF2F  F008         	goto	l1888
  1751   001054                     u1010:
  1752   001054                     
  1753                           ;ASCENSOR.c: 97:   NEGRA=1;
  1754   001054  0E01               	movlw	1
  1755   001056  6E2C               	movwf	_NEGRA^0,c
  1756                           
  1757                           ;ASCENSOR.c: 98:         TMR0L= 220;
  1758   001058  0EDC               	movlw	220
  1759   00105A  6ED6               	movwf	214,c	;volatile
  1760   00105C                     
  1761                           ;ASCENSOR.c: 99:         T0CONbits.TMR0ON = 1;
  1762   00105C  8ED5               	bsf	213,7,c	;volatile
  1763   00105E                     l1888:
  1764                           
  1765                           ;ASCENSOR.c: 101:     Lcd_Set_Cursor(4,1);
  1766   00105E  0E01               	movlw	1
  1767   001060  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1768   001062  0E04               	movlw	4
  1769   001064  EC20  F007         	call	_Lcd_Set_Cursor
  1770   001068                     
  1771                           ;ASCENSOR.c: 102:     Lcd_Write_String("DETECTADO");
  1772   001068  0E11               	movlw	low STR_1
  1773   00106A  6E11               	movwf	Lcd_Write_String@a^0,c
  1774   00106C  EC3F  F009         	call	_Lcd_Write_String	;wreg free
  1775   001070  0012               	return		;funcret
  1776   001072                     __end_of_detectar:
  1777                           	callstack 0
  1778                           
  1779 ;; *************** function _Lcd_Write_String *****************
  1780 ;; Defined at:
  1781 ;;		line 104 in file "lcd.c"
  1782 ;; Parameters:    Size  Location     Type
  1783 ;;  a               1   16[COMRAM] PTR const unsigned char 
  1784 ;;		 -> STR_6(5), STR_5(7), STR_4(6), STR_3(8), 
  1785 ;;		 -> STR_2(7), STR_1(10), 
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;  i               2   18[COMRAM] int 
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      void 
  1790 ;; Registers used:
  1791 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1797 ;;      Params:         1       0       0       0       0       0       0       0       0
  1798 ;;      Locals:         2       0       0       0       0       0       0       0       0
  1799 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1800 ;;      Totals:         4       0       0       0       0       0       0       0       0
  1801 ;;Total ram usage:        4 bytes
  1802 ;; Hardware stack levels used: 1
  1803 ;; Hardware stack levels required when called: 7
  1804 ;; This function calls:
  1805 ;;		_Lcd_Write_Char
  1806 ;; This function is called by:
  1807 ;;		_detectar
  1808 ;;		_main
  1809 ;; This function uses a non-reentrant model
  1810 ;;
  1811                           
  1812                           	psect	text7
  1813   00127E                     __ptext7:
  1814                           	callstack 0
  1815   00127E                     _Lcd_Write_String:
  1816                           	callstack 22
  1817   00127E                     
  1818                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
  1819   00127E  0E00               	movlw	0
  1820   001280  6E14               	movwf	(Lcd_Write_String@i+1)^0,c
  1821   001282  0E00               	movlw	0
  1822   001284  6E13               	movwf	Lcd_Write_String@i^0,c
  1823   001286  EF52  F009         	goto	l1836
  1824   00128A                     l1832:
  1825                           
  1826                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
  1827   00128A  5011               	movf	Lcd_Write_String@a^0,w,c
  1828   00128C  2413               	addwf	Lcd_Write_String@i^0,w,c
  1829   00128E  6E12               	movwf	??_Lcd_Write_String^0,c
  1830   001290  C012  FFF6         	movff	??_Lcd_Write_String,tblptrl
  1831   001294                     	if	1	;There is more than 1 active tblptr byte
  1832   001294  0E08               	movlw	high __smallconst
  1833   001296  6EF7               	movwf	tblptrh,c
  1834   001298                     	endif
  1835   001298                     	if	0	;tblptru may be non-zero
  1836   001298                     	endif
  1837   001298                     	if	0	;tblptru may be non-zero
  1838   001298                     	endif
  1839   001298  0008               	tblrd		*
  1840   00129A  50F5               	movf	tablat,w,c
  1841   00129C  EC85  F009         	call	_Lcd_Write_Char
  1842   0012A0  4A13               	infsnz	Lcd_Write_String@i^0,f,c
  1843   0012A2  2A14               	incf	(Lcd_Write_String@i+1)^0,f,c
  1844   0012A4                     l1836:
  1845   0012A4  5011               	movf	Lcd_Write_String@a^0,w,c
  1846   0012A6  2413               	addwf	Lcd_Write_String@i^0,w,c
  1847   0012A8  6E12               	movwf	??_Lcd_Write_String^0,c
  1848   0012AA  C012  FFF6         	movff	??_Lcd_Write_String,tblptrl
  1849   0012AE                     	if	1	;There is more than 1 active tblptr byte
  1850   0012AE  0E08               	movlw	high __smallconst
  1851   0012B0  6EF7               	movwf	tblptrh,c
  1852   0012B2                     	endif
  1853   0012B2                     	if	0	;tblptru may be non-zero
  1854   0012B2                     	endif
  1855   0012B2                     	if	0	;tblptru may be non-zero
  1856   0012B2                     	endif
  1857   0012B2  0008               	tblrd		*
  1858   0012B4  50F5               	movf	tablat,w,c
  1859   0012B6  0900               	iorlw	0
  1860   0012B8  A4D8               	btfss	status,2,c
  1861   0012BA  EF61  F009         	goto	u941
  1862   0012BE  EF63  F009         	goto	u940
  1863   0012C2                     u941:
  1864   0012C2  EF45  F009         	goto	l1832
  1865   0012C6                     u940:
  1866   0012C6  0012               	return		;funcret
  1867   0012C8                     __end_of_Lcd_Write_String:
  1868                           	callstack 0
  1869                           
  1870 ;; *************** function _dejar *****************
  1871 ;; Defined at:
  1872 ;;		line 238 in file "ASCENSOR.c"
  1873 ;; Parameters:    Size  Location     Type
  1874 ;;		None
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;  i               1   18[COMRAM] unsigned char 
  1877 ;;  i               1   17[COMRAM] unsigned char 
  1878 ;;  i               1   16[COMRAM] unsigned char 
  1879 ;;  SALTO           1   15[COMRAM] unsigned char 
  1880 ;;  acum            1   14[COMRAM] unsigned char 
  1881 ;; Return value:  Size  Location     Type
  1882 ;;                  1    wreg      void 
  1883 ;; Registers used:
  1884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1890 ;;      Params:         0       0       0       0       0       0       0       0       0
  1891 ;;      Locals:         5       0       0       0       0       0       0       0       0
  1892 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1893 ;;      Totals:         7       0       0       0       0       0       0       0       0
  1894 ;;Total ram usage:        7 bytes
  1895 ;; Hardware stack levels used: 1
  1896 ;; Hardware stack levels required when called: 5
  1897 ;; This function calls:
  1898 ;;		Nothing
  1899 ;; This function is called by:
  1900 ;;		_main
  1901 ;; This function uses a non-reentrant model
  1902 ;;
  1903                           
  1904                           	psect	text8
  1905   00083E                     __ptext8:
  1906                           	callstack 0
  1907   00083E                     _dejar:
  1908                           	callstack 25
  1909   00083E                     
  1910                           ;ASCENSOR.c: 239:     char acum=0, SALTO;
  1911   00083E  6A0F               	clrf	dejar@acum^0,c
  1912   000840                     
  1913                           ;ASCENSOR.c: 241:     if(METAL!=0){
  1914   000840  502E               	movf	_METAL^0,w,c
  1915   000842  B4D8               	btfsc	status,2,c
  1916   000844  EF26  F004         	goto	u381
  1917   000848  EF28  F004         	goto	u380
  1918   00084C                     u381:
  1919   00084C  EF4C  F004         	goto	l1386
  1920   000850                     u380:
  1921   000850                     
  1922                           ;ASCENSOR.c: 242:         for(char i=0;i<=3;i++){
  1923   000850  6A11               	clrf	dejar@i^0,c
  1924   000852                     l1376:
  1925                           
  1926                           ;ASCENSOR.c: 243:             if(Fila1[i]==0){
  1927   000852  5011               	movf	dejar@i^0,w,c
  1928   000854  0F26               	addlw	low _Fila1
  1929   000856  6ED9               	movwf	fsr2l,c
  1930   000858  6ADA               	clrf	fsr2h,c
  1931   00085A  50DF               	movf	indf2,w,c
  1932   00085C  A4D8               	btfss	status,2,c
  1933   00085E  EF33  F004         	goto	u391
  1934   000862  EF35  F004         	goto	u390
  1935   000866                     u391:
  1936   000866  EF41  F004         	goto	l1382
  1937   00086A                     u390:
  1938   00086A                     
  1939                           ;ASCENSOR.c: 244:                 Fila1[i]=1;
  1940   00086A  5011               	movf	dejar@i^0,w,c
  1941   00086C  0F26               	addlw	low _Fila1
  1942   00086E  6ED9               	movwf	fsr2l,c
  1943   000870  6ADA               	clrf	fsr2h,c
  1944   000872  0E01               	movlw	1
  1945   000874  6EDF               	movwf	indf2,c
  1946   000876                     
  1947                           ;ASCENSOR.c: 245:                 SALTO= (i+1)*9;
  1948   000876  2811               	incf	dejar@i^0,w,c
  1949   000878  0D09               	mullw	9
  1950   00087A  CFF3 F010          	movff	prodl,dejar@SALTO
  1951                           
  1952                           ;ASCENSOR.c: 246:                 break;
  1953   00087E  EFA2  F004         	goto	l192
  1954   000882                     l1382:
  1955                           
  1956                           ;ASCENSOR.c: 248:         }
  1957   000882  2A11               	incf	dejar@i^0,f,c
  1958   000884  0E03               	movlw	3
  1959   000886  6411               	cpfsgt	dejar@i^0,c
  1960   000888  EF48  F004         	goto	u401
  1961   00088C  EF4A  F004         	goto	u400
  1962   000890                     u401:
  1963   000890  EF29  F004         	goto	l1376
  1964   000894                     u400:
  1965   000894  EFA2  F004         	goto	l192
  1966   000898                     l1386:
  1967   000898  502D               	movf	_BLANCA^0,w,c
  1968   00089A  B4D8               	btfsc	status,2,c
  1969   00089C  EF52  F004         	goto	u411
  1970   0008A0  EF54  F004         	goto	u410
  1971   0008A4                     u411:
  1972   0008A4  EF78  F004         	goto	l1404
  1973   0008A8                     u410:
  1974   0008A8                     
  1975                           ;ASCENSOR.c: 251:         for(char i=0;i<=3;i++){
  1976   0008A8  6A12               	clrf	dejar@i_726^0,c
  1977   0008AA                     l1394:
  1978                           
  1979                           ;ASCENSOR.c: 252:             if(Fila2[i]==0){
  1980   0008AA  5012               	movf	dejar@i_726^0,w,c
  1981   0008AC  0F22               	addlw	low _Fila2
  1982   0008AE  6ED9               	movwf	fsr2l,c
  1983   0008B0  6ADA               	clrf	fsr2h,c
  1984   0008B2  50DF               	movf	indf2,w,c
  1985   0008B4  A4D8               	btfss	status,2,c
  1986   0008B6  EF5F  F004         	goto	u421
  1987   0008BA  EF61  F004         	goto	u420
  1988   0008BE                     u421:
  1989   0008BE  EF6D  F004         	goto	l1400
  1990   0008C2                     u420:
  1991   0008C2                     
  1992                           ;ASCENSOR.c: 253:                 Fila2[i]=1;
  1993   0008C2  5012               	movf	dejar@i_726^0,w,c
  1994   0008C4  0F22               	addlw	low _Fila2
  1995   0008C6  6ED9               	movwf	fsr2l,c
  1996   0008C8  6ADA               	clrf	fsr2h,c
  1997   0008CA  0E01               	movlw	1
  1998   0008CC  6EDF               	movwf	indf2,c
  1999   0008CE                     
  2000                           ;ASCENSOR.c: 254:                 SALTO= (i+1)*9;
  2001   0008CE  2812               	incf	dejar@i_726^0,w,c
  2002   0008D0  0D09               	mullw	9
  2003   0008D2  CFF3 F010          	movff	prodl,dejar@SALTO
  2004                           
  2005                           ;ASCENSOR.c: 255:                 break;
  2006   0008D6  EFA2  F004         	goto	l192
  2007   0008DA                     l1400:
  2008                           
  2009                           ;ASCENSOR.c: 257:         }
  2010   0008DA  2A12               	incf	dejar@i_726^0,f,c
  2011   0008DC  0E03               	movlw	3
  2012   0008DE  6412               	cpfsgt	dejar@i_726^0,c
  2013   0008E0  EF74  F004         	goto	u431
  2014   0008E4  EF76  F004         	goto	u430
  2015   0008E8                     u431:
  2016   0008E8  EF55  F004         	goto	l1394
  2017   0008EC                     u430:
  2018   0008EC  EFA2  F004         	goto	l192
  2019   0008F0                     l1404:
  2020   0008F0  502C               	movf	_NEGRA^0,w,c
  2021   0008F2  B4D8               	btfsc	status,2,c
  2022   0008F4  EF7E  F004         	goto	u441
  2023   0008F8  EF80  F004         	goto	u440
  2024   0008FC                     u441:
  2025   0008FC  EFA2  F004         	goto	l192
  2026   000900                     u440:
  2027   000900                     
  2028                           ;ASCENSOR.c: 260:         for(char i=0;i<=3;i++){
  2029   000900  6A13               	clrf	dejar@i_727^0,c
  2030   000902                     l1412:
  2031                           
  2032                           ;ASCENSOR.c: 261:             if(Fila3[i]==0){
  2033   000902  5013               	movf	dejar@i_727^0,w,c
  2034   000904  0F1E               	addlw	low _Fila3
  2035   000906  6ED9               	movwf	fsr2l,c
  2036   000908  6ADA               	clrf	fsr2h,c
  2037   00090A  50DF               	movf	indf2,w,c
  2038   00090C  A4D8               	btfss	status,2,c
  2039   00090E  EF8B  F004         	goto	u451
  2040   000912  EF8D  F004         	goto	u450
  2041   000916                     u451:
  2042   000916  EF99  F004         	goto	l1418
  2043   00091A                     u450:
  2044   00091A                     
  2045                           ;ASCENSOR.c: 262:                 Fila3[i]=1;
  2046   00091A  5013               	movf	dejar@i_727^0,w,c
  2047   00091C  0F1E               	addlw	low _Fila3
  2048   00091E  6ED9               	movwf	fsr2l,c
  2049   000920  6ADA               	clrf	fsr2h,c
  2050   000922  0E01               	movlw	1
  2051   000924  6EDF               	movwf	indf2,c
  2052   000926                     
  2053                           ;ASCENSOR.c: 263:                 SALTO= (i+1)*9;
  2054   000926  2813               	incf	dejar@i_727^0,w,c
  2055   000928  0D09               	mullw	9
  2056   00092A  CFF3 F010          	movff	prodl,dejar@SALTO
  2057                           
  2058                           ;ASCENSOR.c: 265:                 break;
  2059   00092E  EFA2  F004         	goto	l192
  2060   000932                     l1418:
  2061                           
  2062                           ;ASCENSOR.c: 267:         }
  2063   000932  2A13               	incf	dejar@i_727^0,f,c
  2064   000934  0E03               	movlw	3
  2065   000936  6413               	cpfsgt	dejar@i_727^0,c
  2066   000938  EFA0  F004         	goto	u461
  2067   00093C  EFA2  F004         	goto	u460
  2068   000940                     u461:
  2069   000940  EF81  F004         	goto	l1412
  2070   000944                     u460:
  2071   000944                     l192:
  2072                           
  2073                           ;ASCENSOR.c: 270:     LATDbits.LATD1=1;
  2074   000944  828C               	bsf	140,1,c	;volatile
  2075                           
  2076                           ;ASCENSOR.c: 271:     while(acum!=SALTO){
  2077   000946  EFBC  F004         	goto	l1426
  2078   00094A                     l203:
  2079                           
  2080                           ;ASCENSOR.c: 272:         if(PORTBbits.RB1==1){
  2081   00094A  A281               	btfss	129,1,c	;volatile
  2082   00094C  EFAA  F004         	goto	u471
  2083   000950  EFAC  F004         	goto	u470
  2084   000954                     u471:
  2085   000954  EFAD  F004         	goto	l1424
  2086   000958                     u470:
  2087   000958                     
  2088                           ;ASCENSOR.c: 273:             acum++;
  2089   000958  2A0F               	incf	dejar@acum^0,f,c
  2090   00095A                     l1424:
  2091                           
  2092                           ;ASCENSOR.c: 275:         _delay((unsigned long)((20)*(4000000/4000.0)));
  2093   00095A  0E1A               	movlw	26
  2094   00095C  6E0D               	movwf	??_dejar^0,c
  2095   00095E  0EF8               	movlw	248
  2096   000960                     u1417:
  2097   000960  2EE8               	decfsz	wreg,f,c
  2098   000962  D7FE               	bra	u1417
  2099   000964  2E0D               	decfsz	??_dejar^0,f,c
  2100   000966  D7FC               	bra	u1417
  2101   000968  D000               	nop2	
  2102   00096A                     l205:
  2103   00096A  A281               	btfss	129,1,c	;volatile
  2104   00096C  EFBA  F004         	goto	u481
  2105   000970  EFBC  F004         	goto	u480
  2106   000974                     u481:
  2107   000974  EFB5  F004         	goto	l205
  2108   000978                     u480:
  2109   000978                     l1426:
  2110                           
  2111                           ;ASCENSOR.c: 271:     while(acum!=SALTO){
  2112   000978  5010               	movf	dejar@SALTO^0,w,c
  2113   00097A  180F               	xorwf	dejar@acum^0,w,c
  2114   00097C  A4D8               	btfss	status,2,c
  2115   00097E  EFC3  F004         	goto	u491
  2116   000982  EFC5  F004         	goto	u490
  2117   000986                     u491:
  2118   000986  EFA5  F004         	goto	l203
  2119   00098A                     u490:
  2120   00098A                     
  2121                           ;ASCENSOR.c: 278:     LATDbits.LATD1=0;
  2122   00098A  928C               	bcf	140,1,c	;volatile
  2123   00098C                     
  2124                           ;ASCENSOR.c: 279:     _delay((unsigned long)((200)*(4000000/4000.0)));
  2125   00098C  0E02               	movlw	2
  2126   00098E  6E0E               	movwf	(??_dejar+1)^0,c
  2127   000990  0E04               	movlw	4
  2128   000992  6E0D               	movwf	??_dejar^0,c
  2129   000994  0EBA               	movlw	186
  2130   000996                     u1427:
  2131   000996  2EE8               	decfsz	wreg,f,c
  2132   000998  D7FE               	bra	u1427
  2133   00099A  2E0D               	decfsz	??_dejar^0,f,c
  2134   00099C  D7FC               	bra	u1427
  2135   00099E  2E0E               	decfsz	(??_dejar+1)^0,f,c
  2136   0009A0  D7FA               	bra	u1427
  2137   0009A2  D000               	nop2	
  2138   0009A4                     
  2139                           ;ASCENSOR.c: 281:     LATDbits.LATD2= 1;
  2140   0009A4  848C               	bsf	140,2,c	;volatile
  2141   0009A6                     l209:
  2142   0009A6  B48C               	btfsc	140,2,c	;volatile
  2143   0009A8  EFD8  F004         	goto	u501
  2144   0009AC  EFDA  F004         	goto	u500
  2145   0009B0                     u501:
  2146   0009B0  EFD3  F004         	goto	l209
  2147   0009B4                     u500:
  2148   0009B4                     
  2149                           ;ASCENSOR.c: 283:     _delay((unsigned long)((500)*(4000000/4000.0)));
  2150   0009B4  0E03               	movlw	3
  2151   0009B6  6E0E               	movwf	(??_dejar+1)^0,c
  2152   0009B8  0E8A               	movlw	138
  2153   0009BA  6E0D               	movwf	??_dejar^0,c
  2154   0009BC  0E56               	movlw	86
  2155   0009BE                     u1437:
  2156   0009BE  2EE8               	decfsz	wreg,f,c
  2157   0009C0  D7FE               	bra	u1437
  2158   0009C2  2E0D               	decfsz	??_dejar^0,f,c
  2159   0009C4  D7FC               	bra	u1437
  2160   0009C6  2E0E               	decfsz	(??_dejar+1)^0,f,c
  2161   0009C8  D7FA               	bra	u1437
  2162   0009CA                     
  2163                           ;ASCENSOR.c: 284:     LATCbits.LC0=1;
  2164   0009CA  808B               	bsf	139,0,c	;volatile
  2165   0009CC                     l212:
  2166   0009CC  BA80               	btfsc	128,5,c	;volatile
  2167   0009CE  EFEB  F004         	goto	u511
  2168   0009D2  EFED  F004         	goto	u510
  2169   0009D6                     u511:
  2170   0009D6  EFE6  F004         	goto	l212
  2171   0009DA                     u510:
  2172   0009DA                     
  2173                           ;ASCENSOR.c: 286:     _delay((unsigned long)((250)*(4000000/4000.0)));
  2174   0009DA  0E02               	movlw	2
  2175   0009DC  6E0E               	movwf	(??_dejar+1)^0,c
  2176   0009DE  0E45               	movlw	69
  2177   0009E0  6E0D               	movwf	??_dejar^0,c
  2178   0009E2  0EAA               	movlw	170
  2179   0009E4                     u1447:
  2180   0009E4  2EE8               	decfsz	wreg,f,c
  2181   0009E6  D7FE               	bra	u1447
  2182   0009E8  2E0D               	decfsz	??_dejar^0,f,c
  2183   0009EA  D7FC               	bra	u1447
  2184   0009EC  2E0E               	decfsz	(??_dejar+1)^0,f,c
  2185   0009EE  D7FA               	bra	u1447
  2186   0009F0                     
  2187                           ;ASCENSOR.c: 287:     TMR0L= 253;
  2188   0009F0  0EFD               	movlw	253
  2189   0009F2  6ED6               	movwf	214,c	;volatile
  2190   0009F4                     
  2191                           ;ASCENSOR.c: 288:     T0CONbits.TMR0ON = 1;
  2192   0009F4  8ED5               	bsf	213,7,c	;volatile
  2193   0009F6                     
  2194                           ;ASCENSOR.c: 289:     LATDbits.LATD3=1;
  2195   0009F6  868C               	bsf	140,3,c	;volatile
  2196   0009F8                     l215:
  2197   0009F8  B68C               	btfsc	140,3,c	;volatile
  2198   0009FA  EF01  F005         	goto	u521
  2199   0009FE  EF03  F005         	goto	u520
  2200   000A02                     u521:
  2201   000A02  EFFC  F004         	goto	l215
  2202   000A06                     u520:
  2203   000A06                     
  2204                           ;ASCENSOR.c: 291:     _delay((unsigned long)((500)*(4000000/4000.0)));
  2205   000A06  0E03               	movlw	3
  2206   000A08  6E0E               	movwf	(??_dejar+1)^0,c
  2207   000A0A  0E8A               	movlw	138
  2208   000A0C  6E0D               	movwf	??_dejar^0,c
  2209   000A0E  0E56               	movlw	86
  2210   000A10                     u1457:
  2211   000A10  2EE8               	decfsz	wreg,f,c
  2212   000A12  D7FE               	bra	u1457
  2213   000A14  2E0D               	decfsz	??_dejar^0,f,c
  2214   000A16  D7FC               	bra	u1457
  2215   000A18  2E0E               	decfsz	(??_dejar+1)^0,f,c
  2216   000A1A  D7FA               	bra	u1457
  2217   000A1C                     
  2218                           ;ASCENSOR.c: 292:     LATCbits.LC0=0;
  2219   000A1C  908B               	bcf	139,0,c	;volatile
  2220   000A1E                     l218:
  2221   000A1E  B680               	btfsc	128,3,c	;volatile
  2222   000A20  EF14  F005         	goto	u531
  2223   000A24  EF16  F005         	goto	u530
  2224   000A28                     u531:
  2225   000A28  EF0F  F005         	goto	l218
  2226   000A2C                     u530:
  2227   000A2C                     
  2228                           ;ASCENSOR.c: 294:     _delay((unsigned long)((200)*(4000000/4000.0)));
  2229   000A2C  0E02               	movlw	2
  2230   000A2E  6E0E               	movwf	(??_dejar+1)^0,c
  2231   000A30  0E04               	movlw	4
  2232   000A32  6E0D               	movwf	??_dejar^0,c
  2233   000A34  0EBA               	movlw	186
  2234   000A36                     u1467:
  2235   000A36  2EE8               	decfsz	wreg,f,c
  2236   000A38  D7FE               	bra	u1467
  2237   000A3A  2E0D               	decfsz	??_dejar^0,f,c
  2238   000A3C  D7FC               	bra	u1467
  2239   000A3E  2E0E               	decfsz	(??_dejar+1)^0,f,c
  2240   000A40  D7FA               	bra	u1467
  2241   000A42  D000               	nop2	
  2242   000A44                     
  2243                           ;ASCENSOR.c: 295:     METAL=0;
  2244   000A44  6A2E               	clrf	_METAL^0,c
  2245   000A46                     
  2246                           ;ASCENSOR.c: 296:     BLANCA=0;
  2247   000A46  6A2D               	clrf	_BLANCA^0,c
  2248   000A48                     
  2249                           ;ASCENSOR.c: 297:     NEGRA=0;
  2250   000A48  6A2C               	clrf	_NEGRA^0,c
  2251   000A4A  0012               	return		;funcret
  2252   000A4C                     __end_of_dejar:
  2253                           	callstack 0
  2254                           
  2255 ;; *************** function _Modificar *****************
  2256 ;; Defined at:
  2257 ;;		line 221 in file "ASCENSOR.c"
  2258 ;; Parameters:    Size  Location     Type
  2259 ;;		None
  2260 ;; Auto vars:     Size  Location     Type
  2261 ;;		None
  2262 ;; Return value:  Size  Location     Type
  2263 ;;                  1    wreg      void 
  2264 ;; Registers used:
  2265 ;;		wreg, status,2, status,0, cstack
  2266 ;; Tracked objects:
  2267 ;;		On entry : 0/0
  2268 ;;		On exit  : 0/0
  2269 ;;		Unchanged: 0/0
  2270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2271 ;;      Params:         0       0       0       0       0       0       0       0       0
  2272 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2273 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2274 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2275 ;;Total ram usage:        0 bytes
  2276 ;; Hardware stack levels used: 1
  2277 ;; Hardware stack levels required when called: 8
  2278 ;; This function calls:
  2279 ;;		_Lcd_NoBlink
  2280 ;;		_Lcd_Write_Char
  2281 ;; This function is called by:
  2282 ;;		_main
  2283 ;; This function uses a non-reentrant model
  2284 ;;
  2285                           
  2286                           	psect	text9
  2287   001230                     __ptext9:
  2288                           	callstack 0
  2289   001230                     _Modificar:
  2290                           	callstack 22
  2291   001230                     
  2292                           ;ASCENSOR.c: 222:     if (PORTBbits.RB2==1){
  2293   001230  A481               	btfss	129,2,c	;volatile
  2294   001232  EF1D  F009         	goto	u341
  2295   001236  EF1F  F009         	goto	u340
  2296   00123A                     u341:
  2297   00123A  EF2A  F009         	goto	l177
  2298   00123E                     u340:
  2299   00123E                     
  2300                           ;ASCENSOR.c: 223:         Lcd_Write_Char(1);
  2301   00123E  0E01               	movlw	1
  2302   001240  EC85  F009         	call	_Lcd_Write_Char
  2303   001244                     
  2304                           ;ASCENSOR.c: 225:         c++;
  2305   001244  2A2A               	incf	_c^0,f,c
  2306   001246                     l178:
  2307   001246  B481               	btfsc	129,2,c	;volatile
  2308   001248  EF28  F009         	goto	u351
  2309   00124C  EF2A  F009         	goto	u350
  2310   001250                     u351:
  2311   001250  EF23  F009         	goto	l178
  2312   001254                     u350:
  2313   001254                     l177:
  2314                           
  2315                           ;ASCENSOR.c: 228:     if (PORTBbits.RB3==1){
  2316   001254  A681               	btfss	129,3,c	;volatile
  2317   001256  EF2F  F009         	goto	u361
  2318   00125A  EF31  F009         	goto	u360
  2319   00125E                     u361:
  2320   00125E  EF3C  F009         	goto	l1364
  2321   001262                     u360:
  2322   001262                     
  2323                           ;ASCENSOR.c: 229:         Lcd_Write_Char(0);
  2324   001262  0E00               	movlw	0
  2325   001264  EC85  F009         	call	_Lcd_Write_Char
  2326   001268                     
  2327                           ;ASCENSOR.c: 231:         c++;
  2328   001268  2A2A               	incf	_c^0,f,c
  2329   00126A                     l182:
  2330   00126A  B681               	btfsc	129,3,c	;volatile
  2331   00126C  EF3A  F009         	goto	u371
  2332   001270  EF3C  F009         	goto	u370
  2333   001274                     u371:
  2334   001274  EF35  F009         	goto	l182
  2335   001278                     u370:
  2336   001278                     l1364:
  2337                           
  2338                           ;ASCENSOR.c: 234:     Lcd_NoBlink();
  2339   001278  EC09  F00A         	call	_Lcd_NoBlink	;wreg free
  2340   00127C  0012               	return		;funcret
  2341   00127E                     __end_of_Modificar:
  2342                           	callstack 0
  2343                           
  2344 ;; *************** function _Lcd_NoBlink *****************
  2345 ;; Defined at:
  2346 ;;		line 129 in file "lcd.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;		None
  2349 ;; Auto vars:     Size  Location     Type
  2350 ;;		None
  2351 ;; Return value:  Size  Location     Type
  2352 ;;                  1    wreg      void 
  2353 ;; Registers used:
  2354 ;;		wreg, status,2, cstack
  2355 ;; Tracked objects:
  2356 ;;		On entry : 0/0
  2357 ;;		On exit  : 0/0
  2358 ;;		Unchanged: 0/0
  2359 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2360 ;;      Params:         0       0       0       0       0       0       0       0       0
  2361 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2362 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2363 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2364 ;;Total ram usage:        0 bytes
  2365 ;; Hardware stack levels used: 1
  2366 ;; Hardware stack levels required when called: 7
  2367 ;; This function calls:
  2368 ;;		_Lcd_Cmd
  2369 ;; This function is called by:
  2370 ;;		_Modificar
  2371 ;; This function uses a non-reentrant model
  2372 ;;
  2373                           
  2374                           	psect	text10
  2375   001412                     __ptext10:
  2376                           	callstack 0
  2377   001412                     _Lcd_NoBlink:
  2378                           	callstack 22
  2379   001412                     
  2380                           ;lcd.c: 131:     Lcd_Cmd(0x00);
  2381   001412  0E00               	movlw	0
  2382   001414  ECBA  F009         	call	_Lcd_Cmd
  2383                           
  2384                           ;lcd.c: 132:     Lcd_Cmd(0x0C);
  2385   001418  0E0C               	movlw	12
  2386   00141A  ECBA  F009         	call	_Lcd_Cmd
  2387   00141E  0012               	return		;funcret
  2388   001420                     __end_of_Lcd_NoBlink:
  2389                           	callstack 0
  2390                           
  2391 ;; *************** function _Lcd_Init *****************
  2392 ;; Defined at:
  2393 ;;		line 63 in file "lcd.c"
  2394 ;; Parameters:    Size  Location     Type
  2395 ;;		None
  2396 ;; Auto vars:     Size  Location     Type
  2397 ;;		None
  2398 ;; Return value:  Size  Location     Type
  2399 ;;                  1    wreg      void 
  2400 ;; Registers used:
  2401 ;;		wreg, status,2, cstack
  2402 ;; Tracked objects:
  2403 ;;		On entry : 0/0
  2404 ;;		On exit  : 0/0
  2405 ;;		Unchanged: 0/0
  2406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2407 ;;      Params:         0       0       0       0       0       0       0       0       0
  2408 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2409 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2410 ;;      Totals:         1       0       0       0       0       0       0       0       0
  2411 ;;Total ram usage:        1 bytes
  2412 ;; Hardware stack levels used: 1
  2413 ;; Hardware stack levels required when called: 8
  2414 ;; This function calls:
  2415 ;;		_Lcd_Clear
  2416 ;;		_Lcd_Cmd
  2417 ;;		_Lcd_Port
  2418 ;; This function is called by:
  2419 ;;		_main
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422                           
  2423                           	psect	text11
  2424   0010F6                     __ptext11:
  2425                           	callstack 0
  2426   0010F6                     _Lcd_Init:
  2427                           	callstack 22
  2428   0010F6                     
  2429                           ;lcd.c: 65:  TRISDbits.TRISD2 = 0;
  2430   0010F6  9495               	bcf	149,2,c	;volatile
  2431                           
  2432                           ;lcd.c: 66:  TRISDbits.TRISD3 = 0;
  2433   0010F8  9695               	bcf	149,3,c	;volatile
  2434                           
  2435                           ;lcd.c: 67:  TRISDbits.TRISD4 = 0;
  2436   0010FA  9895               	bcf	149,4,c	;volatile
  2437                           
  2438                           ;lcd.c: 68:  TRISDbits.TRISD5 = 0;
  2439   0010FC  9A95               	bcf	149,5,c	;volatile
  2440                           
  2441                           ;lcd.c: 69:  TRISDbits.TRISD6 = 0;
  2442   0010FE  9C95               	bcf	149,6,c	;volatile
  2443                           
  2444                           ;lcd.c: 70:  TRISDbits.TRISD7 = 0;
  2445   001100  9E95               	bcf	149,7,c	;volatile
  2446   001102                     
  2447                           ;lcd.c: 71:     Lcd_Port(0x00);
  2448   001102  0E00               	movlw	0
  2449   001104  ECBC  F008         	call	_Lcd_Port
  2450   001108                     
  2451                           ;lcd.c: 72:     _delay((unsigned long)((20)*(4000000/4000.0)));
  2452   001108  0E1A               	movlw	26
  2453   00110A  6E10               	movwf	??_Lcd_Init^0,c
  2454   00110C  0EF8               	movlw	248
  2455   00110E                     u1477:
  2456   00110E  2EE8               	decfsz	wreg,f,c
  2457   001110  D7FE               	bra	u1477
  2458   001112  2E10               	decfsz	??_Lcd_Init^0,f,c
  2459   001114  D7FC               	bra	u1477
  2460   001116  D000               	nop2	
  2461   001118                     
  2462                           ;lcd.c: 73:     Lcd_Cmd(0x03);
  2463   001118  0E03               	movlw	3
  2464   00111A  ECBA  F009         	call	_Lcd_Cmd
  2465   00111E                     
  2466                           ;lcd.c: 74:     _delay((unsigned long)((5)*(4000000/4000.0)));
  2467   00111E  0E07               	movlw	7
  2468   001120  6E10               	movwf	??_Lcd_Init^0,c
  2469   001122  0E7D               	movlw	125
  2470   001124                     u1487:
  2471   001124  2EE8               	decfsz	wreg,f,c
  2472   001126  D7FE               	bra	u1487
  2473   001128  2E10               	decfsz	??_Lcd_Init^0,f,c
  2474   00112A  D7FC               	bra	u1487
  2475   00112C  0000               	nop	
  2476   00112E                     
  2477                           ;lcd.c: 75:     Lcd_Cmd(0x03);
  2478   00112E  0E03               	movlw	3
  2479   001130  ECBA  F009         	call	_Lcd_Cmd
  2480   001134                     
  2481                           ;lcd.c: 76:     _delay((unsigned long)((11)*(4000000/4000.0)));
  2482   001134  0E0F               	movlw	15
  2483   001136  6E10               	movwf	??_Lcd_Init^0,c
  2484   001138  0E48               	movlw	72
  2485   00113A                     u1497:
  2486   00113A  2EE8               	decfsz	wreg,f,c
  2487   00113C  D7FE               	bra	u1497
  2488   00113E  2E10               	decfsz	??_Lcd_Init^0,f,c
  2489   001140  D7FC               	bra	u1497
  2490   001142                     
  2491                           ;lcd.c: 77:     Lcd_Cmd(0x03);
  2492   001142  0E03               	movlw	3
  2493   001144  ECBA  F009         	call	_Lcd_Cmd
  2494   001148                     
  2495                           ;lcd.c: 78:     Lcd_Cmd(0x02);
  2496   001148  0E02               	movlw	2
  2497   00114A  ECBA  F009         	call	_Lcd_Cmd
  2498   00114E                     
  2499                           ;lcd.c: 79:     Lcd_Cmd(0x02);
  2500   00114E  0E02               	movlw	2
  2501   001150  ECBA  F009         	call	_Lcd_Cmd
  2502   001154                     
  2503                           ;lcd.c: 80:     Lcd_Cmd(0x08);
  2504   001154  0E08               	movlw	8
  2505   001156  ECBA  F009         	call	_Lcd_Cmd
  2506   00115A                     
  2507                           ;lcd.c: 81:     Lcd_Cmd(0x00);
  2508   00115A  0E00               	movlw	0
  2509   00115C  ECBA  F009         	call	_Lcd_Cmd
  2510   001160                     
  2511                           ;lcd.c: 82:     Lcd_Cmd(0x0C);
  2512   001160  0E0C               	movlw	12
  2513   001162  ECBA  F009         	call	_Lcd_Cmd
  2514   001166                     
  2515                           ;lcd.c: 83:     Lcd_Cmd(0x00);
  2516   001166  0E00               	movlw	0
  2517   001168  ECBA  F009         	call	_Lcd_Cmd
  2518   00116C                     
  2519                           ;lcd.c: 84:     Lcd_Cmd(0x06);
  2520   00116C  0E06               	movlw	6
  2521   00116E  ECBA  F009         	call	_Lcd_Cmd
  2522   001172                     
  2523                           ;lcd.c: 85:     Lcd_Clear();
  2524   001172  EC10  F00A         	call	_Lcd_Clear	;wreg free
  2525   001176  0012               	return		;funcret
  2526   001178                     __end_of_Lcd_Init:
  2527                           	callstack 0
  2528                           
  2529 ;; *************** function _Lcd_Clear *****************
  2530 ;; Defined at:
  2531 ;;		line 20 in file "lcd.c"
  2532 ;; Parameters:    Size  Location     Type
  2533 ;;		None
  2534 ;; Auto vars:     Size  Location     Type
  2535 ;;		None
  2536 ;; Return value:  Size  Location     Type
  2537 ;;                  1    wreg      void 
  2538 ;; Registers used:
  2539 ;;		wreg, status,2, cstack
  2540 ;; Tracked objects:
  2541 ;;		On entry : 0/0
  2542 ;;		On exit  : 0/0
  2543 ;;		Unchanged: 0/0
  2544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2545 ;;      Params:         0       0       0       0       0       0       0       0       0
  2546 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2547 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2548 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2549 ;;Total ram usage:        0 bytes
  2550 ;; Hardware stack levels used: 1
  2551 ;; Hardware stack levels required when called: 7
  2552 ;; This function calls:
  2553 ;;		_Lcd_Cmd
  2554 ;; This function is called by:
  2555 ;;		_main
  2556 ;;		_Lcd_Init
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           	psect	text12
  2561   001420                     __ptext12:
  2562                           	callstack 0
  2563   001420                     _Lcd_Clear:
  2564                           	callstack 22
  2565   001420                     
  2566                           ;lcd.c: 22:     Lcd_Cmd(0);
  2567   001420  0E00               	movlw	0
  2568   001422  ECBA  F009         	call	_Lcd_Cmd
  2569                           
  2570                           ;lcd.c: 23:     Lcd_Cmd(1);
  2571   001426  0E01               	movlw	1
  2572   001428  ECBA  F009         	call	_Lcd_Cmd
  2573   00142C  0012               	return		;funcret
  2574   00142E                     __end_of_Lcd_Clear:
  2575                           	callstack 0
  2576                           
  2577 ;; *************** function _Lcd_CGRAM_Init *****************
  2578 ;; Defined at:
  2579 ;;		line 175 in file "lcd.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;		None
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;		None
  2584 ;; Return value:  Size  Location     Type
  2585 ;;                  1    wreg      void 
  2586 ;; Registers used:
  2587 ;;		wreg, status,2, cstack
  2588 ;; Tracked objects:
  2589 ;;		On entry : 0/0
  2590 ;;		On exit  : 0/0
  2591 ;;		Unchanged: 0/0
  2592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2593 ;;      Params:         0       0       0       0       0       0       0       0       0
  2594 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2595 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2596 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2597 ;;Total ram usage:        0 bytes
  2598 ;; Hardware stack levels used: 1
  2599 ;; Hardware stack levels required when called: 7
  2600 ;; This function calls:
  2601 ;;		_Lcd_Cmd
  2602 ;; This function is called by:
  2603 ;;		_main
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606                           
  2607                           	psect	text13
  2608   00142E                     __ptext13:
  2609                           	callstack 0
  2610   00142E                     _Lcd_CGRAM_Init:
  2611                           	callstack 23
  2612   00142E                     
  2613                           ;lcd.c: 177:     Lcd_Cmd(0x04);
  2614   00142E  0E04               	movlw	4
  2615   001430  ECBA  F009         	call	_Lcd_Cmd
  2616                           
  2617                           ;lcd.c: 178:     Lcd_Cmd(0x00);
  2618   001434  0E00               	movlw	0
  2619   001436  ECBA  F009         	call	_Lcd_Cmd
  2620   00143A  0012               	return		;funcret
  2621   00143C                     __end_of_Lcd_CGRAM_Init:
  2622                           	callstack 0
  2623                           
  2624 ;; *************** function _Lcd_CGRAM_CreateChar *****************
  2625 ;; Defined at:
  2626 ;;		line 136 in file "lcd.c"
  2627 ;; Parameters:    Size  Location     Type
  2628 ;;  add             1    wreg     unsigned char 
  2629 ;;  chardata        1   16[COMRAM] PTR const unsigned char 
  2630 ;;		 -> figura_2(8), figura_1(8), 
  2631 ;; Auto vars:     Size  Location     Type
  2632 ;;  add             1   18[COMRAM] unsigned char 
  2633 ;;  i               1   26[COMRAM] unsigned char 
  2634 ;;  i               1   25[COMRAM] unsigned char 
  2635 ;;  i               1   24[COMRAM] unsigned char 
  2636 ;;  i               1   23[COMRAM] unsigned char 
  2637 ;;  i               1   22[COMRAM] unsigned char 
  2638 ;;  i               1   21[COMRAM] unsigned char 
  2639 ;;  i               1   20[COMRAM] unsigned char 
  2640 ;;  i               1   19[COMRAM] unsigned char 
  2641 ;; Return value:  Size  Location     Type
  2642 ;;                  1    wreg      void 
  2643 ;; Registers used:
  2644 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2645 ;; Tracked objects:
  2646 ;;		On entry : 0/0
  2647 ;;		On exit  : 0/0
  2648 ;;		Unchanged: 0/0
  2649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2650 ;;      Params:         1       0       0       0       0       0       0       0       0
  2651 ;;      Locals:         9       0       0       0       0       0       0       0       0
  2652 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2653 ;;      Totals:        11       0       0       0       0       0       0       0       0
  2654 ;;Total ram usage:       11 bytes
  2655 ;; Hardware stack levels used: 1
  2656 ;; Hardware stack levels required when called: 7
  2657 ;; This function calls:
  2658 ;;		_Lcd_Write_Char
  2659 ;; This function is called by:
  2660 ;;		_main
  2661 ;; This function uses a non-reentrant model
  2662 ;;
  2663                           
  2664                           	psect	text14
  2665   000A4C                     __ptext14:
  2666                           	callstack 0
  2667   000A4C                     _Lcd_CGRAM_CreateChar:
  2668                           	callstack 23
  2669                           
  2670                           ;incstack = 0
  2671                           ;Lcd_CGRAM_CreateChar@add stored from wreg
  2672   000A4C  6E13               	movwf	Lcd_CGRAM_CreateChar@add^0,c
  2673   000A4E                     
  2674                           ;lcd.c: 136: void Lcd_CGRAM_CreateChar(char add, const char* chardata);lcd.c: 137: {;lcd
      +                          .c: 138:     switch(add)
  2675   000A4E  EFF6  F005         	goto	l2100
  2676   000A52                     l309:
  2677                           
  2678                           ;lcd.c: 141:             for(char i=0; i<=7; i++)
  2679   000A52  6A14               	clrf	Lcd_CGRAM_CreateChar@i^0,c
  2680   000A54                     l2008:
  2681                           
  2682                           ;lcd.c: 142:                 Lcd_Write_Char(chardata[i]);
  2683   000A54  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2684   000A56  2414               	addwf	Lcd_CGRAM_CreateChar@i^0,w,c
  2685   000A58  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2686   000A5A  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2687   000A5E                     	if	1	;There is more than 1 active tblptr byte
  2688   000A5E  0E08               	movlw	high __smallconst
  2689   000A60  6EF7               	movwf	tblptrh,c
  2690   000A62                     	endif
  2691   000A62                     	if	0	;tblptru may be non-zero
  2692   000A62                     	endif
  2693   000A62                     	if	0	;tblptru may be non-zero
  2694   000A62                     	endif
  2695   000A62  0008               	tblrd		*
  2696   000A64  50F5               	movf	tablat,w,c
  2697   000A66  EC85  F009         	call	_Lcd_Write_Char
  2698   000A6A  2A14               	incf	Lcd_CGRAM_CreateChar@i^0,f,c
  2699   000A6C  0E07               	movlw	7
  2700   000A6E  6414               	cpfsgt	Lcd_CGRAM_CreateChar@i^0,c
  2701   000A70  EF3C  F005         	goto	u1111
  2702   000A74  EF3E  F005         	goto	u1110
  2703   000A78                     u1111:
  2704   000A78  EF2A  F005         	goto	l2008
  2705   000A7C                     u1110:
  2706   000A7C  EF19  F006         	goto	l334
  2707   000A80                     l2014:
  2708                           
  2709                           ;lcd.c: 145:             for(char i=8; i<=15; i++)
  2710   000A80  0E08               	movlw	8
  2711   000A82  6E15               	movwf	Lcd_CGRAM_CreateChar@i_884^0,c
  2712   000A84                     l2020:
  2713                           
  2714                           ;lcd.c: 146:                 Lcd_Write_Char(chardata[i-8]);
  2715   000A84  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2716   000A86  2415               	addwf	Lcd_CGRAM_CreateChar@i_884^0,w,c
  2717   000A88  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2718   000A8A  0EF8               	movlw	-8
  2719   000A8C  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2720   000A8E  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2721   000A92                     	if	1	;There is more than 1 active tblptr byte
  2722   000A92  0E08               	movlw	high __smallconst
  2723   000A94  6EF7               	movwf	tblptrh,c
  2724   000A96                     	endif
  2725   000A96                     	if	0	;tblptru may be non-zero
  2726   000A96                     	endif
  2727   000A96                     	if	0	;tblptru may be non-zero
  2728   000A96                     	endif
  2729   000A96  0008               	tblrd		*
  2730   000A98  50F5               	movf	tablat,w,c
  2731   000A9A  EC85  F009         	call	_Lcd_Write_Char
  2732   000A9E  2A15               	incf	Lcd_CGRAM_CreateChar@i_884^0,f,c
  2733   000AA0  0E0F               	movlw	15
  2734   000AA2  6415               	cpfsgt	Lcd_CGRAM_CreateChar@i_884^0,c
  2735   000AA4  EF56  F005         	goto	u1121
  2736   000AA8  EF58  F005         	goto	u1120
  2737   000AAC                     u1121:
  2738   000AAC  EF42  F005         	goto	l2020
  2739   000AB0                     u1120:
  2740   000AB0  EF19  F006         	goto	l334
  2741   000AB4                     l2026:
  2742                           
  2743                           ;lcd.c: 149:             for(char i=16; i<=23; i++)
  2744   000AB4  0E10               	movlw	16
  2745   000AB6  6E16               	movwf	Lcd_CGRAM_CreateChar@i_885^0,c
  2746   000AB8                     l2032:
  2747                           
  2748                           ;lcd.c: 150:                 Lcd_Write_Char(chardata[i-16]);
  2749   000AB8  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2750   000ABA  2416               	addwf	Lcd_CGRAM_CreateChar@i_885^0,w,c
  2751   000ABC  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2752   000ABE  0EF0               	movlw	-16
  2753   000AC0  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2754   000AC2  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2755   000AC6                     	if	1	;There is more than 1 active tblptr byte
  2756   000AC6  0E08               	movlw	high __smallconst
  2757   000AC8  6EF7               	movwf	tblptrh,c
  2758   000ACA                     	endif
  2759   000ACA                     	if	0	;tblptru may be non-zero
  2760   000ACA                     	endif
  2761   000ACA                     	if	0	;tblptru may be non-zero
  2762   000ACA                     	endif
  2763   000ACA  0008               	tblrd		*
  2764   000ACC  50F5               	movf	tablat,w,c
  2765   000ACE  EC85  F009         	call	_Lcd_Write_Char
  2766   000AD2  2A16               	incf	Lcd_CGRAM_CreateChar@i_885^0,f,c
  2767   000AD4  0E17               	movlw	23
  2768   000AD6  6416               	cpfsgt	Lcd_CGRAM_CreateChar@i_885^0,c
  2769   000AD8  EF70  F005         	goto	u1131
  2770   000ADC  EF72  F005         	goto	u1130
  2771   000AE0                     u1131:
  2772   000AE0  EF5C  F005         	goto	l2032
  2773   000AE4                     u1130:
  2774   000AE4  EF19  F006         	goto	l334
  2775   000AE8                     l2038:
  2776                           
  2777                           ;lcd.c: 153:             for(char i=24; i<=31; i++)
  2778   000AE8  0E18               	movlw	24
  2779   000AEA  6E17               	movwf	Lcd_CGRAM_CreateChar@i_886^0,c
  2780   000AEC                     l2044:
  2781                           
  2782                           ;lcd.c: 154:                 Lcd_Write_Char(chardata[i-24]);
  2783   000AEC  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2784   000AEE  2417               	addwf	Lcd_CGRAM_CreateChar@i_886^0,w,c
  2785   000AF0  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2786   000AF2  0EE8               	movlw	-24
  2787   000AF4  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2788   000AF6  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2789   000AFA                     	if	1	;There is more than 1 active tblptr byte
  2790   000AFA  0E08               	movlw	high __smallconst
  2791   000AFC  6EF7               	movwf	tblptrh,c
  2792   000AFE                     	endif
  2793   000AFE                     	if	0	;tblptru may be non-zero
  2794   000AFE                     	endif
  2795   000AFE                     	if	0	;tblptru may be non-zero
  2796   000AFE                     	endif
  2797   000AFE  0008               	tblrd		*
  2798   000B00  50F5               	movf	tablat,w,c
  2799   000B02  EC85  F009         	call	_Lcd_Write_Char
  2800   000B06  2A17               	incf	Lcd_CGRAM_CreateChar@i_886^0,f,c
  2801   000B08  0E1F               	movlw	31
  2802   000B0A  6417               	cpfsgt	Lcd_CGRAM_CreateChar@i_886^0,c
  2803   000B0C  EF8A  F005         	goto	u1141
  2804   000B10  EF8C  F005         	goto	u1140
  2805   000B14                     u1141:
  2806   000B14  EF76  F005         	goto	l2044
  2807   000B18                     u1140:
  2808   000B18  EF19  F006         	goto	l334
  2809   000B1C                     l2050:
  2810                           
  2811                           ;lcd.c: 157:             for(char i=32; i<=39; i++)
  2812   000B1C  0E20               	movlw	32
  2813   000B1E  6E18               	movwf	Lcd_CGRAM_CreateChar@i_887^0,c
  2814   000B20                     l2056:
  2815                           
  2816                           ;lcd.c: 158:                 Lcd_Write_Char(chardata[i-32]);
  2817   000B20  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2818   000B22  2418               	addwf	Lcd_CGRAM_CreateChar@i_887^0,w,c
  2819   000B24  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2820   000B26  0EE0               	movlw	-32
  2821   000B28  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2822   000B2A  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2823   000B2E                     	if	1	;There is more than 1 active tblptr byte
  2824   000B2E  0E08               	movlw	high __smallconst
  2825   000B30  6EF7               	movwf	tblptrh,c
  2826   000B32                     	endif
  2827   000B32                     	if	0	;tblptru may be non-zero
  2828   000B32                     	endif
  2829   000B32                     	if	0	;tblptru may be non-zero
  2830   000B32                     	endif
  2831   000B32  0008               	tblrd		*
  2832   000B34  50F5               	movf	tablat,w,c
  2833   000B36  EC85  F009         	call	_Lcd_Write_Char
  2834   000B3A  2A18               	incf	Lcd_CGRAM_CreateChar@i_887^0,f,c
  2835   000B3C  0E27               	movlw	39
  2836   000B3E  6418               	cpfsgt	Lcd_CGRAM_CreateChar@i_887^0,c
  2837   000B40  EFA4  F005         	goto	u1151
  2838   000B44  EFA6  F005         	goto	u1150
  2839   000B48                     u1151:
  2840   000B48  EF90  F005         	goto	l2056
  2841   000B4C                     u1150:
  2842   000B4C  EF19  F006         	goto	l334
  2843   000B50                     l2062:
  2844                           
  2845                           ;lcd.c: 161:             for(char i=40; i<=47; i++)
  2846   000B50  0E28               	movlw	40
  2847   000B52  6E19               	movwf	Lcd_CGRAM_CreateChar@i_888^0,c
  2848   000B54                     l2068:
  2849                           
  2850                           ;lcd.c: 162:                 Lcd_Write_Char(chardata[i-40]);
  2851   000B54  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2852   000B56  2419               	addwf	Lcd_CGRAM_CreateChar@i_888^0,w,c
  2853   000B58  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2854   000B5A  0ED8               	movlw	-40
  2855   000B5C  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2856   000B5E  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2857   000B62                     	if	1	;There is more than 1 active tblptr byte
  2858   000B62  0E08               	movlw	high __smallconst
  2859   000B64  6EF7               	movwf	tblptrh,c
  2860   000B66                     	endif
  2861   000B66                     	if	0	;tblptru may be non-zero
  2862   000B66                     	endif
  2863   000B66                     	if	0	;tblptru may be non-zero
  2864   000B66                     	endif
  2865   000B66  0008               	tblrd		*
  2866   000B68  50F5               	movf	tablat,w,c
  2867   000B6A  EC85  F009         	call	_Lcd_Write_Char
  2868   000B6E  2A19               	incf	Lcd_CGRAM_CreateChar@i_888^0,f,c
  2869   000B70  0E2F               	movlw	47
  2870   000B72  6419               	cpfsgt	Lcd_CGRAM_CreateChar@i_888^0,c
  2871   000B74  EFBE  F005         	goto	u1161
  2872   000B78  EFC0  F005         	goto	u1160
  2873   000B7C                     u1161:
  2874   000B7C  EFAA  F005         	goto	l2068
  2875   000B80                     u1160:
  2876   000B80  EF19  F006         	goto	l334
  2877   000B84                     l2074:
  2878                           
  2879                           ;lcd.c: 165:             for(char i=48; i<=55; i++)
  2880   000B84  0E30               	movlw	48
  2881   000B86  6E1A               	movwf	Lcd_CGRAM_CreateChar@i_889^0,c
  2882   000B88                     l2080:
  2883                           
  2884                           ;lcd.c: 166:                 Lcd_Write_Char(chardata[i-48]);
  2885   000B88  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2886   000B8A  241A               	addwf	Lcd_CGRAM_CreateChar@i_889^0,w,c
  2887   000B8C  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2888   000B8E  0ED0               	movlw	-48
  2889   000B90  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2890   000B92  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2891   000B96                     	if	1	;There is more than 1 active tblptr byte
  2892   000B96  0E08               	movlw	high __smallconst
  2893   000B98  6EF7               	movwf	tblptrh,c
  2894   000B9A                     	endif
  2895   000B9A                     	if	0	;tblptru may be non-zero
  2896   000B9A                     	endif
  2897   000B9A                     	if	0	;tblptru may be non-zero
  2898   000B9A                     	endif
  2899   000B9A  0008               	tblrd		*
  2900   000B9C  50F5               	movf	tablat,w,c
  2901   000B9E  EC85  F009         	call	_Lcd_Write_Char
  2902   000BA2  2A1A               	incf	Lcd_CGRAM_CreateChar@i_889^0,f,c
  2903   000BA4  0E37               	movlw	55
  2904   000BA6  641A               	cpfsgt	Lcd_CGRAM_CreateChar@i_889^0,c
  2905   000BA8  EFD8  F005         	goto	u1171
  2906   000BAC  EFDA  F005         	goto	u1170
  2907   000BB0                     u1171:
  2908   000BB0  EFC4  F005         	goto	l2080
  2909   000BB4                     u1170:
  2910   000BB4  EF19  F006         	goto	l334
  2911   000BB8                     l2086:
  2912                           
  2913                           ;lcd.c: 169:             for(char i=56; i<=63; i++)
  2914   000BB8  0E38               	movlw	56
  2915   000BBA  6E1B               	movwf	Lcd_CGRAM_CreateChar@i_890^0,c
  2916   000BBC                     l2092:
  2917                           
  2918                           ;lcd.c: 170:                 Lcd_Write_Char(chardata[i-56]);
  2919   000BBC  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  2920   000BBE  241B               	addwf	Lcd_CGRAM_CreateChar@i_890^0,w,c
  2921   000BC0  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  2922   000BC2  0EC8               	movlw	-56
  2923   000BC4  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  2924   000BC6  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  2925   000BCA                     	if	1	;There is more than 1 active tblptr byte
  2926   000BCA  0E08               	movlw	high __smallconst
  2927   000BCC  6EF7               	movwf	tblptrh,c
  2928   000BCE                     	endif
  2929   000BCE                     	if	0	;tblptru may be non-zero
  2930   000BCE                     	endif
  2931   000BCE                     	if	0	;tblptru may be non-zero
  2932   000BCE                     	endif
  2933   000BCE  0008               	tblrd		*
  2934   000BD0  50F5               	movf	tablat,w,c
  2935   000BD2  EC85  F009         	call	_Lcd_Write_Char
  2936   000BD6  2A1B               	incf	Lcd_CGRAM_CreateChar@i_890^0,f,c
  2937   000BD8  0E3F               	movlw	63
  2938   000BDA  641B               	cpfsgt	Lcd_CGRAM_CreateChar@i_890^0,c
  2939   000BDC  EFF2  F005         	goto	u1181
  2940   000BE0  EFF4  F005         	goto	u1180
  2941   000BE4                     u1181:
  2942   000BE4  EFDE  F005         	goto	l2092
  2943   000BE8                     u1180:
  2944   000BE8  EF19  F006         	goto	l334
  2945   000BEC                     l2100:
  2946   000BEC  5013               	movf	Lcd_CGRAM_CreateChar@add^0,w,c
  2947                           
  2948                           ; Switch size 1, requested type "simple"
  2949                           ; Number of cases is 8, Range of values is 0 to 7
  2950                           ; switch strategies available:
  2951                           ; Name         Instructions Cycles
  2952                           ; simple_byte           25    13 (average)
  2953                           ;	Chosen strategy is simple_byte
  2954   000BEE  0A00               	xorlw	0	; case 0
  2955   000BF0  B4D8               	btfsc	status,2,c
  2956   000BF2  EF29  F005         	goto	l309
  2957   000BF6  0A01               	xorlw	1	; case 1
  2958   000BF8  B4D8               	btfsc	status,2,c
  2959   000BFA  EF40  F005         	goto	l2014
  2960   000BFE  0A03               	xorlw	3	; case 2
  2961   000C00  B4D8               	btfsc	status,2,c
  2962   000C02  EF5A  F005         	goto	l2026
  2963   000C06  0A01               	xorlw	1	; case 3
  2964   000C08  B4D8               	btfsc	status,2,c
  2965   000C0A  EF74  F005         	goto	l2038
  2966   000C0E  0A07               	xorlw	7	; case 4
  2967   000C10  B4D8               	btfsc	status,2,c
  2968   000C12  EF8E  F005         	goto	l2050
  2969   000C16  0A01               	xorlw	1	; case 5
  2970   000C18  B4D8               	btfsc	status,2,c
  2971   000C1A  EFA8  F005         	goto	l2062
  2972   000C1E  0A03               	xorlw	3	; case 6
  2973   000C20  B4D8               	btfsc	status,2,c
  2974   000C22  EFC2  F005         	goto	l2074
  2975   000C26  0A01               	xorlw	1	; case 7
  2976   000C28  B4D8               	btfsc	status,2,c
  2977   000C2A  EFDC  F005         	goto	l2086
  2978   000C2E  EF19  F006         	goto	l334
  2979   000C32                     l334:
  2980   000C32  0012               	return		;funcret
  2981   000C34                     __end_of_Lcd_CGRAM_CreateChar:
  2982                           	callstack 0
  2983                           
  2984 ;; *************** function _Lcd_CGRAM_Close *****************
  2985 ;; Defined at:
  2986 ;;		line 181 in file "lcd.c"
  2987 ;; Parameters:    Size  Location     Type
  2988 ;;		None
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;		None
  2991 ;; Return value:  Size  Location     Type
  2992 ;;                  1    wreg      void 
  2993 ;; Registers used:
  2994 ;;		wreg, status,2, cstack
  2995 ;; Tracked objects:
  2996 ;;		On entry : 0/0
  2997 ;;		On exit  : 0/0
  2998 ;;		Unchanged: 0/0
  2999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3000 ;;      Params:         0       0       0       0       0       0       0       0       0
  3001 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3002 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3003 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3004 ;;Total ram usage:        0 bytes
  3005 ;; Hardware stack levels used: 1
  3006 ;; Hardware stack levels required when called: 7
  3007 ;; This function calls:
  3008 ;;		_Lcd_Cmd
  3009 ;; This function is called by:
  3010 ;;		_main
  3011 ;; This function uses a non-reentrant model
  3012 ;;
  3013                           
  3014                           	psect	text15
  3015   00143C                     __ptext15:
  3016                           	callstack 0
  3017   00143C                     _Lcd_CGRAM_Close:
  3018                           	callstack 23
  3019   00143C                     
  3020                           ;lcd.c: 183:     Lcd_Cmd(0x00);
  3021   00143C  0E00               	movlw	0
  3022   00143E  ECBA  F009         	call	_Lcd_Cmd
  3023                           
  3024                           ;lcd.c: 184:     Lcd_Cmd(0x02);
  3025   001442  0E02               	movlw	2
  3026   001444  ECBA  F009         	call	_Lcd_Cmd
  3027   001448  0012               	return		;funcret
  3028   00144A                     __end_of_Lcd_CGRAM_Close:
  3029                           	callstack 0
  3030                           
  3031 ;; *************** function _Actualizar_Matriz *****************
  3032 ;; Defined at:
  3033 ;;		line 106 in file "ASCENSOR.c"
  3034 ;; Parameters:    Size  Location     Type
  3035 ;;		None
  3036 ;; Auto vars:     Size  Location     Type
  3037 ;;  i               1   23[COMRAM] unsigned char 
  3038 ;;  i               1   22[COMRAM] unsigned char 
  3039 ;;  i               1   21[COMRAM] unsigned char 
  3040 ;;  acum            1   20[COMRAM] unsigned char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3050 ;;      Params:         0       0       0       0       0       0       0       0       0
  3051 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3052 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3053 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3054 ;;Total ram usage:        4 bytes
  3055 ;; Hardware stack levels used: 1
  3056 ;; Hardware stack levels required when called: 8
  3057 ;; This function calls:
  3058 ;;		_Lcd_Set_Cursor
  3059 ;;		_Lcd_Write_Char
  3060 ;; This function is called by:
  3061 ;;		_main
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           	psect	text16
  3066   000D52                     __ptext16:
  3067                           	callstack 0
  3068   000D52                     _Actualizar_Matriz:
  3069                           	callstack 22
  3070   000D52                     
  3071                           ;ASCENSOR.c: 107:     Lcd_Set_Cursor(1,12);
  3072   000D52  0E0C               	movlw	12
  3073   000D54  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  3074   000D56  0E01               	movlw	1
  3075   000D58  EC20  F007         	call	_Lcd_Set_Cursor
  3076   000D5C                     
  3077                           ;ASCENSOR.c: 108:     char acum=0;
  3078   000D5C  6A15               	clrf	Actualizar_Matriz@acum^0,c
  3079   000D5E                     
  3080                           ;ASCENSOR.c: 109:     for(char i=0;i<=3;i++){
  3081   000D5E  6A16               	clrf	Actualizar_Matriz@i^0,c
  3082   000D60                     l1904:
  3083                           
  3084                           ;ASCENSOR.c: 110:         if (Fila3[i]==0){
  3085   000D60  5016               	movf	Actualizar_Matriz@i^0,w,c
  3086   000D62  0F1E               	addlw	low _Fila3
  3087   000D64  6ED9               	movwf	fsr2l,c
  3088   000D66  6ADA               	clrf	fsr2h,c
  3089   000D68  50DF               	movf	indf2,w,c
  3090   000D6A  A4D8               	btfss	status,2,c
  3091   000D6C  EFBA  F006         	goto	u1021
  3092   000D70  EFBC  F006         	goto	u1020
  3093   000D74                     u1021:
  3094   000D74  EFC1  F006         	goto	l1908
  3095   000D78                     u1020:
  3096   000D78                     
  3097                           ;ASCENSOR.c: 111:             Lcd_Write_Char(0);
  3098   000D78  0E00               	movlw	0
  3099   000D7A  EC85  F009         	call	_Lcd_Write_Char
  3100                           
  3101                           ;ASCENSOR.c: 112:         }
  3102   000D7E  EFC5  F006         	goto	l1912
  3103   000D82                     l1908:
  3104                           
  3105                           ;ASCENSOR.c: 114:         {;ASCENSOR.c: 115:             Lcd_Write_Char(1);
  3106   000D82  0E01               	movlw	1
  3107   000D84  EC85  F009         	call	_Lcd_Write_Char
  3108   000D88                     
  3109                           ;ASCENSOR.c: 116:             acum++;
  3110   000D88  2A15               	incf	Actualizar_Matriz@acum^0,f,c
  3111   000D8A                     l1912:
  3112                           
  3113                           ;ASCENSOR.c: 118:     }
  3114   000D8A  2A16               	incf	Actualizar_Matriz@i^0,f,c
  3115   000D8C  0E03               	movlw	3
  3116   000D8E  6416               	cpfsgt	Actualizar_Matriz@i^0,c
  3117   000D90  EFCC  F006         	goto	u1031
  3118   000D94  EFCE  F006         	goto	u1030
  3119   000D98                     u1031:
  3120   000D98  EFB0  F006         	goto	l1904
  3121   000D9C                     u1030:
  3122   000D9C                     
  3123                           ;ASCENSOR.c: 119:     Lcd_Set_Cursor(2,12);
  3124   000D9C  0E0C               	movlw	12
  3125   000D9E  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  3126   000DA0  0E02               	movlw	2
  3127   000DA2  EC20  F007         	call	_Lcd_Set_Cursor
  3128   000DA6                     
  3129                           ;ASCENSOR.c: 120:     for(char i=0;i<=3;i++){
  3130   000DA6  6A17               	clrf	Actualizar_Matriz@i_684^0,c
  3131   000DA8                     l1924:
  3132                           
  3133                           ;ASCENSOR.c: 121:         if (Fila2[i]==0){
  3134   000DA8  5017               	movf	Actualizar_Matriz@i_684^0,w,c
  3135   000DAA  0F22               	addlw	low _Fila2
  3136   000DAC  6ED9               	movwf	fsr2l,c
  3137   000DAE  6ADA               	clrf	fsr2h,c
  3138   000DB0  50DF               	movf	indf2,w,c
  3139   000DB2  A4D8               	btfss	status,2,c
  3140   000DB4  EFDE  F006         	goto	u1041
  3141   000DB8  EFE0  F006         	goto	u1040
  3142   000DBC                     u1041:
  3143   000DBC  EFE5  F006         	goto	l1928
  3144   000DC0                     u1040:
  3145   000DC0                     
  3146                           ;ASCENSOR.c: 122:             Lcd_Write_Char(0);
  3147   000DC0  0E00               	movlw	0
  3148   000DC2  EC85  F009         	call	_Lcd_Write_Char
  3149                           
  3150                           ;ASCENSOR.c: 123:         }
  3151   000DC6  EFE9  F006         	goto	l1932
  3152   000DCA                     l1928:
  3153                           
  3154                           ;ASCENSOR.c: 125:         {;ASCENSOR.c: 126:             Lcd_Write_Char(1);
  3155   000DCA  0E01               	movlw	1
  3156   000DCC  EC85  F009         	call	_Lcd_Write_Char
  3157   000DD0                     
  3158                           ;ASCENSOR.c: 127:             acum++;
  3159   000DD0  2A15               	incf	Actualizar_Matriz@acum^0,f,c
  3160   000DD2                     l1932:
  3161                           
  3162                           ;ASCENSOR.c: 129:     }
  3163   000DD2  2A17               	incf	Actualizar_Matriz@i_684^0,f,c
  3164   000DD4  0E03               	movlw	3
  3165   000DD6  6417               	cpfsgt	Actualizar_Matriz@i_684^0,c
  3166   000DD8  EFF0  F006         	goto	u1051
  3167   000DDC  EFF2  F006         	goto	u1050
  3168   000DE0                     u1051:
  3169   000DE0  EFD4  F006         	goto	l1924
  3170   000DE4                     u1050:
  3171   000DE4                     
  3172                           ;ASCENSOR.c: 130:     Lcd_Set_Cursor(3,12);
  3173   000DE4  0E0C               	movlw	12
  3174   000DE6  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  3175   000DE8  0E03               	movlw	3
  3176   000DEA  EC20  F007         	call	_Lcd_Set_Cursor
  3177   000DEE                     
  3178                           ;ASCENSOR.c: 131:     for(char i=0;i<=3;i++){
  3179   000DEE  6A18               	clrf	Actualizar_Matriz@i_685^0,c
  3180   000DF0                     l1944:
  3181                           
  3182                           ;ASCENSOR.c: 132:         if (Fila1[i]==0){
  3183   000DF0  5018               	movf	Actualizar_Matriz@i_685^0,w,c
  3184   000DF2  0F26               	addlw	low _Fila1
  3185   000DF4  6ED9               	movwf	fsr2l,c
  3186   000DF6  6ADA               	clrf	fsr2h,c
  3187   000DF8  50DF               	movf	indf2,w,c
  3188   000DFA  A4D8               	btfss	status,2,c
  3189   000DFC  EF02  F007         	goto	u1061
  3190   000E00  EF04  F007         	goto	u1060
  3191   000E04                     u1061:
  3192   000E04  EF09  F007         	goto	l1948
  3193   000E08                     u1060:
  3194   000E08                     
  3195                           ;ASCENSOR.c: 133:             Lcd_Write_Char(0);
  3196   000E08  0E00               	movlw	0
  3197   000E0A  EC85  F009         	call	_Lcd_Write_Char
  3198                           
  3199                           ;ASCENSOR.c: 134:         }
  3200   000E0E  EF0D  F007         	goto	l1952
  3201   000E12                     l1948:
  3202                           
  3203                           ;ASCENSOR.c: 136:         {;ASCENSOR.c: 137:             Lcd_Write_Char(1);
  3204   000E12  0E01               	movlw	1
  3205   000E14  EC85  F009         	call	_Lcd_Write_Char
  3206   000E18                     
  3207                           ;ASCENSOR.c: 138:             acum++;
  3208   000E18  2A15               	incf	Actualizar_Matriz@acum^0,f,c
  3209   000E1A                     l1952:
  3210                           
  3211                           ;ASCENSOR.c: 140:     }
  3212   000E1A  2A18               	incf	Actualizar_Matriz@i_685^0,f,c
  3213   000E1C  0E03               	movlw	3
  3214   000E1E  6418               	cpfsgt	Actualizar_Matriz@i_685^0,c
  3215   000E20  EF14  F007         	goto	u1071
  3216   000E24  EF16  F007         	goto	u1070
  3217   000E28                     u1071:
  3218   000E28  EFF8  F006         	goto	l1944
  3219   000E2C                     u1070:
  3220   000E2C                     
  3221                           ;ASCENSOR.c: 141:     Lcd_Set_Cursor(1,12);
  3222   000E2C  0E0C               	movlw	12
  3223   000E2E  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  3224   000E30  0E01               	movlw	1
  3225   000E32  EC20  F007         	call	_Lcd_Set_Cursor
  3226   000E36                     
  3227                           ;ASCENSOR.c: 142:     f=1;
  3228   000E36  0E01               	movlw	1
  3229   000E38  6E2B               	movwf	_f^0,c
  3230   000E3A                     
  3231                           ;ASCENSOR.c: 143:     c=12;
  3232   000E3A  0E0C               	movlw	12
  3233   000E3C  6E2A               	movwf	_c^0,c
  3234   000E3E  0012               	return		;funcret
  3235   000E40                     __end_of_Actualizar_Matriz:
  3236                           	callstack 0
  3237                           
  3238 ;; *************** function _Lcd_Write_Char *****************
  3239 ;; Defined at:
  3240 ;;		line 88 in file "lcd.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  a               1    wreg     unsigned char 
  3243 ;; Auto vars:     Size  Location     Type
  3244 ;;  a               1   15[COMRAM] unsigned char 
  3245 ;;  y               1   14[COMRAM] unsigned char 
  3246 ;;  temp            1   13[COMRAM] unsigned char 
  3247 ;; Return value:  Size  Location     Type
  3248 ;;                  1    wreg      void 
  3249 ;; Registers used:
  3250 ;;		wreg, status,2, status,0, cstack
  3251 ;; Tracked objects:
  3252 ;;		On entry : 0/0
  3253 ;;		On exit  : 0/0
  3254 ;;		Unchanged: 0/0
  3255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3256 ;;      Params:         0       0       0       0       0       0       0       0       0
  3257 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3259 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3260 ;;Total ram usage:        3 bytes
  3261 ;; Hardware stack levels used: 1
  3262 ;; Hardware stack levels required when called: 6
  3263 ;; This function calls:
  3264 ;;		_Lcd_Port
  3265 ;; This function is called by:
  3266 ;;		_Actualizar_Matriz
  3267 ;;		_Modificar
  3268 ;;		_Lcd_Write_String
  3269 ;;		_Lcd_CGRAM_CreateChar
  3270 ;; This function uses a non-reentrant model
  3271 ;;
  3272                           
  3273                           	psect	text17
  3274   00130A                     __ptext17:
  3275                           	callstack 0
  3276   00130A                     _Lcd_Write_Char:
  3277                           	callstack 22
  3278                           
  3279                           ;incstack = 0
  3280                           ;Lcd_Write_Char@a stored from wreg
  3281   00130A  6E10               	movwf	Lcd_Write_Char@a^0,c
  3282   00130C                     
  3283                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
  3284   00130C  5010               	movf	Lcd_Write_Char@a^0,w,c
  3285   00130E  0B0F               	andlw	15
  3286   001310  6E0E               	movwf	Lcd_Write_Char@temp^0,c
  3287                           
  3288                           ;lcd.c: 92:     y = a&0xF0;
  3289   001312  5010               	movf	Lcd_Write_Char@a^0,w,c
  3290   001314  0BF0               	andlw	240
  3291   001316  6E0F               	movwf	Lcd_Write_Char@y^0,c
  3292   001318                     
  3293                           ;lcd.c: 93:     LATEbits.LE0 = 1;
  3294   001318  808D               	bsf	141,0,c	;volatile
  3295   00131A                     
  3296                           ;lcd.c: 94:     Lcd_Port(y>>4);
  3297   00131A  380F               	swapf	Lcd_Write_Char@y^0,w,c
  3298   00131C  0B0F               	andlw	15
  3299   00131E  ECBC  F008         	call	_Lcd_Port
  3300   001322                     
  3301                           ;lcd.c: 95:     LATEbits.LE1 = 1;
  3302   001322  828D               	bsf	141,1,c	;volatile
  3303   001324                     
  3304                           ;lcd.c: 96:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3305   001324  0E0D               	movlw	13
  3306   001326                     u1507:
  3307   001326  2EE8               	decfsz	wreg,f,c
  3308   001328  D7FE               	bra	u1507
  3309   00132A  0000               	nop	
  3310   00132C                     
  3311                           ;lcd.c: 97:     LATEbits.LE1 = 0;
  3312   00132C  928D               	bcf	141,1,c	;volatile
  3313   00132E                     
  3314                           ;lcd.c: 98:     Lcd_Port(temp);
  3315   00132E  500E               	movf	Lcd_Write_Char@temp^0,w,c
  3316   001330  ECBC  F008         	call	_Lcd_Port
  3317   001334                     
  3318                           ;lcd.c: 99:     LATEbits.LE1 = 1;
  3319   001334  828D               	bsf	141,1,c	;volatile
  3320   001336                     
  3321                           ;lcd.c: 100:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  3322   001336  0E0D               	movlw	13
  3323   001338                     u1517:
  3324   001338  2EE8               	decfsz	wreg,f,c
  3325   00133A  D7FE               	bra	u1517
  3326   00133C  0000               	nop	
  3327   00133E                     
  3328                           ;lcd.c: 101:     LATEbits.LE1 = 0;
  3329   00133E  928D               	bcf	141,1,c	;volatile
  3330   001340  0012               	return		;funcret
  3331   001342                     __end_of_Lcd_Write_Char:
  3332                           	callstack 0
  3333                           
  3334 ;; *************** function _Lcd_Set_Cursor *****************
  3335 ;; Defined at:
  3336 ;;		line 26 in file "lcd.c"
  3337 ;; Parameters:    Size  Location     Type
  3338 ;;  a               1    wreg     unsigned char 
  3339 ;;  b               1   15[COMRAM] unsigned char 
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;  a               1   16[COMRAM] unsigned char 
  3342 ;;  temp            1   19[COMRAM] unsigned char 
  3343 ;;  y               1   18[COMRAM] unsigned char 
  3344 ;;  z               1   17[COMRAM] unsigned char 
  3345 ;; Return value:  Size  Location     Type
  3346 ;;                  1    wreg      void 
  3347 ;; Registers used:
  3348 ;;		wreg, status,2, status,0, cstack
  3349 ;; Tracked objects:
  3350 ;;		On entry : 0/0
  3351 ;;		On exit  : 0/0
  3352 ;;		Unchanged: 0/0
  3353 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3354 ;;      Params:         1       0       0       0       0       0       0       0       0
  3355 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3356 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3357 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3358 ;;Total ram usage:        5 bytes
  3359 ;; Hardware stack levels used: 1
  3360 ;; Hardware stack levels required when called: 7
  3361 ;; This function calls:
  3362 ;;		_Lcd_Cmd
  3363 ;; This function is called by:
  3364 ;;		_detectar
  3365 ;;		_Actualizar_Matriz
  3366 ;;		_main
  3367 ;; This function uses a non-reentrant model
  3368 ;;
  3369                           
  3370                           	psect	text18
  3371   000E40                     __ptext18:
  3372                           	callstack 0
  3373   000E40                     _Lcd_Set_Cursor:
  3374                           	callstack 22
  3375                           
  3376                           ;incstack = 0
  3377                           ;Lcd_Set_Cursor@a stored from wreg
  3378   000E40  6E11               	movwf	Lcd_Set_Cursor@a^0,c
  3379   000E42                     
  3380                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
  3381   000E42  0411               	decf	Lcd_Set_Cursor@a^0,w,c
  3382   000E44  A4D8               	btfss	status,2,c
  3383   000E46  EF27  F007         	goto	u901
  3384   000E4A  EF29  F007         	goto	u900
  3385   000E4E                     u901:
  3386   000E4E  EF3A  F007         	goto	l1806
  3387   000E52                     u900:
  3388   000E52                     
  3389                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
  3390   000E52  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  3391   000E54  0F7F               	addlw	127
  3392   000E56  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  3393                           
  3394                           ;lcd.c: 32:         z = temp>>4;
  3395   000E58  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3396   000E5A  0B0F               	andlw	15
  3397   000E5C  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  3398                           
  3399                           ;lcd.c: 33:         y = temp & 0x0F;
  3400   000E5E  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  3401   000E60  0B0F               	andlw	15
  3402   000E62  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  3403   000E64                     
  3404                           ;lcd.c: 34:         Lcd_Cmd(z);
  3405   000E64  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  3406   000E66  ECBA  F009         	call	_Lcd_Cmd
  3407   000E6A                     
  3408                           ;lcd.c: 35:         Lcd_Cmd(y);
  3409   000E6A  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  3410   000E6C  ECBA  F009         	call	_Lcd_Cmd
  3411                           
  3412                           ;lcd.c: 36:     }
  3413   000E70  EF88  F007         	goto	l281
  3414   000E74                     l1806:
  3415   000E74  0E02               	movlw	2
  3416   000E76  1811               	xorwf	Lcd_Set_Cursor@a^0,w,c
  3417   000E78  A4D8               	btfss	status,2,c
  3418   000E7A  EF41  F007         	goto	u911
  3419   000E7E  EF43  F007         	goto	u910
  3420   000E82                     u911:
  3421   000E82  EF54  F007         	goto	l1814
  3422   000E86                     u910:
  3423   000E86                     
  3424                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
  3425   000E86  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  3426   000E88  0FBF               	addlw	191
  3427   000E8A  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  3428                           
  3429                           ;lcd.c: 40:         z = temp>>4;
  3430   000E8C  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3431   000E8E  0B0F               	andlw	15
  3432   000E90  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  3433                           
  3434                           ;lcd.c: 41:         y = temp & 0x0F;
  3435   000E92  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  3436   000E94  0B0F               	andlw	15
  3437   000E96  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  3438   000E98                     
  3439                           ;lcd.c: 42:         Lcd_Cmd(z);
  3440   000E98  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  3441   000E9A  ECBA  F009         	call	_Lcd_Cmd
  3442   000E9E                     
  3443                           ;lcd.c: 43:         Lcd_Cmd(y);
  3444   000E9E  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  3445   000EA0  ECBA  F009         	call	_Lcd_Cmd
  3446                           
  3447                           ;lcd.c: 44:     }
  3448   000EA4  EF88  F007         	goto	l281
  3449   000EA8                     l1814:
  3450   000EA8  0E03               	movlw	3
  3451   000EAA  1811               	xorwf	Lcd_Set_Cursor@a^0,w,c
  3452   000EAC  A4D8               	btfss	status,2,c
  3453   000EAE  EF5B  F007         	goto	u921
  3454   000EB2  EF5D  F007         	goto	u920
  3455   000EB6                     u921:
  3456   000EB6  EF6E  F007         	goto	l1822
  3457   000EBA                     u920:
  3458   000EBA                     
  3459                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x90 + b - 1;
  3460   000EBA  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  3461   000EBC  0F8F               	addlw	143
  3462   000EBE  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  3463                           
  3464                           ;lcd.c: 48:         z = temp>>4;
  3465   000EC0  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3466   000EC2  0B0F               	andlw	15
  3467   000EC4  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  3468                           
  3469                           ;lcd.c: 49:         y = temp & 0x0F;
  3470   000EC6  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  3471   000EC8  0B0F               	andlw	15
  3472   000ECA  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  3473   000ECC                     
  3474                           ;lcd.c: 50:         Lcd_Cmd(z);
  3475   000ECC  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  3476   000ECE  ECBA  F009         	call	_Lcd_Cmd
  3477   000ED2                     
  3478                           ;lcd.c: 51:         Lcd_Cmd(y);
  3479   000ED2  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  3480   000ED4  ECBA  F009         	call	_Lcd_Cmd
  3481                           
  3482                           ;lcd.c: 52:     }
  3483   000ED8  EF88  F007         	goto	l281
  3484   000EDC                     l1822:
  3485   000EDC  0E04               	movlw	4
  3486   000EDE  1811               	xorwf	Lcd_Set_Cursor@a^0,w,c
  3487   000EE0  A4D8               	btfss	status,2,c
  3488   000EE2  EF75  F007         	goto	u931
  3489   000EE6  EF77  F007         	goto	u930
  3490   000EEA                     u931:
  3491   000EEA  EF88  F007         	goto	l277
  3492   000EEE                     u930:
  3493   000EEE                     
  3494                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD0 + b - 1;
  3495   000EEE  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  3496   000EF0  0FCF               	addlw	207
  3497   000EF2  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  3498                           
  3499                           ;lcd.c: 56:         z = temp>>4;
  3500   000EF4  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  3501   000EF6  0B0F               	andlw	15
  3502   000EF8  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  3503                           
  3504                           ;lcd.c: 57:         y = temp & 0x0F;
  3505   000EFA  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  3506   000EFC  0B0F               	andlw	15
  3507   000EFE  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  3508   000F00                     
  3509                           ;lcd.c: 58:         Lcd_Cmd(z);
  3510   000F00  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  3511   000F02  ECBA  F009         	call	_Lcd_Cmd
  3512   000F06                     
  3513                           ;lcd.c: 59:         Lcd_Cmd(y);
  3514   000F06  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  3515   000F08  ECBA  F009         	call	_Lcd_Cmd
  3516   000F0C  EF88  F007         	goto	l281
  3517   000F10                     l277:
  3518   000F10                     l281:
  3519   000F10  0012               	return		;funcret
  3520   000F12                     __end_of_Lcd_Set_Cursor:
  3521                           	callstack 0
  3522                           
  3523 ;; *************** function _Lcd_Cmd *****************
  3524 ;; Defined at:
  3525 ;;		line 11 in file "lcd.c"
  3526 ;; Parameters:    Size  Location     Type
  3527 ;;  a               1    wreg     unsigned char 
  3528 ;; Auto vars:     Size  Location     Type
  3529 ;;  a               1   14[COMRAM] unsigned char 
  3530 ;; Return value:  Size  Location     Type
  3531 ;;                  1    wreg      void 
  3532 ;; Registers used:
  3533 ;;		wreg, status,2, cstack
  3534 ;; Tracked objects:
  3535 ;;		On entry : 0/0
  3536 ;;		On exit  : 0/0
  3537 ;;		Unchanged: 0/0
  3538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3539 ;;      Params:         0       0       0       0       0       0       0       0       0
  3540 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3541 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3542 ;;      Totals:         2       0       0       0       0       0       0       0       0
  3543 ;;Total ram usage:        2 bytes
  3544 ;; Hardware stack levels used: 1
  3545 ;; Hardware stack levels required when called: 6
  3546 ;; This function calls:
  3547 ;;		_Lcd_Port
  3548 ;; This function is called by:
  3549 ;;		_Lcd_Clear
  3550 ;;		_Lcd_Set_Cursor
  3551 ;;		_Lcd_Init
  3552 ;;		_Lcd_NoBlink
  3553 ;;		_Lcd_CGRAM_Init
  3554 ;;		_Lcd_CGRAM_Close
  3555 ;;		_Lcd_Shift_Right
  3556 ;;		_Lcd_Shift_Left
  3557 ;; This function uses a non-reentrant model
  3558 ;;
  3559                           
  3560                           	psect	text19
  3561   001374                     __ptext19:
  3562                           	callstack 0
  3563   001374                     _Lcd_Cmd:
  3564                           	callstack 22
  3565                           
  3566                           ;incstack = 0
  3567                           ;Lcd_Cmd@a stored from wreg
  3568   001374  6E0F               	movwf	Lcd_Cmd@a^0,c
  3569   001376                     
  3570                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATEbits.LE0 = 0;
  3571   001376  908D               	bcf	141,0,c	;volatile
  3572   001378                     
  3573                           ;lcd.c: 14:     Lcd_Port(a);
  3574   001378  500F               	movf	Lcd_Cmd@a^0,w,c
  3575   00137A  ECBC  F008         	call	_Lcd_Port
  3576   00137E                     
  3577                           ;lcd.c: 15:     LATEbits.LE1 = 1;
  3578   00137E  828D               	bsf	141,1,c	;volatile
  3579   001380                     
  3580                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
  3581   001380  0E06               	movlw	6
  3582   001382  6E0E               	movwf	??_Lcd_Cmd^0,c
  3583   001384  0E30               	movlw	48
  3584   001386                     u1527:
  3585   001386  2EE8               	decfsz	wreg,f,c
  3586   001388  D7FE               	bra	u1527
  3587   00138A  2E0E               	decfsz	??_Lcd_Cmd^0,f,c
  3588   00138C  D7FC               	bra	u1527
  3589   00138E  D000               	nop2	
  3590   001390                     
  3591                           ;lcd.c: 17:     LATEbits.LE1 = 0;
  3592   001390  928D               	bcf	141,1,c	;volatile
  3593   001392  0012               	return		;funcret
  3594   001394                     __end_of_Lcd_Cmd:
  3595                           	callstack 0
  3596                           
  3597 ;; *************** function _Lcd_Port *****************
  3598 ;; Defined at:
  3599 ;;		line 3 in file "lcd.c"
  3600 ;; Parameters:    Size  Location     Type
  3601 ;;  a               1    wreg     unsigned char 
  3602 ;; Auto vars:     Size  Location     Type
  3603 ;;  a               1   12[COMRAM] unsigned char 
  3604 ;; Return value:  Size  Location     Type
  3605 ;;                  1    wreg      void 
  3606 ;; Registers used:
  3607 ;;		wreg
  3608 ;; Tracked objects:
  3609 ;;		On entry : 0/0
  3610 ;;		On exit  : 0/0
  3611 ;;		Unchanged: 0/0
  3612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3613 ;;      Params:         0       0       0       0       0       0       0       0       0
  3614 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3615 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3616 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3617 ;;Total ram usage:        1 bytes
  3618 ;; Hardware stack levels used: 1
  3619 ;; Hardware stack levels required when called: 5
  3620 ;; This function calls:
  3621 ;;		Nothing
  3622 ;; This function is called by:
  3623 ;;		_Lcd_Cmd
  3624 ;;		_Lcd_Init
  3625 ;;		_Lcd_Write_Char
  3626 ;; This function uses a non-reentrant model
  3627 ;;
  3628                           
  3629                           	psect	text20
  3630   001178                     __ptext20:
  3631                           	callstack 0
  3632   001178                     _Lcd_Port:
  3633                           	callstack 22
  3634                           
  3635                           ;incstack = 0
  3636                           ;Lcd_Port@a stored from wreg
  3637   001178  6E0D               	movwf	Lcd_Port@a^0,c
  3638   00117A                     
  3639                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LD4 = 1) 
      +                          : (LATDbits.LD4 = 0);
  3640   00117A  A00D               	btfss	Lcd_Port@a^0,0,c
  3641   00117C  EFC2  F008         	goto	u11
  3642   001180  EFC4  F008         	goto	u10
  3643   001184                     u11:
  3644   001184  EFC7  F008         	goto	l250
  3645   001188                     u10:
  3646   001188  888C               	bsf	140,4,c	;volatile
  3647   00118A  EFC8  F008         	goto	l1046
  3648   00118E                     l250:
  3649   00118E  988C               	bcf	140,4,c	;volatile
  3650   001190                     l1046:
  3651                           
  3652                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LD5 = 1) : (LATDbits.LD5 = 0);
  3653   001190  A20D               	btfss	Lcd_Port@a^0,1,c
  3654   001192  EFCD  F008         	goto	u21
  3655   001196  EFCF  F008         	goto	u20
  3656   00119A                     u21:
  3657   00119A  EFD2  F008         	goto	l254
  3658   00119E                     u20:
  3659   00119E  8A8C               	bsf	140,5,c	;volatile
  3660   0011A0  EFD3  F008         	goto	l1050
  3661   0011A4                     l254:
  3662   0011A4  9A8C               	bcf	140,5,c	;volatile
  3663   0011A6                     l1050:
  3664                           
  3665                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LD6 = 1) : (LATDbits.LD6 = 0);
  3666   0011A6  A40D               	btfss	Lcd_Port@a^0,2,c
  3667   0011A8  EFD8  F008         	goto	u31
  3668   0011AC  EFDA  F008         	goto	u30
  3669   0011B0                     u31:
  3670   0011B0  EFDD  F008         	goto	l258
  3671   0011B4                     u30:
  3672   0011B4  8C8C               	bsf	140,6,c	;volatile
  3673   0011B6  EFDE  F008         	goto	l1054
  3674   0011BA                     l258:
  3675   0011BA  9C8C               	bcf	140,6,c	;volatile
  3676   0011BC                     l1054:
  3677                           
  3678                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LD7 = 1) : (LATDbits.LD7 = 0);
  3679   0011BC  A60D               	btfss	Lcd_Port@a^0,3,c
  3680   0011BE  EFE3  F008         	goto	u41
  3681   0011C2  EFE5  F008         	goto	u40
  3682   0011C6                     u41:
  3683   0011C6  EFE8  F008         	goto	l262
  3684   0011CA                     u40:
  3685   0011CA  8E8C               	bsf	140,7,c	;volatile
  3686   0011CC  EFE9  F008         	goto	l265
  3687   0011D0                     l262:
  3688   0011D0  9E8C               	bcf	140,7,c	;volatile
  3689   0011D2                     l265:
  3690   0011D2  0012               	return		;funcret
  3691   0011D4                     __end_of_Lcd_Port:
  3692                           	callstack 0
  3693                           
  3694 ;; *************** function _LowISR *****************
  3695 ;; Defined at:
  3696 ;;		line 189 in file "ASCENSOR.c"
  3697 ;; Parameters:    Size  Location     Type
  3698 ;;		None
  3699 ;; Auto vars:     Size  Location     Type
  3700 ;;  dummy           1   11[COMRAM] volatile unsigned char 
  3701 ;; Return value:  Size  Location     Type
  3702 ;;                  1    wreg      void 
  3703 ;; Registers used:
  3704 ;;		wreg, status,2, status,0, cstack
  3705 ;; Tracked objects:
  3706 ;;		On entry : 0/0
  3707 ;;		On exit  : 0/0
  3708 ;;		Unchanged: 0/0
  3709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3710 ;;      Params:         0       0       0       0       0       0       0       0       0
  3711 ;;      Locals:         1       0       0       0       0       0       0       0       0
  3712 ;;      Temps:          3       0       0       0       0       0       0       0       0
  3713 ;;      Totals:         4       0       0       0       0       0       0       0       0
  3714 ;;Total ram usage:        4 bytes
  3715 ;; Hardware stack levels used: 1
  3716 ;; Hardware stack levels required when called: 4
  3717 ;; This function calls:
  3718 ;;		_Lcd_Blink
  3719 ;;		i1_Lcd_Set_Cursor
  3720 ;; This function is called by:
  3721 ;;		Interrupt level 1
  3722 ;; This function uses a non-reentrant model
  3723 ;;
  3724                           
  3725                           	psect	intcodelo
  3726   000018                     __pintcodelo:
  3727                           	callstack 0
  3728   000018                     _LowISR:
  3729                           	callstack 22
  3730                           
  3731                           ;incstack = 0
  3732   000018  802F               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  3733   00001A  CFD8 F009          	movff	status,??_LowISR
  3734   00001E  CFE8 F00A          	movff	wreg,??_LowISR+1
  3735   000022  CFE0 F00B          	movff	bsr,??_LowISR+2
  3736   000026                     
  3737                           ;ASCENSOR.c: 190:     Lcd_Blink();
  3738   000026  EC25  F00A         	call	_Lcd_Blink	;wreg free
  3739   00002A                     
  3740                           ;ASCENSOR.c: 191:     if (INTCONbits.RBIF){
  3741   00002A  A0F2               	btfss	242,0,c	;volatile
  3742   00002C  EF1A  F000         	goto	i1u124_21
  3743   000030  EF1C  F000         	goto	i1u124_20
  3744   000034                     i1u124_21:
  3745   000034  EF64  F000         	goto	i1l169
  3746   000038                     i1u124_20:
  3747   000038                     
  3748                           ;ASCENSOR.c: 192:        volatile unsigned char dummy = PORTB;
  3749   000038  CF81 F00C          	movff	3969,LowISR@dummy	;volatile
  3750                           
  3751                           ;ASCENSOR.c: 193:        INTCONbits.RBIF=0;
  3752   00003C  90F2               	bcf	242,0,c	;volatile
  3753                           
  3754                           ;ASCENSOR.c: 195:        if (PORTBbits.RB6==1 && f>1){
  3755   00003E  AC81               	btfss	129,6,c	;volatile
  3756   000040  EF24  F000         	goto	i1u125_21
  3757   000044  EF26  F000         	goto	i1u125_20
  3758   000048                     i1u125_21:
  3759   000048  EF2F  F000         	goto	i1l2156
  3760   00004C                     i1u125_20:
  3761   00004C  0E01               	movlw	1
  3762   00004E  642B               	cpfsgt	_f^0,c
  3763   000050  EF2C  F000         	goto	i1u126_21
  3764   000054  EF2E  F000         	goto	i1u126_20
  3765   000058                     i1u126_21:
  3766   000058  EF2F  F000         	goto	i1l2156
  3767   00005C                     i1u126_20:
  3768   00005C                     
  3769                           ;ASCENSOR.c: 196:            f--;
  3770   00005C  062B               	decf	_f^0,f,c
  3771   00005E                     i1l2156:
  3772                           
  3773                           ;ASCENSOR.c: 198:        if (PORTBbits.RB7==1 && f<3){
  3774   00005E  AE81               	btfss	129,7,c	;volatile
  3775   000060  EF34  F000         	goto	i1u127_21
  3776   000064  EF36  F000         	goto	i1u127_20
  3777   000068                     i1u127_21:
  3778   000068  EF3F  F000         	goto	i1l2162
  3779   00006C                     i1u127_20:
  3780   00006C  0E03               	movlw	3
  3781   00006E  602B               	cpfslt	_f^0,c
  3782   000070  EF3C  F000         	goto	i1u128_21
  3783   000074  EF3E  F000         	goto	i1u128_20
  3784   000078                     i1u128_21:
  3785   000078  EF3F  F000         	goto	i1l2162
  3786   00007C                     i1u128_20:
  3787   00007C                     
  3788                           ;ASCENSOR.c: 199:            f++;
  3789   00007C  2A2B               	incf	_f^0,f,c
  3790   00007E                     i1l2162:
  3791                           
  3792                           ;ASCENSOR.c: 201:        if (PORTBbits.RB4==1 && c>12){
  3793   00007E  A881               	btfss	129,4,c	;volatile
  3794   000080  EF44  F000         	goto	i1u129_21
  3795   000084  EF46  F000         	goto	i1u129_20
  3796   000088                     i1u129_21:
  3797   000088  EF4F  F000         	goto	i1l2168
  3798   00008C                     i1u129_20:
  3799   00008C  0E0C               	movlw	12
  3800   00008E  642A               	cpfsgt	_c^0,c
  3801   000090  EF4C  F000         	goto	i1u130_21
  3802   000094  EF4E  F000         	goto	i1u130_20
  3803   000098                     i1u130_21:
  3804   000098  EF4F  F000         	goto	i1l2168
  3805   00009C                     i1u130_20:
  3806   00009C                     
  3807                           ;ASCENSOR.c: 202:           c--;
  3808   00009C  062A               	decf	_c^0,f,c
  3809   00009E                     i1l2168:
  3810                           
  3811                           ;ASCENSOR.c: 204:        if (PORTBbits.RB5==1 && c< 15){
  3812   00009E  AA81               	btfss	129,5,c	;volatile
  3813   0000A0  EF54  F000         	goto	i1u131_21
  3814   0000A4  EF56  F000         	goto	i1u131_20
  3815   0000A8                     i1u131_21:
  3816   0000A8  EF5F  F000         	goto	i1l2174
  3817   0000AC                     i1u131_20:
  3818   0000AC  0E0F               	movlw	15
  3819   0000AE  602A               	cpfslt	_c^0,c
  3820   0000B0  EF5C  F000         	goto	i1u132_21
  3821   0000B4  EF5E  F000         	goto	i1u132_20
  3822   0000B8                     i1u132_21:
  3823   0000B8  EF5F  F000         	goto	i1l2174
  3824   0000BC                     i1u132_20:
  3825   0000BC                     
  3826                           ;ASCENSOR.c: 205:            c++;
  3827   0000BC  2A2A               	incf	_c^0,f,c
  3828   0000BE                     i1l2174:
  3829                           
  3830                           ;ASCENSOR.c: 208:        Lcd_Set_Cursor(f,c);
  3831   0000BE  C02A  F004         	movff	_c,i1Lcd_Set_Cursor@b
  3832   0000C2  502B               	movf	_f^0,w,c
  3833   0000C4  EC89  F007         	call	i1_Lcd_Set_Cursor
  3834   0000C8                     i1l169:
  3835   0000C8  C00B  FFE0         	movff	??_LowISR+2,bsr
  3836   0000CC  C00A  FFE8         	movff	??_LowISR+1,wreg
  3837   0000D0  C009  FFD8         	movff	??_LowISR,status
  3838   0000D4  902F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  3839   0000D6  0010               	retfie	
  3840   0000D8                     __end_of_LowISR:
  3841                           	callstack 0
  3842                           
  3843 ;; *************** function i1_Lcd_Set_Cursor *****************
  3844 ;; Defined at:
  3845 ;;		line 26 in file "lcd.c"
  3846 ;; Parameters:    Size  Location     Type
  3847 ;;  a               1    wreg     unsigned char 
  3848 ;;  b               1    3[COMRAM] unsigned char 
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;  a               1    4[COMRAM] unsigned char 
  3851 ;;  temp            1    7[COMRAM] unsigned char 
  3852 ;;  y               1    6[COMRAM] unsigned char 
  3853 ;;  z               1    5[COMRAM] unsigned char 
  3854 ;; Return value:  Size  Location     Type
  3855 ;;                  1    wreg      void 
  3856 ;; Registers used:
  3857 ;;		wreg, status,2, status,0, cstack
  3858 ;; Tracked objects:
  3859 ;;		On entry : 0/0
  3860 ;;		On exit  : 0/0
  3861 ;;		Unchanged: 0/0
  3862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3863 ;;      Params:         1       0       0       0       0       0       0       0       0
  3864 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3865 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3866 ;;      Totals:         5       0       0       0       0       0       0       0       0
  3867 ;;Total ram usage:        5 bytes
  3868 ;; Hardware stack levels used: 1
  3869 ;; Hardware stack levels required when called: 3
  3870 ;; This function calls:
  3871 ;;		i1_Lcd_Cmd
  3872 ;; This function is called by:
  3873 ;;		_LowISR
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text22
  3878   000F12                     __ptext22:
  3879                           	callstack 0
  3880   000F12                     i1_Lcd_Set_Cursor:
  3881                           	callstack 22
  3882                           
  3883                           ;incstack = 0
  3884                           ;i1Lcd_Set_Cursor@a stored from wreg
  3885   000F12  6E05               	movwf	i1Lcd_Set_Cursor@a^0,c
  3886   000F14                     
  3887                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
  3888   000F14  0405               	decf	i1Lcd_Set_Cursor@a^0,w,c
  3889   000F16  A4D8               	btfss	status,2,c
  3890   000F18  EF90  F007         	goto	i1u119_21
  3891   000F1C  EF92  F007         	goto	i1u119_20
  3892   000F20                     i1u119_21:
  3893   000F20  EFA3  F007         	goto	i1l2110
  3894   000F24                     i1u119_20:
  3895   000F24                     
  3896                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
  3897   000F24  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  3898   000F26  0F7F               	addlw	127
  3899   000F28  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  3900                           
  3901                           ;lcd.c: 32:         z = temp>>4;
  3902   000F2A  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  3903   000F2C  0B0F               	andlw	15
  3904   000F2E  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  3905                           
  3906                           ;lcd.c: 33:         y = temp & 0x0F;
  3907   000F30  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  3908   000F32  0B0F               	andlw	15
  3909   000F34  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  3910   000F36                     
  3911                           ;lcd.c: 34:         Lcd_Cmd(z);
  3912   000F36  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  3913   000F38  ECCA  F009         	call	i1_Lcd_Cmd
  3914   000F3C                     
  3915                           ;lcd.c: 35:         Lcd_Cmd(y);
  3916   000F3C  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  3917   000F3E  ECCA  F009         	call	i1_Lcd_Cmd
  3918                           
  3919                           ;lcd.c: 36:     }
  3920   000F42  EFF1  F007         	goto	i1l281
  3921   000F46                     i1l2110:
  3922   000F46  0E02               	movlw	2
  3923   000F48  1805               	xorwf	i1Lcd_Set_Cursor@a^0,w,c
  3924   000F4A  A4D8               	btfss	status,2,c
  3925   000F4C  EFAA  F007         	goto	i1u120_21
  3926   000F50  EFAC  F007         	goto	i1u120_20
  3927   000F54                     i1u120_21:
  3928   000F54  EFBD  F007         	goto	i1l2118
  3929   000F58                     i1u120_20:
  3930   000F58                     
  3931                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
  3932   000F58  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  3933   000F5A  0FBF               	addlw	191
  3934   000F5C  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  3935                           
  3936                           ;lcd.c: 40:         z = temp>>4;
  3937   000F5E  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  3938   000F60  0B0F               	andlw	15
  3939   000F62  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  3940                           
  3941                           ;lcd.c: 41:         y = temp & 0x0F;
  3942   000F64  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  3943   000F66  0B0F               	andlw	15
  3944   000F68  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  3945   000F6A                     
  3946                           ;lcd.c: 42:         Lcd_Cmd(z);
  3947   000F6A  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  3948   000F6C  ECCA  F009         	call	i1_Lcd_Cmd
  3949   000F70                     
  3950                           ;lcd.c: 43:         Lcd_Cmd(y);
  3951   000F70  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  3952   000F72  ECCA  F009         	call	i1_Lcd_Cmd
  3953                           
  3954                           ;lcd.c: 44:     }
  3955   000F76  EFF1  F007         	goto	i1l281
  3956   000F7A                     i1l2118:
  3957   000F7A  0E03               	movlw	3
  3958   000F7C  1805               	xorwf	i1Lcd_Set_Cursor@a^0,w,c
  3959   000F7E  A4D8               	btfss	status,2,c
  3960   000F80  EFC4  F007         	goto	i1u121_21
  3961   000F84  EFC6  F007         	goto	i1u121_20
  3962   000F88                     i1u121_21:
  3963   000F88  EFD7  F007         	goto	i1l2126
  3964   000F8C                     i1u121_20:
  3965   000F8C                     
  3966                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x90 + b - 1;
  3967   000F8C  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  3968   000F8E  0F8F               	addlw	143
  3969   000F90  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  3970                           
  3971                           ;lcd.c: 48:         z = temp>>4;
  3972   000F92  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  3973   000F94  0B0F               	andlw	15
  3974   000F96  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  3975                           
  3976                           ;lcd.c: 49:         y = temp & 0x0F;
  3977   000F98  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  3978   000F9A  0B0F               	andlw	15
  3979   000F9C  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  3980   000F9E                     
  3981                           ;lcd.c: 50:         Lcd_Cmd(z);
  3982   000F9E  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  3983   000FA0  ECCA  F009         	call	i1_Lcd_Cmd
  3984   000FA4                     
  3985                           ;lcd.c: 51:         Lcd_Cmd(y);
  3986   000FA4  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  3987   000FA6  ECCA  F009         	call	i1_Lcd_Cmd
  3988                           
  3989                           ;lcd.c: 52:     }
  3990   000FAA  EFF1  F007         	goto	i1l281
  3991   000FAE                     i1l2126:
  3992   000FAE  0E04               	movlw	4
  3993   000FB0  1805               	xorwf	i1Lcd_Set_Cursor@a^0,w,c
  3994   000FB2  A4D8               	btfss	status,2,c
  3995   000FB4  EFDE  F007         	goto	i1u122_21
  3996   000FB8  EFE0  F007         	goto	i1u122_20
  3997   000FBC                     i1u122_21:
  3998   000FBC  EFF1  F007         	goto	i1l277
  3999   000FC0                     i1u122_20:
  4000   000FC0                     
  4001                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD0 + b - 1;
  4002   000FC0  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  4003   000FC2  0FCF               	addlw	207
  4004   000FC4  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  4005                           
  4006                           ;lcd.c: 56:         z = temp>>4;
  4007   000FC6  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  4008   000FC8  0B0F               	andlw	15
  4009   000FCA  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  4010                           
  4011                           ;lcd.c: 57:         y = temp & 0x0F;
  4012   000FCC  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  4013   000FCE  0B0F               	andlw	15
  4014   000FD0  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  4015   000FD2                     
  4016                           ;lcd.c: 58:         Lcd_Cmd(z);
  4017   000FD2  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  4018   000FD4  ECCA  F009         	call	i1_Lcd_Cmd
  4019   000FD8                     
  4020                           ;lcd.c: 59:         Lcd_Cmd(y);
  4021   000FD8  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  4022   000FDA  ECCA  F009         	call	i1_Lcd_Cmd
  4023   000FDE  EFF1  F007         	goto	i1l281
  4024   000FE2                     i1l277:
  4025   000FE2                     i1l281:
  4026   000FE2  0012               	return		;funcret
  4027   000FE4                     __end_ofi1_Lcd_Set_Cursor:
  4028                           	callstack 0
  4029                           
  4030 ;; *************** function _Lcd_Blink *****************
  4031 ;; Defined at:
  4032 ;;		line 123 in file "lcd.c"
  4033 ;; Parameters:    Size  Location     Type
  4034 ;;		None
  4035 ;; Auto vars:     Size  Location     Type
  4036 ;;		None
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  1    wreg      void 
  4039 ;; Registers used:
  4040 ;;		wreg, status,2, cstack
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4046 ;;      Params:         0       0       0       0       0       0       0       0       0
  4047 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4048 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4049 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4050 ;;Total ram usage:        0 bytes
  4051 ;; Hardware stack levels used: 1
  4052 ;; Hardware stack levels required when called: 3
  4053 ;; This function calls:
  4054 ;;		i1_Lcd_Cmd
  4055 ;; This function is called by:
  4056 ;;		_LowISR
  4057 ;; This function uses a non-reentrant model
  4058 ;;
  4059                           
  4060                           	psect	text23
  4061   00144A                     __ptext23:
  4062                           	callstack 0
  4063   00144A                     _Lcd_Blink:
  4064                           	callstack 22
  4065   00144A                     
  4066                           ;lcd.c: 125:     Lcd_Cmd(0x00);
  4067   00144A  0E00               	movlw	0
  4068   00144C  ECCA  F009         	call	i1_Lcd_Cmd
  4069                           
  4070                           ;lcd.c: 126:     Lcd_Cmd(0x0F);
  4071   001450  0E0F               	movlw	15
  4072   001452  ECCA  F009         	call	i1_Lcd_Cmd
  4073   001456  0012               	return		;funcret
  4074   001458                     __end_of_Lcd_Blink:
  4075                           	callstack 0
  4076                           
  4077 ;; *************** function i1_Lcd_Cmd *****************
  4078 ;; Defined at:
  4079 ;;		line 11 in file "lcd.c"
  4080 ;; Parameters:    Size  Location     Type
  4081 ;;  a               1    wreg     unsigned char 
  4082 ;; Auto vars:     Size  Location     Type
  4083 ;;  a               1    2[COMRAM] unsigned char 
  4084 ;; Return value:  Size  Location     Type
  4085 ;;                  1    wreg      void 
  4086 ;; Registers used:
  4087 ;;		wreg, status,2, cstack
  4088 ;; Tracked objects:
  4089 ;;		On entry : 0/0
  4090 ;;		On exit  : 0/0
  4091 ;;		Unchanged: 0/0
  4092 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4093 ;;      Params:         0       0       0       0       0       0       0       0       0
  4094 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4095 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4096 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4097 ;;Total ram usage:        2 bytes
  4098 ;; Hardware stack levels used: 1
  4099 ;; Hardware stack levels required when called: 2
  4100 ;; This function calls:
  4101 ;;		i1_Lcd_Port
  4102 ;; This function is called by:
  4103 ;;		_Lcd_Blink
  4104 ;;		i1_Lcd_Set_Cursor
  4105 ;; This function uses a non-reentrant model
  4106 ;;
  4107                           
  4108                           	psect	text24
  4109   001394                     __ptext24:
  4110                           	callstack 0
  4111   001394                     i1_Lcd_Cmd:
  4112                           	callstack 22
  4113                           
  4114                           ;incstack = 0
  4115                           ;i1Lcd_Cmd@a stored from wreg
  4116   001394  6E03               	movwf	i1Lcd_Cmd@a^0,c
  4117   001396                     
  4118                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATEbits.LE0 = 0;
  4119   001396  908D               	bcf	141,0,c	;volatile
  4120   001398                     
  4121                           ;lcd.c: 14:     Lcd_Port(a);
  4122   001398  5003               	movf	i1Lcd_Cmd@a^0,w,c
  4123   00139A  ECEA  F008         	call	i1_Lcd_Port
  4124   00139E                     
  4125                           ;lcd.c: 15:     LATEbits.LE1 = 1;
  4126   00139E  828D               	bsf	141,1,c	;volatile
  4127   0013A0                     
  4128                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
  4129   0013A0  0E06               	movlw	6
  4130   0013A2  6E02               	movwf	??i1_Lcd_Cmd^0,c
  4131   0013A4  0E30               	movlw	48
  4132   0013A6                     i1u153_27:
  4133   0013A6  2EE8               	decfsz	wreg,f,c
  4134   0013A8  D7FE               	bra	i1u153_27
  4135   0013AA  2E02               	decfsz	??i1_Lcd_Cmd^0,f,c
  4136   0013AC  D7FC               	bra	i1u153_27
  4137   0013AE  D000               	nop2	
  4138   0013B0                     
  4139                           ;lcd.c: 17:     LATEbits.LE1 = 0;
  4140   0013B0  928D               	bcf	141,1,c	;volatile
  4141   0013B2  0012               	return		;funcret
  4142   0013B4                     __end_ofi1_Lcd_Cmd:
  4143                           	callstack 0
  4144                           
  4145 ;; *************** function i1_Lcd_Port *****************
  4146 ;; Defined at:
  4147 ;;		line 3 in file "lcd.c"
  4148 ;; Parameters:    Size  Location     Type
  4149 ;;  a               1    wreg     unsigned char 
  4150 ;; Auto vars:     Size  Location     Type
  4151 ;;  a               1    0[COMRAM] unsigned char 
  4152 ;; Return value:  Size  Location     Type
  4153 ;;                  1    wreg      void 
  4154 ;; Registers used:
  4155 ;;		wreg
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4161 ;;      Params:         0       0       0       0       0       0       0       0       0
  4162 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4163 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4164 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4165 ;;Total ram usage:        1 bytes
  4166 ;; Hardware stack levels used: 1
  4167 ;; Hardware stack levels required when called: 1
  4168 ;; This function calls:
  4169 ;;		Nothing
  4170 ;; This function is called by:
  4171 ;;		i1_Lcd_Cmd
  4172 ;; This function uses a non-reentrant model
  4173 ;;
  4174                           
  4175                           	psect	text25
  4176   0011D4                     __ptext25:
  4177                           	callstack 0
  4178   0011D4                     i1_Lcd_Port:
  4179                           	callstack 22
  4180                           
  4181                           ;incstack = 0
  4182                           ;i1Lcd_Port@a stored from wreg
  4183   0011D4  6E01               	movwf	i1Lcd_Port@a^0,c
  4184   0011D6                     
  4185                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LD4 = 1) 
      +                          : (LATDbits.LD4 = 0);
  4186   0011D6  A001               	btfss	i1Lcd_Port@a^0,0,c
  4187   0011D8  EFF0  F008         	goto	i1u86_21
  4188   0011DC  EFF2  F008         	goto	i1u86_20
  4189   0011E0                     i1u86_21:
  4190   0011E0  EFF5  F008         	goto	i1l250
  4191   0011E4                     i1u86_20:
  4192   0011E4  888C               	bsf	140,4,c	;volatile
  4193   0011E6  EFF6  F008         	goto	i1l1786
  4194   0011EA                     i1l250:
  4195   0011EA  988C               	bcf	140,4,c	;volatile
  4196   0011EC                     i1l1786:
  4197                           
  4198                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LD5 = 1) : (LATDbits.LD5 = 0);
  4199   0011EC  A201               	btfss	i1Lcd_Port@a^0,1,c
  4200   0011EE  EFFB  F008         	goto	i1u87_21
  4201   0011F2  EFFD  F008         	goto	i1u87_20
  4202   0011F6                     i1u87_21:
  4203   0011F6  EF00  F009         	goto	i1l254
  4204   0011FA                     i1u87_20:
  4205   0011FA  8A8C               	bsf	140,5,c	;volatile
  4206   0011FC  EF01  F009         	goto	i1l1790
  4207   001200                     i1l254:
  4208   001200  9A8C               	bcf	140,5,c	;volatile
  4209   001202                     i1l1790:
  4210                           
  4211                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LD6 = 1) : (LATDbits.LD6 = 0);
  4212   001202  A401               	btfss	i1Lcd_Port@a^0,2,c
  4213   001204  EF06  F009         	goto	i1u88_21
  4214   001208  EF08  F009         	goto	i1u88_20
  4215   00120C                     i1u88_21:
  4216   00120C  EF0B  F009         	goto	i1l258
  4217   001210                     i1u88_20:
  4218   001210  8C8C               	bsf	140,6,c	;volatile
  4219   001212  EF0C  F009         	goto	i1l1794
  4220   001216                     i1l258:
  4221   001216  9C8C               	bcf	140,6,c	;volatile
  4222   001218                     i1l1794:
  4223                           
  4224                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LD7 = 1) : (LATDbits.LD7 = 0);
  4225   001218  A601               	btfss	i1Lcd_Port@a^0,3,c
  4226   00121A  EF11  F009         	goto	i1u89_21
  4227   00121E  EF13  F009         	goto	i1u89_20
  4228   001222                     i1u89_21:
  4229   001222  EF16  F009         	goto	i1l262
  4230   001226                     i1u89_20:
  4231   001226  8E8C               	bsf	140,7,c	;volatile
  4232   001228  EF17  F009         	goto	i1l265
  4233   00122C                     i1l262:
  4234   00122C  9E8C               	bcf	140,7,c	;volatile
  4235   00122E                     i1l265:
  4236   00122E  0012               	return		;funcret
  4237   001230                     __end_ofi1_Lcd_Port:
  4238                           	callstack 0
  4239                           
  4240 ;; *************** function _Stop *****************
  4241 ;; Defined at:
  4242 ;;		line 212 in file "ASCENSOR.c"
  4243 ;; Parameters:    Size  Location     Type
  4244 ;;		None
  4245 ;; Auto vars:     Size  Location     Type
  4246 ;;		None
  4247 ;; Return value:  Size  Location     Type
  4248 ;;                  1    wreg      void 
  4249 ;; Registers used:
  4250 ;;		None
  4251 ;; Tracked objects:
  4252 ;;		On entry : 0/0
  4253 ;;		On exit  : 0/0
  4254 ;;		Unchanged: 0/0
  4255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4256 ;;      Params:         0       0       0       0       0       0       0       0       0
  4257 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4258 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4259 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4260 ;;Total ram usage:        0 bytes
  4261 ;; Hardware stack levels used: 1
  4262 ;; This function calls:
  4263 ;;		Nothing
  4264 ;; This function is called by:
  4265 ;;		Interrupt level 2
  4266 ;; This function uses a non-reentrant model
  4267 ;;
  4268                           
  4269                           	psect	intcode
  4270   000008                     __pintcode:
  4271                           	callstack 0
  4272   000008                     _Stop:
  4273                           	callstack 22
  4274                           
  4275                           ;incstack = 0
  4276   000008  822F               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  4277   00000A  ED00  F00A         	call	int_func,f	;refresh shadow registers
  4278                           
  4279                           	psect	intcode_body
  4280   001400                     __pintcode_body:
  4281                           	callstack 22
  4282   001400                     int_func:
  4283                           	callstack 22
  4284   001400  0006               	pop		; remove dummy address from shadow register refresh
  4285   001402                     
  4286                           ;ASCENSOR.c: 213: INTCONbits.GIEH = 0;
  4287   001402  9EF2               	bcf	242,7,c	;volatile
  4288                           
  4289                           ;ASCENSOR.c: 214: T0CONbits.TMR0ON = 0;
  4290   001404  9ED5               	bcf	213,7,c	;volatile
  4291                           
  4292                           ;ASCENSOR.c: 215: LATDbits.LATD2=0;
  4293   001406  948C               	bcf	140,2,c	;volatile
  4294                           
  4295                           ;ASCENSOR.c: 216: LATDbits.LATD3=0;
  4296   001408  968C               	bcf	140,3,c	;volatile
  4297                           
  4298                           ;ASCENSOR.c: 217: INTCONbits.TMR0IF = 0;
  4299   00140A  94F2               	bcf	242,2,c	;volatile
  4300                           
  4301                           ;ASCENSOR.c: 218: INTCONbits.GIEH = 1;
  4302   00140C  8EF2               	bsf	242,7,c	;volatile
  4303   00140E  922F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  4304   001410  0011               	retfie		f
  4305   001412                     __end_of_Stop:
  4306                           	callstack 0
  4307                           
  4308                           	psect	rparam
  4309   000001                     ___rparam_used  equ	1
  4310   000000                     ___param_bank   equ	0
  4311   000000                     __Lparam        equ	__Lrparam
  4312   000000                     __Hparam        equ	__Hrparam
  4313                           
  4314                           	psect	temp
  4315   00002F                     btemp:
  4316                           	callstack 0
  4317   00002F                     	ds	1
  4318   00002F                     int$flags       set	btemp
  4319   000030                     wtemp8          set	btemp+1
  4320   000030                     ttemp5          set	btemp+1
  4321   000033                     ttemp6          set	btemp+4
  4322   000037                     ttemp7          set	btemp+8
  4323                           
  4324                           	psect	config
  4325                           
  4326                           ;Config register CONFIG1L @ 0x300000
  4327                           ;	PLL Prescaler Selection bits
  4328                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  4329                           ;	System Clock Postscaler Selection bits
  4330                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  4331                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  4332                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  4333   300000                     	org	3145728
  4334   300000  00                 	db	0
  4335                           
  4336                           ;Config register CONFIG1H @ 0x300001
  4337                           ;	Oscillator Selection bits
  4338                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
  4339                           ;	Fail-Safe Clock Monitor Enable bit
  4340                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  4341                           ;	Internal/External Oscillator Switchover bit
  4342                           ;	IESO = OFF, Oscillator Switchover mode disabled
  4343   300001                     	org	3145729
  4344   300001  08                 	db	8
  4345                           
  4346                           ;Config register CONFIG2L @ 0x300002
  4347                           ;	Power-up Timer Enable bit
  4348                           ;	PWRT = OFF, PWRT disabled
  4349                           ;	Brown-out Reset Enable bits
  4350                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  4351                           ;	Brown-out Reset Voltage bits
  4352                           ;	BORV = 3, Minimum setting 2.05V
  4353                           ;	USB Voltage Regulator Enable bit
  4354                           ;	VREGEN = OFF, USB voltage regulator disabled
  4355   300002                     	org	3145730
  4356   300002  19                 	db	25
  4357                           
  4358                           ;Config register CONFIG2H @ 0x300003
  4359                           ;	Watchdog Timer Enable bit
  4360                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4361                           ;	Watchdog Timer Postscale Select bits
  4362                           ;	WDTPS = 32768, 1:32768
  4363   300003                     	org	3145731
  4364   300003  1E                 	db	30
  4365                           
  4366                           ; Padding undefined space
  4367   300004                     	org	3145732
  4368   300004  FF                 	db	255
  4369                           
  4370                           ;Config register CONFIG3H @ 0x300005
  4371                           ;	CCP2 MUX bit
  4372                           ;	CCP2MX = OFF, CCP2 input/output is multiplexed with RB3
  4373                           ;	PORTB A/D Enable bit
  4374                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  4375                           ;	Low-Power Timer 1 Oscillator Enable bit
  4376                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  4377                           ;	MCLR Pin Enable bit
  4378                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  4379   300005                     	org	3145733
  4380   300005  00                 	db	0
  4381                           
  4382                           ;Config register CONFIG4L @ 0x300006
  4383                           ;	Stack Full/Underflow Reset Enable bit
  4384                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  4385                           ;	Single-Supply ICSP Enable bit
  4386                           ;	LVP = OFF, Single-Supply ICSP disabled
  4387                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  4388                           ;	ICPRT = ON, ICPORT enabled
  4389                           ;	Extended Instruction Set Enable bit
  4390                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  4391                           ;	Background Debugger Enable bit
  4392                           ;	DEBUG = 0x1, unprogrammed default
  4393   300006                     	org	3145734
  4394   300006  A0                 	db	160
  4395                           
  4396                           ; Padding undefined space
  4397   300007                     	org	3145735
  4398   300007  FF                 	db	255
  4399                           
  4400                           ;Config register CONFIG5L @ 0x300008
  4401                           ;	Code Protection bit
  4402                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  4403                           ;	Code Protection bit
  4404                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  4405                           ;	Code Protection bit
  4406                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  4407                           ;	Code Protection bit
  4408                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  4409   300008                     	org	3145736
  4410   300008  0F                 	db	15
  4411                           
  4412                           ;Config register CONFIG5H @ 0x300009
  4413                           ;	Boot Block Code Protection bit
  4414                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  4415                           ;	Data EEPROM Code Protection bit
  4416                           ;	CPD = OFF, Data EEPROM is not code-protected
  4417   300009                     	org	3145737
  4418   300009  C0                 	db	192
  4419                           
  4420                           ;Config register CONFIG6L @ 0x30000A
  4421                           ;	Write Protection bit
  4422                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  4423                           ;	Write Protection bit
  4424                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  4425                           ;	Write Protection bit
  4426                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  4427                           ;	Write Protection bit
  4428                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  4429   30000A                     	org	3145738
  4430   30000A  0F                 	db	15
  4431                           
  4432                           ;Config register CONFIG6H @ 0x30000B
  4433                           ;	Configuration Register Write Protection bit
  4434                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  4435                           ;	Boot Block Write Protection bit
  4436                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  4437                           ;	Data EEPROM Write Protection bit
  4438                           ;	WRTD = OFF, Data EEPROM is not write-protected
  4439   30000B                     	org	3145739
  4440   30000B  E0                 	db	224
  4441                           
  4442                           ;Config register CONFIG7L @ 0x30000C
  4443                           ;	Table Read Protection bit
  4444                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4445                           ;	Table Read Protection bit
  4446                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4447                           ;	Table Read Protection bit
  4448                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4449                           ;	Table Read Protection bit
  4450                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  4451   30000C                     	org	3145740
  4452   30000C  0F                 	db	15
  4453                           
  4454                           ;Config register CONFIG7H @ 0x30000D
  4455                           ;	Boot Block Table Read Protection bit
  4456                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  4457   30000D                     	org	3145741
  4458   30000D  40                 	db	64
  4459                           tosu	equ	0xFFF
  4460                           tosh	equ	0xFFE
  4461                           tosl	equ	0xFFD
  4462                           stkptr	equ	0xFFC
  4463                           pclatu	equ	0xFFB
  4464                           pclath	equ	0xFFA
  4465                           pcl	equ	0xFF9
  4466                           tblptru	equ	0xFF8
  4467                           tblptrh	equ	0xFF7
  4468                           tblptrl	equ	0xFF6
  4469                           tablat	equ	0xFF5
  4470                           prodh	equ	0xFF4
  4471                           prodl	equ	0xFF3
  4472                           indf0	equ	0xFEF
  4473                           postinc0	equ	0xFEE
  4474                           postdec0	equ	0xFED
  4475                           preinc0	equ	0xFEC
  4476                           plusw0	equ	0xFEB
  4477                           fsr0h	equ	0xFEA
  4478                           fsr0l	equ	0xFE9
  4479                           wreg	equ	0xFE8
  4480                           indf1	equ	0xFE7
  4481                           postinc1	equ	0xFE6
  4482                           postdec1	equ	0xFE5
  4483                           preinc1	equ	0xFE4
  4484                           plusw1	equ	0xFE3
  4485                           fsr1h	equ	0xFE2
  4486                           fsr1l	equ	0xFE1
  4487                           bsr	equ	0xFE0
  4488                           indf2	equ	0xFDF
  4489                           postinc2	equ	0xFDE
  4490                           postdec2	equ	0xFDD
  4491                           preinc2	equ	0xFDC
  4492                           plusw2	equ	0xFDB
  4493                           fsr2h	equ	0xFDA
  4494                           fsr2l	equ	0xFD9
  4495                           status	equ	0xFD8

Data Sizes:
    Strings     43
    Constant    16
    Data        0
    BSS         17
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     29      46
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    Lcd_CGRAM_CreateChar@chardata	PTR const unsigned char  size(1) Largest target is 8
		 -> figura_1(CODE[8]), figura_2(CODE[8]), 

    Lcd_Write_String@a	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_1(CODE[10]), STR_2(CODE[7]), STR_3(CODE[8]), STR_4(CODE[6]), 
		 -> STR_5(CODE[7]), STR_6(CODE[5]), 


Critical Paths under _main in COMRAM

    _main->_Lcd_CGRAM_CreateChar
    _guardar->_EEPROM_Write
    _detectar->_Lcd_Set_Cursor
    _detectar->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Modificar->_Lcd_Write_Char
    _Lcd_NoBlink->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_CGRAM_Init->_Lcd_Cmd
    _Lcd_CGRAM_CreateChar->_Lcd_Write_Char
    _Lcd_CGRAM_Close->_Lcd_Cmd
    _Actualizar_Matriz->_Lcd_Set_Cursor
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _LowISR in COMRAM

    _LowISR->i1_Lcd_Set_Cursor
    i1_Lcd_Set_Cursor->i1_Lcd_Cmd
    _Lcd_Blink->i1_Lcd_Cmd
    i1_Lcd_Cmd->i1_Lcd_Port

Critical Paths under _Stop in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _Stop in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _Stop in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _Stop in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _Stop in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _Stop in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _Stop in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _Stop in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _Stop in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4870
                                             27 COMRAM     2     2      0
                  _Actualizar_Matriz
                    _Lcd_CGRAM_Close
               _Lcd_CGRAM_CreateChar
                     _Lcd_CGRAM_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _Modificar
                              _dejar
                           _detectar
                            _guardar
                           _init_int
                         _init_ports
                             _reposo
 ---------------------------------------------------------------------------------
 (1) _reposo                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_int                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _guardar                                              4     4      0     395
                                             14 COMRAM     4     4      0
                       _EEPROM_Write
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Write                                         2     1      1      56
                                             12 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (1) _detectar                                             0     0      0     869
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     4     3      1     216
                                             16 COMRAM     4     3      1
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _dejar                                                7     7      0     255
                                             12 COMRAM     7     7      0
 ---------------------------------------------------------------------------------
 (1) _Modificar                                            0     0      0     195
                        _Lcd_NoBlink
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_NoBlink                                          0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     210
                                             15 COMRAM     1     1      0
                          _Lcd_Clear
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_CGRAM_Init                                       0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_CGRAM_CreateChar                                11    10      1     871
                                             16 COMRAM    11    10      1
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (1) _Lcd_CGRAM_Close                                      0     0      0      75
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Actualizar_Matriz                                    4     4      0     981
                                             20 COMRAM     4     4      0
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     120
                                             13 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1     653
                                             15 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0      75
                                             13 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0      60
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _LowISR                                               4     4      0     860
                                              8 COMRAM     4     4      0
                          _Lcd_Blink
                   i1_Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (6) i1_Lcd_Set_Cursor                                     5     4      1     714
                                              3 COMRAM     5     4      1
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (6) _Lcd_Blink                                            0     0      0     145
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (7) i1_Lcd_Cmd                                            2     2      0     145
                                              1 COMRAM     2     2      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (8) i1_Lcd_Port                                           1     1      0     116
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Stop                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Actualizar_Matriz
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _Lcd_CGRAM_Close
     _Lcd_Cmd
   _Lcd_CGRAM_CreateChar
     _Lcd_Write_Char
   _Lcd_CGRAM_Init
     _Lcd_Cmd
   _Lcd_Clear
     _Lcd_Cmd
   _Lcd_Init
     _Lcd_Clear
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
   _Lcd_Write_String
     _Lcd_Write_Char
   _Modificar
     _Lcd_NoBlink
       _Lcd_Cmd
     _Lcd_Write_Char
   _dejar
   _detectar
     _Lcd_Set_Cursor
     _Lcd_Write_String
   _guardar
     _EEPROM_Write
   _init_int
   _init_ports
   _reposo

 _LowISR (ROOT)
   _Lcd_Blink
     i1_Lcd_Cmd
       i1_Lcd_Port
   i1_Lcd_Set_Cursor
     i1_Lcd_Cmd

 _Stop (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            2047      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160      0       0      0.0%
BITBIGSFRh         126      0       0      0.0%
BITCOMRAM           94      0       0      0.0%
COMRAM              94     29      46     48.9%
BITBIGSFRl          32      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      46      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Thu Oct 02 17:25:54 2025

                           _c 002A                             _f 002B                            l99 13D0  
                          u10 1188                            u11 1184                            u20 119E  
                          u21 119A                            u30 11B4                            u31 11B0  
                          u40 11CA                            u41 11C6                            bsr 0FE0  
                         l102 13FE                           l110 12F8                           l112 1306  
                         l121 1070                           l113 1308                           l105 12E8  
                         l106 12D8                           l203 094A                           l212 09CC  
                         l116 100E                           l108 12E6                           l221 0A4A  
                         l205 096A                           l118 1038                           l150 10F4  
                         l215 09F8                           l136 0E3E                           l208 098A  
                         l305 141E                           l209 09A6                           l145 109C  
                         l250 118E                           l218 0A1E                           l147 10C8  
                         l340 1448                           l228 0CCE                           l309 0A52  
                         l262 11D0                           l254 11A4                           l334 0C32  
                         l182 126A                           l271 142C                           l192 0944  
                         l265 11D2                           l281 0F10                           l337 143A  
                         l185 127C                           l177 1254                           l258 11BA  
                         l178 1246                           l355 1360                           l268 1392  
                         l284 1176                           l277 0F10                           l293 12C6  
                         l357 136E                           l358 1372                           l287 1340  
                         u150 12D6                           u151 12D2                           u400 0894  
                         u160 12E6                           u401 0890                           u161 12E2  
                         u410 08A8                           u170 12F6                           u411 08A4  
                         u171 12F2                           u340 123E                           u500 09B4  
                         u420 08C2                           u180 1306                           u341 123A  
                         u501 09B0                           u421 08BE                           u181 1302  
                         u350 1254                           u510 09DA                           u430 08EC  
                         u351 1250                           u511 09D6                           u431 08E8  
                         u360 1262                           u520 0A06                           u440 0900  
                         u361 125E                           u521 0A02                           u441 08FC  
                         u370 1278                           u530 0A2C                           u450 091A  
                         u371 1274                           u531 0A28                           u451 0916  
                         u460 0944                           u380 0850                           u461 0940  
                         u381 084C                           u470 0958                           u390 086A  
                         u471 0954                           u391 0866                           u480 0978  
                         u481 0974                           u490 098A                           u491 0986  
                         u900 0E52                           u901 0E4E                           u910 0E86  
                         u911 0E82                           u920 0EBA                           u921 0EB6  
                         u930 0EEE                           u931 0EEA                           u940 12C6  
                         u941 12C2                           u950 136E                           u951 136A  
                         u960 0FF2                           u961 0FEE                           u970 1000  
                         u971 0FFC                           u980 101C                           u981 1018  
                         u990 102A                           u991 1026             _Actualizar_Matriz 0D52  
                         wreg 0FE8           __end_of_Lcd_NoBlink 1420            ?_Actualizar_Matriz 0001  
       Lcd_CGRAM_CreateChar@i 0014                          l1200 13CC                          l1050 11A6  
                        l1042 117A                          l2010 0A6A                          l2002 0A4E  
                        l1210 13FC                          l1202 13CE                          l1052 11B4  
                        l1044 1188                          l1060 1318                          l2020 0A84  
                        l2012 0A6C                          l2100 0BEC                          l1054 11BC  
                        l1046 1190                          l1070 132E                          l1062 131A  
                        l2022 0A9E                          l2014 0A80                          l1206 13EC  
                        l1214 12C8                          l1056 11CA                          l1048 119E  
                        l1080 1378                          l1072 1334                          l1064 1322  
                        l2032 0AB8                          l2024 0AA0                          l2008 0A54  
                        l1400 08DA                          l1208 13F4                          l1216 12D6  
                        l2200 0CB6                          l1082 137E                          l1074 1336  
                        l1066 1324                          l1058 130C                          l2050 0B1C  
                        l2034 0AD2                          l2026 0AB4                          l1402 08DC  
                        l1218 12F6                          l2210 0CEE                          l2202 0CB8  
                        l1084 1380                          l1076 133E                          l1068 132C  
                        l2060 0B3C                          l2044 0AEC                          l2036 0AD4  
                        l1164 1412                          l1420 0934                          l1412 0902  
                        l1404 08F0                          l1180 13B8                          l2220 0D22  
                        l2212 0CFC                          l2204 0CC2                          l1086 1390  
                        l1078 1376                          l2070 0B6E                          l2062 0B50  
                        l2046 0B06                          l2038 0AE8                          l1166 1420  
                        l1430 09A4                          l1422 0958                          l1414 091A  
                        l1406 0900                          l1190 13C2                          l1182 13BA  
                        l2222 0D32                          l2214 0D06                          l2206 0CDC  
                        l2080 0B88                          l2072 0B70                          l2056 0B20  
                        l2048 0B08                          l1360 1262                          l1440 09F4  
                        l1432 09B4                          l1424 095A                          l1416 0926  
                        l1192 13C4                          l1184 13BC                          l2224 0D42  
                        l2216 0D0E                          l2208 0CEA                          l2082 0BA2  
                        l2074 0B84                          l2058 0B3A                          l1362 1268  
                        l1354 1230                          l1450 0A44                          l1442 09F6  
                        l1434 09CA                          l1426 0978                          l1418 0932  
                        l1370 0850                          l1194 13C6                          l1186 13BE  
                        l1178 13B4                          l2226 0D46                          l2218 0D12  
                        l2092 0BBC                          l2084 0BA4                          l2068 0B54  
                        l1460 1102                          l1364 1278                          l1356 123E  
                        l1452 0A46                          l1444 0A06                          l1436 09DA  
                        l1428 098C                          l1380 0876                          l1196 13C8  
                        l1188 13C0                          l2180 0C4E                          l2094 0BD6  
                        l2086 0BB8                          l1470 1134                          l1462 1108  
                        l1358 1244                          l1454 0A48                          l1446 0A1C  
                        l1438 09F0                          l1382 0882                          l1366 083E  
                        l1198 13CA                          l2190 0C84                          l2182 0C60  
                        l1800 0E52                          l2096 0BD8                          l1480 115A  
                        l1472 1142                          l1464 1118                          l1448 0A2C  
                        l1384 0884                          l1376 0852                          l1368 0840  
                        l2192 0C8E                          l2184 0C6A                          l2176 0C34  
                        l1810 0E98                          l1802 0E64                          l1490 142E  
                        l1482 1160                          l1474 1148                          l1466 111E  
                        l1458 10F6                          l1394 08AA                          l1378 086A  
                        l1386 0898                          l2194 0C96                          l2186 0C72  
                        l2178 0C44                          l1820 0ED2                          l1812 0E9E  
                        l1804 0E6A                          l1484 1166                          l1476 114E  
                        l1468 112E                          l1396 08C2                          l1388 08A8  
                        l2196 0CAE                          l2188 0C7C                          l1822 0EDC  
                        l1814 0EA8                          l1806 0E74                          l1910 0D88  
                        l1486 116C                          l1478 1154                          l1398 08CE  
                        l1830 127E                          l2198 0CB2                          l1824 0EEE  
                        l1816 0EBA                          l1808 0E86                          l1912 0D8A  
                        l1904 0D60                          l1592 143C                          l1488 1172  
                        l1832 128A                          l1840 1348                          l1826 0F00  
                        l1818 0ECC                          l1930 0DD0                          l1914 0D8C  
                        l1906 0D78                          l1834 12A0                          l1850 1354  
                        l1842 134C                          l1828 0F06                          l1932 0DD2  
                        l1924 0DA8                          l1916 0D9C                          l1908 0D82  
                        l1836 12A4                          l1852 1358                          l1844 134E  
                        l1950 0E18                          l1934 0DD4                          l1926 0DC0  
                        l1918 0DA6                          l1870 0FF2                          l1854 135C  
                        l1846 1350                          l1838 1344                          l1960 0E3A  
                        l1952 0E1A                          l1944 0DF0                          l1936 0DE4  
                        l1928 0DCA                          l1880 1032                          l1872 1000  
                        l1856 135E                          l1848 1352                          l1954 0E1C  
                        l1946 0E08                          l1938 0DEE                          l1890 1068  
                        l1882 1046                          l1874 1008                          l1970 1080  
                        l1962 1072                          l1956 0E2C                          l1948 0E12  
                        l1884 1054                          l1876 101C                          l1868 0FE4  
                        l1980 109E                          l1972 108A                          l1798 0E42  
                        l1958 0E36                          l1894 0D52                          l1886 105C  
                        l1878 102A                          l1982 10AA                          l1974 108C  
                        l1896 0D5C                          l1888 105E                          l1992 10CA  
                        l1984 10B6                          l1968 1074                          l1898 0D5E  
                        l1994 10D6                          l1986 10B8                          l1996 10E2  
                        l1998 10E4                          STR_1 0811                          STR_2 082A  
                        STR_3 081B                          STR_4 0831                          STR_5 0823  
                        STR_6 0837               ?_Lcd_CGRAM_Init 0001                          u1000 1046  
                        u1001 1042                          u1010 1054                          u1011 1050  
                        u1020 0D78                          u1100 10F4                          u1021 0D74  
                        u1101 10F0                          u1030 0D9C                          u1110 0A7C  
                        u1031 0D98                          u1111 0A78                          u1040 0DC0  
                        u1120 0AB0                          u1041 0DBC                          u1121 0AAC  
                        u1050 0DE4                          u1130 0AE4                          u1051 0DE0  
                        u1131 0AE0                          u1060 0E08                          u1140 0B18  
                        u1061 0E04                          u1141 0B14                          u1070 0E2C  
                        u1150 0B4C                          u1071 0E28                          u1151 0B48  
                        u1160 0B80                          u1080 109C                          u1161 0B7C  
                        u1081 1098                          u1170 0BB4                          u1090 10C8  
                        u1330 0CDC                          u1171 0BB0                          u1091 10C4  
                        u1331 0CD8                          u1180 0BE8                          u1340 0CEA  
                        u1181 0BE4                          u1341 0CE6                          _LATA 0F89  
                        u1350 0CFC                          _LATB 0F8A                          u1351 0CF8  
                        u1407 0CA0                          _LATC 0F8B                          u1360 0D22  
                        _LATD 0F8C                          u1417 0960                          u1361 0D1E  
                        _LATE 0F8D                          u1370 0D32                          u1507 1326  
                        u1427 0996                          u1371 0D2E                          u1380 0D42  
                        u1517 1338                          u1437 09BE                          u1381 0D3E  
                        u1527 1386                          u1447 09E4                          u1457 0A10  
                        u1467 0A36                          u1477 110E                          u1487 1124  
                        u1497 113A                          _Stop 0008             ?_Lcd_Write_String 0011  
                        _main 0C34           ??_Actualizar_Matriz 0015                          fsr2h 0FDA  
                        indf2 0FDF                          fsr2l 0FD9                          btemp 002F  
                        prodl 0FF3                          start 00D8            ??_Lcd_Write_String 0012  
             EEPROM_Write@dir 000E               __end_of_Lcd_Cmd 1394                  ___param_bank 0000  
       Actualizar_Matriz@acum 0015          __end_of_EEPROM_Write 1374                         ?_Stop 0001  
                       ?_main 0001                         _EEADR 0FA9              ?_Lcd_CGRAM_Close 0001  
   __end_of_Actualizar_Matriz 0E40                         _T0CON 0FD5                         _NEGRA 002C  
                       i1l302 1456                         i1l250 11EA                         i1l262 122C  
                       i1l254 1200                         _METAL 002E                         i1l265 122E  
                       i1l281 0FE2                         i1l169 00C8                         i1l258 1216  
                       i1l268 13B2                         i1l277 0FE2                         i2l174 140E  
           ?i1_Lcd_Set_Cursor 0004                         _TMR0L 0FD6                         _PORTB 0F81  
                       _TRISA 0F92                         _TRISB 0F93                         _TRISC 0F94  
                       _TRISD 0F95                         _TRISE 0F96                         _Fila1 0026  
                       _Fila2 0022                         _Fila3 001E                   ?i1_Lcd_Port 0001  
          ??i1_Lcd_Set_Cursor 0005                         _dejar 083E               __end_of_guardar 10F6  
                       tablat 0FF5                         ttemp5 0030                         ttemp6 0033  
                       ttemp7 0037                         status 0FD8                         wtemp8 0030  
                 LowISR@dummy 000C              EEPROM_Write@data 000D              __end_of_Lcd_Init 1178  
            __end_of_Lcd_Port 11D4        Actualizar_Matriz@i_684 0017        Actualizar_Matriz@i_685 0018  
             __initialization 13D2                  __end_of_Stop 1412                  __end_of_main 0D52  
                      ??_Stop 0001                   _Lcd_NoBlink 1412                        ??_main 001C  
               __activetblptr 0002       Lcd_CGRAM_CreateChar@add 0013                        ?_dejar 0001  
                      _EEDATA 0FA8                        _BLANCA 002D                        _EECON2 0FA7  
                      i1l2000 144A                        i1l2110 0F46                        i1l2102 0F14  
                      i1l2120 0F8C                        i1l2112 0F58                        i1l2104 0F24  
                      i1l2130 0FD2                        i1l2122 0F9E                        i1l2114 0F6A  
                      i1l2106 0F36                        i1l2132 0FD8                        i1l2124 0FA4  
                      i1l2116 0F70                        i1l2108 0F3C                        i1l2126 0FAE  
                      i1l2118 0F7A                        i1l2150 0038                        i1l2128 0FC0  
                      i1l2160 007C                        i1l2152 004C                        i1l2170 00AC  
                      i1l2162 007E                        i1l2154 005C                        i1l2146 0026  
                      i1l2172 00BC                        i1l2164 008C                        i1l2156 005E  
                      i1l2148 002A                        i1l2174 00BE                        i1l2166 009C  
                      i1l2158 006C                        i1l2168 009E                        i1l1860 1398  
                      i1l1790 1202                        i1l1782 11D6                        i1l1862 139E  
                      i1l1792 1210                        i1l1784 11E4                        i1l1864 13A0  
                      i1l1794 1218                        i1l1786 11EC                        i1l1866 13B0  
                      i1l1858 1396                        i1l1796 1226                        i1l1788 11FA  
                      i2l1712 1402                        _INTCON 0FF2                     ??_Lcd_Cmd 000E  
            __end_of_detectar 1072                        _LowISR 0018             __end_ofi1_Lcd_Cmd 13B4  
            __end_of_figura_1 0811              __end_of_figura_2 0809  Lcd_CGRAM_CreateChar@chardata 0011  
                      dejar@i 0011              __end_of_init_int 1400                        clear_0 13D8  
                      _reposo 12C8                        isa$std 0001                     ??_guardar 000F  
                __mediumconst 0800                        tblptrh 0FF7                        tblptrl 0FF6  
                      tblptru 0FF8               Lcd_Set_Cursor@a 0011               Lcd_Set_Cursor@b 0010  
             Lcd_Set_Cursor@y 0013               Lcd_Set_Cursor@z 0012     Lcd_CGRAM_CreateChar@i_890 001B  
   Lcd_CGRAM_CreateChar@i_884 0015     Lcd_CGRAM_CreateChar@i_885 0016     Lcd_CGRAM_CreateChar@i_886 0017  
   Lcd_CGRAM_CreateChar@i_887 0018     Lcd_CGRAM_CreateChar@i_888 0019     Lcd_CGRAM_CreateChar@i_889 001A  
                  __accesstop 0060       __end_of__initialization 13DE             __end_of_Lcd_Clear 142E  
           __end_of_Lcd_Blink 1458                 ___rparam_used 0001                __pcstackCOMRAM 0001  
               __end_of_dejar 0A4C                _Lcd_Set_Cursor 0E40              ??_Lcd_CGRAM_Init 0010  
           __end_of_Modificar 127E                     ?_Lcd_Init 0001                       ??_dejar 000D  
                   ?_Lcd_Port 0001                  _EEPROM_Write 1342                       ?_LowISR 0001  
      __end_of_Lcd_Set_Cursor 0F12                       ?_reposo 0001                  ??i1_Lcd_Port 0001  
                     i1u86_20 11E4                       i1u86_21 11E0                       i1u87_20 11FA  
                     i1u87_21 11F6                       i1u88_20 1210                       i1u88_21 120C  
                     i1u89_20 1226                       i1u89_21 1222                    ??_Lcd_Init 0010  
                   ?_detectar 0001                    ??_Lcd_Port 000D                  guardar@i_692 0011  
                guardar@i_693 0012                  guardar@media 000F                _Lcd_Write_Char 130A  
                     _Lcd_Cmd 1374                     ?_init_int 0001                       __Hparam 0000  
                  dejar@SALTO 0010                       __Lparam 0000                    dejar@i_726 0012  
                  dejar@i_727 0013            __end_ofi1_Lcd_Port 1230                  __psmallconst 0800  
                     __pcinit 13D2                    _init_ports 13B4                       __ramtop 0800  
             ?_Lcd_Set_Cursor 0010                  ?_Lcd_NoBlink 0001                       __ptext0 0C34  
                     __ptext1 12C8                       __ptext2 13B4                       __ptext3 13EC  
                     __ptext4 1072                       __ptext5 1342                       __ptext6 0FE4  
                     __ptext7 127E                       __ptext8 083E                       __ptext9 1230  
                   _T0CONbits 0FD5                       _guardar 1072                    ??_detectar 0015  
      __end_of_Lcd_Write_Char 1342                __pintcode_body 1400          end_of_initialization 13DE  
               __Lmediumconst 0000                    ??_init_int 000D                       int_func 1400  
                     postinc0 0FEE                     Lcd_Port@a 000D                     i1_Lcd_Cmd 1394  
                   _PORTAbits 0F80                     _PORTBbits 0F81                     _PORTCbits 0F82  
                   _TRISCbits 0F94                     _TRISDbits 0F95               ?_Lcd_Write_Char 0001  
           Lcd_Write_String@a 0011             Lcd_Write_String@i 0013                __end_of_LowISR 00D8  
                   _Lcd_Clear 1420                     _Lcd_Blink 144A                    ?i1_Lcd_Cmd 0001  
            _Lcd_Write_String 127E                   ?_init_ports 0001  __end_of_Lcd_CGRAM_CreateChar 0C34  
              __end_of_reposo 130A           start_initialization 13D2                     _Modificar 1230  
            i1_Lcd_Set_Cursor 0F12             ??_Lcd_CGRAM_Close 0010                      ??_LowISR 0009  
                  ?_Lcd_Clear 0001                    ?_Lcd_Blink 0001               Lcd_Write_Char@a 0010  
             Lcd_Write_Char@y 000F                      ??_reposo 000D                   __pbssCOMRAM 001E  
                  ?_Modificar 0001                      ?_Lcd_Cmd 0001              ??_Lcd_Set_Cursor 0011  
                   __pintcode 0008                   ??i1_Lcd_Cmd 0002          i1Lcd_Set_Cursor@temp 0008  
                 __pintcodelo 0018                   __smallconst 0800                      ?_guardar 0001  
                   dejar@acum 000F                      _LATCbits 0F8B                      _LATDbits 0F8C  
                    _LATEbits 0F8D          _Lcd_CGRAM_CreateChar 0A4C                      i1u120_20 0F58  
                    i1u120_21 0F54                      i1u121_20 0F8C                      i1u121_21 0F88  
                    i1u122_20 0FC0                      i1u130_20 009C                      i1u122_21 0FBC  
                    i1u130_21 0098                      i1u131_20 00AC                      i1u131_21 00A8  
                    i1u132_20 00BC                      i1u124_20 0038                      i1u132_21 00B8  
                    i1u124_21 0034                      i1u125_20 004C                      i1u125_21 0048  
                    i1u126_20 005C                      i1u126_21 0058                      i1u119_20 0F24  
                    i1u127_20 006C                      i1u119_21 0F20                      i1u127_21 0068  
                    i1u128_20 007C                      i1u128_21 0078                      i1u129_20 008C  
                    i1u129_21 0088                      i1u153_27 13A6                      Lcd_Cmd@a 000F  
                    _PIR2bits 0FA1                   ??_Lcd_Clear 0010                      _RCONbits 0FD0  
                 ??_Lcd_Blink 0004                    _ADCON1bits 0FC1            Actualizar_Matriz@i 0016  
            ??_Lcd_Write_Char 000E                      _Lcd_Init 10F6                      _Lcd_Port 1178  
                 _INTCON2bits 0FF1                   ??_Modificar 0011      __end_of_Lcd_Write_String 12C8  
       ?_Lcd_CGRAM_CreateChar 0011                    _EECON1bits 0FA6                      __Hrparam 0000  
                    __Lrparam 0000                  ??_init_ports 000D      __end_ofi1_Lcd_Set_Cursor 0FE4  
           i1Lcd_Set_Cursor@a 0005             i1Lcd_Set_Cursor@b 0004             i1Lcd_Set_Cursor@y 0007  
           i1Lcd_Set_Cursor@z 0006               _Lcd_CGRAM_Close 143C                      _detectar 0FE4  
                    __ptext10 1412                      __ptext11 10F6                      __ptext20 1178  
                    __ptext12 1420                      __ptext13 142E                      __ptext22 0F12  
                    __ptext14 0A4C                      __ptext23 144A                      __ptext15 143C  
                    __ptext24 1394                      __ptext16 0D52                      __ptext25 11D4  
                    __ptext17 130A                      __ptext18 0E40                      __ptext19 1374  
                    _figura_1 0809                      _figura_2 0801                 ?_EEPROM_Write 000D  
                    _init_int 13EC            __end_of_init_ports 13D2                   i1Lcd_Port@a 0001  
                    isa$xinst 0000                      int$flags 002F                    _INTCONbits 0FF2  
                    guardar@i 0010                ??_EEPROM_Write 000E            Lcd_Write_Char@temp 000E  
                    intlevel1 0000                      intlevel2 0000        ??_Lcd_CGRAM_CreateChar 0012  
              _Lcd_CGRAM_Init 142E                    i1Lcd_Cmd@a 0003            Lcd_Set_Cursor@temp 0014  
               ??_Lcd_NoBlink 0010       __end_of_Lcd_CGRAM_Close 144A                    i1_Lcd_Port 11D4  
      __end_of_Lcd_CGRAM_Init 143C  
