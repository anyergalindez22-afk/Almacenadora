

Microchip MPLAB XC8 Assembler V3.00 build 20241204225717 
                                                                                               Fri Oct 03 16:31:15 2025

Microchip MPLAB XC8 C Compiler v3.00 (Free license) build 20241204225717 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,space=0,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,space=0,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,space=0,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,space=0,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,space=0,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,space=0,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,space=0,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,space=0,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,space=0,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,space=0,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,space=0,delta=1,group=3
    20                           	psect	text9,global,reloc=2,class=CODE,space=0,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,space=0,delta=1,group=1
    22                           	psect	text11,global,reloc=2,class=CODE,space=0,delta=1,group=3
    23                           	psect	text12,global,reloc=2,class=CODE,space=0,delta=1,group=3
    24                           	psect	text13,global,reloc=2,class=CODE,space=0,delta=1,group=3
    25                           	psect	text14,global,reloc=2,class=CODE,space=0,delta=1,group=2
    26                           	psect	text15,global,reloc=2,class=CODE,space=0,delta=1,group=2
    27                           	psect	text16,global,reloc=2,class=CODE,space=0,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,space=0,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,space=0,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,space=0,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,space=0,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,space=0,delta=1
    33                           	psect	text22,global,reloc=2,class=CODE,space=0,delta=1
    34                           	psect	text23,global,reloc=2,class=CODE,space=0,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,space=0,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,space=0,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,space=0,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,space=0,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,space=0,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,space=0,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,space=0,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,space=0,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,space=0,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,space=0,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,space=0,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,space=0,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,space=0,delta=1
    48                           	psect	intcodelo,global,reloc=2,class=CODE,space=0,delta=1
    49                           	psect	text38,global,reloc=2,class=CODE,space=0,delta=1
    50                           	psect	text39,global,reloc=2,class=CODE,space=0,delta=1
    51                           	psect	text40,global,reloc=2,class=CODE,space=0,delta=1
    52                           	psect	text41,global,reloc=2,class=CODE,space=0,delta=1
    53                           	psect	intcode,global,reloc=2,class=CODE,space=0,delta=1
    54                           	psect	intcode_body,global,reloc=2,class=CODE,space=0,delta=1
    55                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    56                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    57                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    58                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    59   000000                     
    60                           ; Generated 17/01/2025 GMT
    61                           ; 
    62                           ; Copyright Â© 2025, Microchip Technology Inc. and its subsidiaries ("Microchip")
    63                           ; All rights reserved.
    64                           ; 
    65                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    66                           ; 
    67                           ; Redistribution and use in source and binary forms, with or without modification, are
    68                           ; permitted provided that the following conditions are met:
    69                           ; 
    70                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    71                           ;        conditions and the following disclaimer.
    72                           ; 
    73                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    74                           ;        of conditions and the following disclaimer in the documentation and/or other
    75                           ;        materials provided with the distribution. Publication is not required when
    76                           ;        this file is used in an embedded application.
    77                           ; 
    78                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    79                           ;        software without specific prior written permission.
    80                           ; 
    81                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    82                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    83                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    84                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    85                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    86                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    87                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    88                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    89                           ; 
    90                           ; 
    91                           ; Code-generator required, PIC18F4550 Definitions
    92                           ; 
    93                           ; SFR Addresses
    94   000FE0                     bsr             equ	4064
    95   000FE9                     fsr0            equ	4073
    96   000FEA                     fsr0h           equ	4074
    97   000FE9                     fsr0l           equ	4073
    98   000FE1                     fsr1            equ	4065
    99   000FE2                     fsr1h           equ	4066
   100   000FE1                     fsr1l           equ	4065
   101   000FD9                     fsr2            equ	4057
   102   000FDA                     fsr2h           equ	4058
   103   000FD9                     fsr2l           equ	4057
   104   000FEF                     indf0           equ	4079
   105   000FE7                     indf1           equ	4071
   106   000FDF                     indf2           equ	4063
   107   000FF2                     intcon          equ	4082
   108   000000                     nvmcon          equ	0
   109   000FF9                     pcl             equ	4089
   110   000FFA                     pclath          equ	4090
   111   000FFB                     pclatu          equ	4091
   112   000FEB                     plusw0          equ	4075
   113   000FE3                     plusw1          equ	4067
   114   000FDB                     plusw2          equ	4059
   115   000FED                     postdec0        equ	4077
   116   000FE5                     postdec1        equ	4069
   117   000FDD                     postdec2        equ	4061
   118   000FEE                     postinc0        equ	4078
   119   000FE6                     postinc1        equ	4070
   120   000FDE                     postinc2        equ	4062
   121   000FEC                     preinc0         equ	4076
   122   000FE4                     preinc1         equ	4068
   123   000FDC                     preinc2         equ	4060
   124   000FF3                     prod            equ	4083
   125   000FF4                     prodh           equ	4084
   126   000FF3                     prodl           equ	4083
   127   000FD8                     status          equ	4056
   128   000FF5                     tablat          equ	4085
   129   000FF6                     tblptr          equ	4086
   130   000FF7                     tblptrh         equ	4087
   131   000FF6                     tblptrl         equ	4086
   132   000FF8                     tblptru         equ	4088
   133   000FFD                     tosl            equ	4093
   134   000FE8                     wreg            equ	4072
   135   000F62                     SPPDATA         equ	3938	;# 
   136   000F63                     SPPCFG          equ	3939	;# 
   137   000F64                     SPPEPS          equ	3940	;# 
   138   000F65                     SPPCON          equ	3941	;# 
   139   000F66                     UFRM            equ	3942	;# 
   140   000F66                     UFRML           equ	3942	;# 
   141   000F67                     UFRMH           equ	3943	;# 
   142   000F68                     UIR             equ	3944	;# 
   143   000F69                     UIE             equ	3945	;# 
   144   000F6A                     UEIR            equ	3946	;# 
   145   000F6B                     UEIE            equ	3947	;# 
   146   000F6C                     USTAT           equ	3948	;# 
   147   000F6D                     UCON            equ	3949	;# 
   148   000F6E                     UADDR           equ	3950	;# 
   149   000F6F                     UCFG            equ	3951	;# 
   150   000F70                     UEP0            equ	3952	;# 
   151   000F71                     UEP1            equ	3953	;# 
   152   000F72                     UEP2            equ	3954	;# 
   153   000F73                     UEP3            equ	3955	;# 
   154   000F74                     UEP4            equ	3956	;# 
   155   000F75                     UEP5            equ	3957	;# 
   156   000F76                     UEP6            equ	3958	;# 
   157   000F77                     UEP7            equ	3959	;# 
   158   000F78                     UEP8            equ	3960	;# 
   159   000F79                     UEP9            equ	3961	;# 
   160   000F7A                     UEP10           equ	3962	;# 
   161   000F7B                     UEP11           equ	3963	;# 
   162   000F7C                     UEP12           equ	3964	;# 
   163   000F7D                     UEP13           equ	3965	;# 
   164   000F7E                     UEP14           equ	3966	;# 
   165   000F7F                     UEP15           equ	3967	;# 
   166   000F80                     PORTA           equ	3968	;# 
   167   000F81                     PORTB           equ	3969	;# 
   168   000F82                     PORTC           equ	3970	;# 
   169   000F83                     PORTD           equ	3971	;# 
   170   000F84                     PORTE           equ	3972	;# 
   171   000F89                     LATA            equ	3977	;# 
   172   000F8A                     LATB            equ	3978	;# 
   173   000F8B                     LATC            equ	3979	;# 
   174   000F8C                     LATD            equ	3980	;# 
   175   000F8D                     LATE            equ	3981	;# 
   176   000F92                     TRISA           equ	3986	;# 
   177   000F92                     DDRA            equ	3986	;# 
   178   000F93                     TRISB           equ	3987	;# 
   179   000F93                     DDRB            equ	3987	;# 
   180   000F94                     TRISC           equ	3988	;# 
   181   000F94                     DDRC            equ	3988	;# 
   182   000F95                     TRISD           equ	3989	;# 
   183   000F95                     DDRD            equ	3989	;# 
   184   000F96                     TRISE           equ	3990	;# 
   185   000F96                     DDRE            equ	3990	;# 
   186   000F9B                     OSCTUNE         equ	3995	;# 
   187   000F9D                     PIE1            equ	3997	;# 
   188   000F9E                     PIR1            equ	3998	;# 
   189   000F9F                     IPR1            equ	3999	;# 
   190   000FA0                     PIE2            equ	4000	;# 
   191   000FA1                     PIR2            equ	4001	;# 
   192   000FA2                     IPR2            equ	4002	;# 
   193   000FA6                     EECON1          equ	4006	;# 
   194   000FA7                     EECON2          equ	4007	;# 
   195   000FA8                     EEDATA          equ	4008	;# 
   196   000FA9                     EEADR           equ	4009	;# 
   197   000FAB                     RCSTA           equ	4011	;# 
   198   000FAB                     RCSTA1          equ	4011	;# 
   199   000FAC                     TXSTA           equ	4012	;# 
   200   000FAC                     TXSTA1          equ	4012	;# 
   201   000FAD                     TXREG           equ	4013	;# 
   202   000FAD                     TXREG1          equ	4013	;# 
   203   000FAE                     RCREG           equ	4014	;# 
   204   000FAE                     RCREG1          equ	4014	;# 
   205   000FAF                     SPBRG           equ	4015	;# 
   206   000FAF                     SPBRG1          equ	4015	;# 
   207   000FB0                     SPBRGH          equ	4016	;# 
   208   000FB1                     T3CON           equ	4017	;# 
   209   000FB2                     TMR3            equ	4018	;# 
   210   000FB2                     TMR3L           equ	4018	;# 
   211   000FB3                     TMR3H           equ	4019	;# 
   212   000FB4                     CMCON           equ	4020	;# 
   213   000FB5                     CVRCON          equ	4021	;# 
   214   000FB6                     ECCP1AS         equ	4022	;# 
   215   000FB6                     CCP1AS          equ	4022	;# 
   216   000FB7                     ECCP1DEL        equ	4023	;# 
   217   000FB7                     CCP1DEL         equ	4023	;# 
   218   000FB8                     BAUDCON         equ	4024	;# 
   219   000FB8                     BAUDCTL         equ	4024	;# 
   220   000FBA                     CCP2CON         equ	4026	;# 
   221   000FBB                     CCPR2           equ	4027	;# 
   222   000FBB                     CCPR2L          equ	4027	;# 
   223   000FBC                     CCPR2H          equ	4028	;# 
   224   000FBD                     CCP1CON         equ	4029	;# 
   225   000FBD                     ECCP1CON        equ	4029	;# 
   226   000FBE                     CCPR1           equ	4030	;# 
   227   000FBE                     CCPR1L          equ	4030	;# 
   228   000FBF                     CCPR1H          equ	4031	;# 
   229   000FC0                     ADCON2          equ	4032	;# 
   230   000FC1                     ADCON1          equ	4033	;# 
   231   000FC2                     ADCON0          equ	4034	;# 
   232   000FC3                     ADRES           equ	4035	;# 
   233   000FC3                     ADRESL          equ	4035	;# 
   234   000FC4                     ADRESH          equ	4036	;# 
   235   000FC5                     SSPCON2         equ	4037	;# 
   236   000FC6                     SSPCON1         equ	4038	;# 
   237   000FC7                     SSPSTAT         equ	4039	;# 
   238   000FC8                     SSPADD          equ	4040	;# 
   239   000FC9                     SSPBUF          equ	4041	;# 
   240   000FCA                     T2CON           equ	4042	;# 
   241   000FCB                     PR2             equ	4043	;# 
   242   000FCB                     MEMCON          equ	4043	;# 
   243   000FCC                     TMR2            equ	4044	;# 
   244   000FCD                     T1CON           equ	4045	;# 
   245   000FCE                     TMR1            equ	4046	;# 
   246   000FCE                     TMR1L           equ	4046	;# 
   247   000FCF                     TMR1H           equ	4047	;# 
   248   000FD0                     RCON            equ	4048	;# 
   249   000FD1                     WDTCON          equ	4049	;# 
   250   000FD2                     HLVDCON         equ	4050	;# 
   251   000FD2                     LVDCON          equ	4050	;# 
   252   000FD3                     OSCCON          equ	4051	;# 
   253   000FD5                     T0CON           equ	4053	;# 
   254   000FD6                     TMR0            equ	4054	;# 
   255   000FD6                     TMR0L           equ	4054	;# 
   256   000FD7                     TMR0H           equ	4055	;# 
   257   000FD8                     STATUS          equ	4056	;# 
   258   000FD9                     FSR2            equ	4057	;# 
   259   000FD9                     FSR2L           equ	4057	;# 
   260   000FDA                     FSR2H           equ	4058	;# 
   261   000FDB                     PLUSW2          equ	4059	;# 
   262   000FDC                     PREINC2         equ	4060	;# 
   263   000FDD                     POSTDEC2        equ	4061	;# 
   264   000FDE                     POSTINC2        equ	4062	;# 
   265   000FDF                     INDF2           equ	4063	;# 
   266   000FE0                     BSR             equ	4064	;# 
   267   000FE1                     FSR1            equ	4065	;# 
   268   000FE1                     FSR1L           equ	4065	;# 
   269   000FE2                     FSR1H           equ	4066	;# 
   270   000FE3                     PLUSW1          equ	4067	;# 
   271   000FE4                     PREINC1         equ	4068	;# 
   272   000FE5                     POSTDEC1        equ	4069	;# 
   273   000FE6                     POSTINC1        equ	4070	;# 
   274   000FE7                     INDF1           equ	4071	;# 
   275   000FE8                     WREG            equ	4072	;# 
   276   000FE9                     FSR0            equ	4073	;# 
   277   000FE9                     FSR0L           equ	4073	;# 
   278   000FEA                     FSR0H           equ	4074	;# 
   279   000FEB                     PLUSW0          equ	4075	;# 
   280   000FEC                     PREINC0         equ	4076	;# 
   281   000FED                     POSTDEC0        equ	4077	;# 
   282   000FEE                     POSTINC0        equ	4078	;# 
   283   000FEF                     INDF0           equ	4079	;# 
   284   000FF0                     INTCON3         equ	4080	;# 
   285   000FF1                     INTCON2         equ	4081	;# 
   286   000FF2                     INTCON          equ	4082	;# 
   287   000FF3                     PROD            equ	4083	;# 
   288   000FF3                     PRODL           equ	4083	;# 
   289   000FF4                     PRODH           equ	4084	;# 
   290   000FF5                     TABLAT          equ	4085	;# 
   291   000FF6                     TBLPTR          equ	4086	;# 
   292   000FF6                     TBLPTRL         equ	4086	;# 
   293   000FF7                     TBLPTRH         equ	4087	;# 
   294   000FF8                     TBLPTRU         equ	4088	;# 
   295   000FF9                     PCLAT           equ	4089	;# 
   296   000FF9                     PC              equ	4089	;# 
   297   000FF9                     PCL             equ	4089	;# 
   298   000FFA                     PCLATH          equ	4090	;# 
   299   000FFB                     PCLATU          equ	4091	;# 
   300   000FFC                     STKPTR          equ	4092	;# 
   301   000FFD                     TOS             equ	4093	;# 
   302   000FFD                     TOSL            equ	4093	;# 
   303   000FFE                     TOSH            equ	4094	;# 
   304   000FFF                     TOSU            equ	4095	;# 
   305   000F62                     SPPDATA         equ	3938	;# 
   306   000F63                     SPPCFG          equ	3939	;# 
   307   000F64                     SPPEPS          equ	3940	;# 
   308   000F65                     SPPCON          equ	3941	;# 
   309   000F66                     UFRM            equ	3942	;# 
   310   000F66                     UFRML           equ	3942	;# 
   311   000F67                     UFRMH           equ	3943	;# 
   312   000F68                     UIR             equ	3944	;# 
   313   000F69                     UIE             equ	3945	;# 
   314   000F6A                     UEIR            equ	3946	;# 
   315   000F6B                     UEIE            equ	3947	;# 
   316   000F6C                     USTAT           equ	3948	;# 
   317   000F6D                     UCON            equ	3949	;# 
   318   000F6E                     UADDR           equ	3950	;# 
   319   000F6F                     UCFG            equ	3951	;# 
   320   000F70                     UEP0            equ	3952	;# 
   321   000F71                     UEP1            equ	3953	;# 
   322   000F72                     UEP2            equ	3954	;# 
   323   000F73                     UEP3            equ	3955	;# 
   324   000F74                     UEP4            equ	3956	;# 
   325   000F75                     UEP5            equ	3957	;# 
   326   000F76                     UEP6            equ	3958	;# 
   327   000F77                     UEP7            equ	3959	;# 
   328   000F78                     UEP8            equ	3960	;# 
   329   000F79                     UEP9            equ	3961	;# 
   330   000F7A                     UEP10           equ	3962	;# 
   331   000F7B                     UEP11           equ	3963	;# 
   332   000F7C                     UEP12           equ	3964	;# 
   333   000F7D                     UEP13           equ	3965	;# 
   334   000F7E                     UEP14           equ	3966	;# 
   335   000F7F                     UEP15           equ	3967	;# 
   336   000F80                     PORTA           equ	3968	;# 
   337   000F81                     PORTB           equ	3969	;# 
   338   000F82                     PORTC           equ	3970	;# 
   339   000F83                     PORTD           equ	3971	;# 
   340   000F84                     PORTE           equ	3972	;# 
   341   000F89                     LATA            equ	3977	;# 
   342   000F8A                     LATB            equ	3978	;# 
   343   000F8B                     LATC            equ	3979	;# 
   344   000F8C                     LATD            equ	3980	;# 
   345   000F8D                     LATE            equ	3981	;# 
   346   000F92                     TRISA           equ	3986	;# 
   347   000F92                     DDRA            equ	3986	;# 
   348   000F93                     TRISB           equ	3987	;# 
   349   000F93                     DDRB            equ	3987	;# 
   350   000F94                     TRISC           equ	3988	;# 
   351   000F94                     DDRC            equ	3988	;# 
   352   000F95                     TRISD           equ	3989	;# 
   353   000F95                     DDRD            equ	3989	;# 
   354   000F96                     TRISE           equ	3990	;# 
   355   000F96                     DDRE            equ	3990	;# 
   356   000F9B                     OSCTUNE         equ	3995	;# 
   357   000F9D                     PIE1            equ	3997	;# 
   358   000F9E                     PIR1            equ	3998	;# 
   359   000F9F                     IPR1            equ	3999	;# 
   360   000FA0                     PIE2            equ	4000	;# 
   361   000FA1                     PIR2            equ	4001	;# 
   362   000FA2                     IPR2            equ	4002	;# 
   363   000FA6                     EECON1          equ	4006	;# 
   364   000FA7                     EECON2          equ	4007	;# 
   365   000FA8                     EEDATA          equ	4008	;# 
   366   000FA9                     EEADR           equ	4009	;# 
   367   000FAB                     RCSTA           equ	4011	;# 
   368   000FAB                     RCSTA1          equ	4011	;# 
   369   000FAC                     TXSTA           equ	4012	;# 
   370   000FAC                     TXSTA1          equ	4012	;# 
   371   000FAD                     TXREG           equ	4013	;# 
   372   000FAD                     TXREG1          equ	4013	;# 
   373   000FAE                     RCREG           equ	4014	;# 
   374   000FAE                     RCREG1          equ	4014	;# 
   375   000FAF                     SPBRG           equ	4015	;# 
   376   000FAF                     SPBRG1          equ	4015	;# 
   377   000FB0                     SPBRGH          equ	4016	;# 
   378   000FB1                     T3CON           equ	4017	;# 
   379   000FB2                     TMR3            equ	4018	;# 
   380   000FB2                     TMR3L           equ	4018	;# 
   381   000FB3                     TMR3H           equ	4019	;# 
   382   000FB4                     CMCON           equ	4020	;# 
   383   000FB5                     CVRCON          equ	4021	;# 
   384   000FB6                     ECCP1AS         equ	4022	;# 
   385   000FB6                     CCP1AS          equ	4022	;# 
   386   000FB7                     ECCP1DEL        equ	4023	;# 
   387   000FB7                     CCP1DEL         equ	4023	;# 
   388   000FB8                     BAUDCON         equ	4024	;# 
   389   000FB8                     BAUDCTL         equ	4024	;# 
   390   000FBA                     CCP2CON         equ	4026	;# 
   391   000FBB                     CCPR2           equ	4027	;# 
   392   000FBB                     CCPR2L          equ	4027	;# 
   393   000FBC                     CCPR2H          equ	4028	;# 
   394   000FBD                     CCP1CON         equ	4029	;# 
   395   000FBD                     ECCP1CON        equ	4029	;# 
   396   000FBE                     CCPR1           equ	4030	;# 
   397   000FBE                     CCPR1L          equ	4030	;# 
   398   000FBF                     CCPR1H          equ	4031	;# 
   399   000FC0                     ADCON2          equ	4032	;# 
   400   000FC1                     ADCON1          equ	4033	;# 
   401   000FC2                     ADCON0          equ	4034	;# 
   402   000FC3                     ADRES           equ	4035	;# 
   403   000FC3                     ADRESL          equ	4035	;# 
   404   000FC4                     ADRESH          equ	4036	;# 
   405   000FC5                     SSPCON2         equ	4037	;# 
   406   000FC6                     SSPCON1         equ	4038	;# 
   407   000FC7                     SSPSTAT         equ	4039	;# 
   408   000FC8                     SSPADD          equ	4040	;# 
   409   000FC9                     SSPBUF          equ	4041	;# 
   410   000FCA                     T2CON           equ	4042	;# 
   411   000FCB                     PR2             equ	4043	;# 
   412   000FCB                     MEMCON          equ	4043	;# 
   413   000FCC                     TMR2            equ	4044	;# 
   414   000FCD                     T1CON           equ	4045	;# 
   415   000FCE                     TMR1            equ	4046	;# 
   416   000FCE                     TMR1L           equ	4046	;# 
   417   000FCF                     TMR1H           equ	4047	;# 
   418   000FD0                     RCON            equ	4048	;# 
   419   000FD1                     WDTCON          equ	4049	;# 
   420   000FD2                     HLVDCON         equ	4050	;# 
   421   000FD2                     LVDCON          equ	4050	;# 
   422   000FD3                     OSCCON          equ	4051	;# 
   423   000FD5                     T0CON           equ	4053	;# 
   424   000FD6                     TMR0            equ	4054	;# 
   425   000FD6                     TMR0L           equ	4054	;# 
   426   000FD7                     TMR0H           equ	4055	;# 
   427   000FD8                     STATUS          equ	4056	;# 
   428   000FD9                     FSR2            equ	4057	;# 
   429   000FD9                     FSR2L           equ	4057	;# 
   430   000FDA                     FSR2H           equ	4058	;# 
   431   000FDB                     PLUSW2          equ	4059	;# 
   432   000FDC                     PREINC2         equ	4060	;# 
   433   000FDD                     POSTDEC2        equ	4061	;# 
   434   000FDE                     POSTINC2        equ	4062	;# 
   435   000FDF                     INDF2           equ	4063	;# 
   436   000FE0                     BSR             equ	4064	;# 
   437   000FE1                     FSR1            equ	4065	;# 
   438   000FE1                     FSR1L           equ	4065	;# 
   439   000FE2                     FSR1H           equ	4066	;# 
   440   000FE3                     PLUSW1          equ	4067	;# 
   441   000FE4                     PREINC1         equ	4068	;# 
   442   000FE5                     POSTDEC1        equ	4069	;# 
   443   000FE6                     POSTINC1        equ	4070	;# 
   444   000FE7                     INDF1           equ	4071	;# 
   445   000FE8                     WREG            equ	4072	;# 
   446   000FE9                     FSR0            equ	4073	;# 
   447   000FE9                     FSR0L           equ	4073	;# 
   448   000FEA                     FSR0H           equ	4074	;# 
   449   000FEB                     PLUSW0          equ	4075	;# 
   450   000FEC                     PREINC0         equ	4076	;# 
   451   000FED                     POSTDEC0        equ	4077	;# 
   452   000FEE                     POSTINC0        equ	4078	;# 
   453   000FEF                     INDF0           equ	4079	;# 
   454   000FF0                     INTCON3         equ	4080	;# 
   455   000FF1                     INTCON2         equ	4081	;# 
   456   000FF2                     INTCON          equ	4082	;# 
   457   000FF3                     PROD            equ	4083	;# 
   458   000FF3                     PRODL           equ	4083	;# 
   459   000FF4                     PRODH           equ	4084	;# 
   460   000FF5                     TABLAT          equ	4085	;# 
   461   000FF6                     TBLPTR          equ	4086	;# 
   462   000FF6                     TBLPTRL         equ	4086	;# 
   463   000FF7                     TBLPTRH         equ	4087	;# 
   464   000FF8                     TBLPTRU         equ	4088	;# 
   465   000FF9                     PCLAT           equ	4089	;# 
   466   000FF9                     PC              equ	4089	;# 
   467   000FF9                     PCL             equ	4089	;# 
   468   000FFA                     PCLATH          equ	4090	;# 
   469   000FFB                     PCLATU          equ	4091	;# 
   470   000FFC                     STKPTR          equ	4092	;# 
   471   000FFD                     TOS             equ	4093	;# 
   472   000FFD                     TOSL            equ	4093	;# 
   473   000FFE                     TOSH            equ	4094	;# 
   474   000FFF                     TOSU            equ	4095	;# 
   475   000F62                     SPPDATA         equ	3938	;# 
   476   000F63                     SPPCFG          equ	3939	;# 
   477   000F64                     SPPEPS          equ	3940	;# 
   478   000F65                     SPPCON          equ	3941	;# 
   479   000F66                     UFRM            equ	3942	;# 
   480   000F66                     UFRML           equ	3942	;# 
   481   000F67                     UFRMH           equ	3943	;# 
   482   000F68                     UIR             equ	3944	;# 
   483   000F69                     UIE             equ	3945	;# 
   484   000F6A                     UEIR            equ	3946	;# 
   485   000F6B                     UEIE            equ	3947	;# 
   486   000F6C                     USTAT           equ	3948	;# 
   487   000F6D                     UCON            equ	3949	;# 
   488   000F6E                     UADDR           equ	3950	;# 
   489   000F6F                     UCFG            equ	3951	;# 
   490   000F70                     UEP0            equ	3952	;# 
   491   000F71                     UEP1            equ	3953	;# 
   492   000F72                     UEP2            equ	3954	;# 
   493   000F73                     UEP3            equ	3955	;# 
   494   000F74                     UEP4            equ	3956	;# 
   495   000F75                     UEP5            equ	3957	;# 
   496   000F76                     UEP6            equ	3958	;# 
   497   000F77                     UEP7            equ	3959	;# 
   498   000F78                     UEP8            equ	3960	;# 
   499   000F79                     UEP9            equ	3961	;# 
   500   000F7A                     UEP10           equ	3962	;# 
   501   000F7B                     UEP11           equ	3963	;# 
   502   000F7C                     UEP12           equ	3964	;# 
   503   000F7D                     UEP13           equ	3965	;# 
   504   000F7E                     UEP14           equ	3966	;# 
   505   000F7F                     UEP15           equ	3967	;# 
   506   000F80                     PORTA           equ	3968	;# 
   507   000F81                     PORTB           equ	3969	;# 
   508   000F82                     PORTC           equ	3970	;# 
   509   000F83                     PORTD           equ	3971	;# 
   510   000F84                     PORTE           equ	3972	;# 
   511   000F89                     LATA            equ	3977	;# 
   512   000F8A                     LATB            equ	3978	;# 
   513   000F8B                     LATC            equ	3979	;# 
   514   000F8C                     LATD            equ	3980	;# 
   515   000F8D                     LATE            equ	3981	;# 
   516   000F92                     TRISA           equ	3986	;# 
   517   000F92                     DDRA            equ	3986	;# 
   518   000F93                     TRISB           equ	3987	;# 
   519   000F93                     DDRB            equ	3987	;# 
   520   000F94                     TRISC           equ	3988	;# 
   521   000F94                     DDRC            equ	3988	;# 
   522   000F95                     TRISD           equ	3989	;# 
   523   000F95                     DDRD            equ	3989	;# 
   524   000F96                     TRISE           equ	3990	;# 
   525   000F96                     DDRE            equ	3990	;# 
   526   000F9B                     OSCTUNE         equ	3995	;# 
   527   000F9D                     PIE1            equ	3997	;# 
   528   000F9E                     PIR1            equ	3998	;# 
   529   000F9F                     IPR1            equ	3999	;# 
   530   000FA0                     PIE2            equ	4000	;# 
   531   000FA1                     PIR2            equ	4001	;# 
   532   000FA2                     IPR2            equ	4002	;# 
   533   000FA6                     EECON1          equ	4006	;# 
   534   000FA7                     EECON2          equ	4007	;# 
   535   000FA8                     EEDATA          equ	4008	;# 
   536   000FA9                     EEADR           equ	4009	;# 
   537   000FAB                     RCSTA           equ	4011	;# 
   538   000FAB                     RCSTA1          equ	4011	;# 
   539   000FAC                     TXSTA           equ	4012	;# 
   540   000FAC                     TXSTA1          equ	4012	;# 
   541   000FAD                     TXREG           equ	4013	;# 
   542   000FAD                     TXREG1          equ	4013	;# 
   543   000FAE                     RCREG           equ	4014	;# 
   544   000FAE                     RCREG1          equ	4014	;# 
   545   000FAF                     SPBRG           equ	4015	;# 
   546   000FAF                     SPBRG1          equ	4015	;# 
   547   000FB0                     SPBRGH          equ	4016	;# 
   548   000FB1                     T3CON           equ	4017	;# 
   549   000FB2                     TMR3            equ	4018	;# 
   550   000FB2                     TMR3L           equ	4018	;# 
   551   000FB3                     TMR3H           equ	4019	;# 
   552   000FB4                     CMCON           equ	4020	;# 
   553   000FB5                     CVRCON          equ	4021	;# 
   554   000FB6                     ECCP1AS         equ	4022	;# 
   555   000FB6                     CCP1AS          equ	4022	;# 
   556   000FB7                     ECCP1DEL        equ	4023	;# 
   557   000FB7                     CCP1DEL         equ	4023	;# 
   558   000FB8                     BAUDCON         equ	4024	;# 
   559   000FB8                     BAUDCTL         equ	4024	;# 
   560   000FBA                     CCP2CON         equ	4026	;# 
   561   000FBB                     CCPR2           equ	4027	;# 
   562   000FBB                     CCPR2L          equ	4027	;# 
   563   000FBC                     CCPR2H          equ	4028	;# 
   564   000FBD                     CCP1CON         equ	4029	;# 
   565   000FBD                     ECCP1CON        equ	4029	;# 
   566   000FBE                     CCPR1           equ	4030	;# 
   567   000FBE                     CCPR1L          equ	4030	;# 
   568   000FBF                     CCPR1H          equ	4031	;# 
   569   000FC0                     ADCON2          equ	4032	;# 
   570   000FC1                     ADCON1          equ	4033	;# 
   571   000FC2                     ADCON0          equ	4034	;# 
   572   000FC3                     ADRES           equ	4035	;# 
   573   000FC3                     ADRESL          equ	4035	;# 
   574   000FC4                     ADRESH          equ	4036	;# 
   575   000FC5                     SSPCON2         equ	4037	;# 
   576   000FC6                     SSPCON1         equ	4038	;# 
   577   000FC7                     SSPSTAT         equ	4039	;# 
   578   000FC8                     SSPADD          equ	4040	;# 
   579   000FC9                     SSPBUF          equ	4041	;# 
   580   000FCA                     T2CON           equ	4042	;# 
   581   000FCB                     PR2             equ	4043	;# 
   582   000FCB                     MEMCON          equ	4043	;# 
   583   000FCC                     TMR2            equ	4044	;# 
   584   000FCD                     T1CON           equ	4045	;# 
   585   000FCE                     TMR1            equ	4046	;# 
   586   000FCE                     TMR1L           equ	4046	;# 
   587   000FCF                     TMR1H           equ	4047	;# 
   588   000FD0                     RCON            equ	4048	;# 
   589   000FD1                     WDTCON          equ	4049	;# 
   590   000FD2                     HLVDCON         equ	4050	;# 
   591   000FD2                     LVDCON          equ	4050	;# 
   592   000FD3                     OSCCON          equ	4051	;# 
   593   000FD5                     T0CON           equ	4053	;# 
   594   000FD6                     TMR0            equ	4054	;# 
   595   000FD6                     TMR0L           equ	4054	;# 
   596   000FD7                     TMR0H           equ	4055	;# 
   597   000FD8                     STATUS          equ	4056	;# 
   598   000FD9                     FSR2            equ	4057	;# 
   599   000FD9                     FSR2L           equ	4057	;# 
   600   000FDA                     FSR2H           equ	4058	;# 
   601   000FDB                     PLUSW2          equ	4059	;# 
   602   000FDC                     PREINC2         equ	4060	;# 
   603   000FDD                     POSTDEC2        equ	4061	;# 
   604   000FDE                     POSTINC2        equ	4062	;# 
   605   000FDF                     INDF2           equ	4063	;# 
   606   000FE0                     BSR             equ	4064	;# 
   607   000FE1                     FSR1            equ	4065	;# 
   608   000FE1                     FSR1L           equ	4065	;# 
   609   000FE2                     FSR1H           equ	4066	;# 
   610   000FE3                     PLUSW1          equ	4067	;# 
   611   000FE4                     PREINC1         equ	4068	;# 
   612   000FE5                     POSTDEC1        equ	4069	;# 
   613   000FE6                     POSTINC1        equ	4070	;# 
   614   000FE7                     INDF1           equ	4071	;# 
   615   000FE8                     WREG            equ	4072	;# 
   616   000FE9                     FSR0            equ	4073	;# 
   617   000FE9                     FSR0L           equ	4073	;# 
   618   000FEA                     FSR0H           equ	4074	;# 
   619   000FEB                     PLUSW0          equ	4075	;# 
   620   000FEC                     PREINC0         equ	4076	;# 
   621   000FED                     POSTDEC0        equ	4077	;# 
   622   000FEE                     POSTINC0        equ	4078	;# 
   623   000FEF                     INDF0           equ	4079	;# 
   624   000FF0                     INTCON3         equ	4080	;# 
   625   000FF1                     INTCON2         equ	4081	;# 
   626   000FF2                     INTCON          equ	4082	;# 
   627   000FF3                     PROD            equ	4083	;# 
   628   000FF3                     PRODL           equ	4083	;# 
   629   000FF4                     PRODH           equ	4084	;# 
   630   000FF5                     TABLAT          equ	4085	;# 
   631   000FF6                     TBLPTR          equ	4086	;# 
   632   000FF6                     TBLPTRL         equ	4086	;# 
   633   000FF7                     TBLPTRH         equ	4087	;# 
   634   000FF8                     TBLPTRU         equ	4088	;# 
   635   000FF9                     PCLAT           equ	4089	;# 
   636   000FF9                     PC              equ	4089	;# 
   637   000FF9                     PCL             equ	4089	;# 
   638   000FFA                     PCLATH          equ	4090	;# 
   639   000FFB                     PCLATU          equ	4091	;# 
   640   000FFC                     STKPTR          equ	4092	;# 
   641   000FFD                     TOS             equ	4093	;# 
   642   000FFD                     TOSL            equ	4093	;# 
   643   000FFE                     TOSH            equ	4094	;# 
   644   000FFF                     TOSU            equ	4095	;# 
   645                           
   646                           	psect	smallconst
   647   000800                     __psmallconst:
   648                           	callstack 0
   649   000800  00                 	db	0
   650   000801                     _figura_2:
   651                           	callstack 0
   652   000801  1B                 	db	27
   653   000802  11                 	db	17
   654   000803  1F                 	db	31
   655   000804  1F                 	db	31
   656   000805  1F                 	db	31
   657   000806  11                 	db	17
   658   000807  1B                 	db	27
   659   000808  00                 	db	0
   660   000809                     __end_of_figura_2:
   661                           	callstack 0
   662   000809                     _figura_1:
   663                           	callstack 0
   664   000809  1B                 	db	27
   665   00080A  11                 	db	17
   666   00080B  11                 	db	17
   667   00080C  11                 	db	17
   668   00080D  11                 	db	17
   669   00080E  11                 	db	17
   670   00080F  1B                 	db	27
   671   000810  1F                 	db	31
   672   000811                     __end_of_figura_1:
   673                           	callstack 0
   674   000FA1                     _PIR2bits       set	4001
   675   000FA7                     _EECON2         set	4007
   676   000FA6                     _EECON1bits     set	4006
   677   000FA8                     _EEDATA         set	4008
   678   000FA9                     _EEADR          set	4009
   679   000F95                     _TRISDbits      set	3989
   680   000F8D                     _LATEbits       set	3981
   681   000F8B                     _LATCbits       set	3979
   682   000F81                     _PORTBbits      set	3969
   683   000F81                     _PORTB          set	3969
   684   000FD5                     _T0CONbits      set	4053
   685   000FD6                     _TMR0L          set	4054
   686   000F82                     _PORTCbits      set	3970
   687   000F8C                     _LATDbits       set	3980
   688   000F80                     _PORTAbits      set	3968
   689   000FF2                     _INTCON         set	4082
   690   000FD5                     _T0CON          set	4053
   691   000FF1                     _INTCON2bits    set	4081
   692   000FF2                     _INTCONbits     set	4082
   693   000FD0                     _RCONbits       set	4048
   694   000F8D                     _LATE           set	3981
   695   000F8C                     _LATD           set	3980
   696   000F8B                     _LATC           set	3979
   697   000F8A                     _LATB           set	3978
   698   000F89                     _LATA           set	3977
   699   000F94                     _TRISCbits      set	3988
   700   000F94                     _TRISC          set	3988
   701   000F96                     _TRISE          set	3990
   702   000F95                     _TRISD          set	3989
   703   000F92                     _TRISA          set	3986
   704   000F93                     _TRISB          set	3987
   705   000FC1                     _ADCON1bits     set	4033
   706   000811                     STR_3:
   707   000811  20                 	db	32
   708   000812  20                 	db	32
   709   000813  20                 	db	32
   710   000814  20                 	db	32
   711   000815  20                 	db	32
   712   000816  20                 	db	32
   713   000817  20                 	db	32
   714   000818  20                 	db	32
   715   000819  20                 	db	32
   716   00081A  20                 	db	32
   717   00081B  20                 	db	32
   718   00081C  20                 	db	32
   719   00081D  00                 	db	0
   720   00081E                     STR_1:
   721   00081E  44                 	db	68	;'D'
   722   00081F  45                 	db	69	;'E'
   723   000820  54                 	db	84	;'T'
   724   000821  45                 	db	69	;'E'
   725   000822  43                 	db	67	;'C'
   726   000823  54                 	db	84	;'T'
   727   000824  41                 	db	65	;'A'
   728   000825  44                 	db	68	;'D'
   729   000826  4F                 	db	79	;'O'
   730   000827  00                 	db	0
   731   000828                     STR_6:
   732   000828  42                 	db	66	;'B'
   733   000829  4C                 	db	76	;'L'
   734   00082A  41                 	db	65	;'A'
   735   00082B  4E                 	db	78	;'N'
   736   00082C  43                 	db	67	;'C'
   737   00082D  41                 	db	65	;'A'
   738   00082E  53                 	db	83	;'S'
   739   00082F  00                 	db	0
   740   000830                     STR_8:
   741   000830  49                 	db	73	;'I'
   742   000831  4E                 	db	78	;'N'
   743   000832  49                 	db	73	;'I'
   744   000833  43                 	db	67	;'C'
   745   000834  49                 	db	73	;'I'
   746   000835  4F                 	db	79	;'O'
   747   000836  00                 	db	0
   748   000837                     STR_5:
   749   000837  4E                 	db	78	;'N'
   750   000838  45                 	db	69	;'E'
   751   000839  47                 	db	71	;'G'
   752   00083A  52                 	db	82	;'R'
   753   00083B  41                 	db	65	;'A'
   754   00083C  53                 	db	83	;'S'
   755   00083D  00                 	db	0
   756   00083E                     STR_7:
   757   00083E  4D                 	db	77	;'M'
   758   00083F  45                 	db	69	;'E'
   759   000840  54                 	db	84	;'T'
   760   000841  41                 	db	65	;'A'
   761   000842  4C                 	db	76	;'L'
   762   000843  00                 	db	0
   763   000844                     STR_4:
   764   000844  58                 	db	88	;'X'
   765   000845  3D                 	db	61	;'='
   766   000846  00                 	db	0
   767   000847                     STR_2:
   768   000847  25                 	db	37
   769   000848  64                 	db	100	;'d'
   770   000849  00                 	db	0
   771   00084A  00                 	db	0	; dummy byte at the end
   772   000800                     __smallconst    set	__psmallconst
   773   000800                     __mediumconst   set	__psmallconst
   774   000002                     __activetblptr  equ	2
   775                           
   776                           ; #config settings
   777                           
   778                           	psect	cinit
   779   001C2C                     __pcinit:
   780                           	callstack 0
   781   001C2C                     start_initialization:
   782                           	callstack 0
   783   001C2C                     __initialization:
   784                           	callstack 0
   785                           
   786                           ; Clear objects allocated to BANK0 (43 bytes)
   787   001C2C  EE00  F060         	lfsr	0,__pbssBANK0
   788   001C30  0E2B               	movlw	43
   789   001C32                     clear_0:
   790   001C32  6AEE               	clrf	postinc0,c
   791   001C34  06E8               	decf	wreg,f,c
   792   001C36  E1FD               	bnz	clear_0
   793                           
   794                           ; Clear objects allocated to COMRAM (12 bytes)
   795   001C38  EE00  F03E         	lfsr	0,__pbssCOMRAM
   796   001C3C  0E0C               	movlw	12
   797   001C3E                     clear_1:
   798   001C3E  6AEE               	clrf	postinc0,c
   799   001C40  06E8               	decf	wreg,f,c
   800   001C42  E1FD               	bnz	clear_1
   801   001C44                     end_of_initialization:
   802                           	callstack 0
   803   001C44                     __end_of__initialization:
   804                           	callstack 0
   805   001C44  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   806   001C46  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   807   001C48  0E00               	movlw	low (__Lmediumconst shr (0+16))
   808   001C4A  6EF8               	movwf	tblptru,c
   809   001C4C  0100               	movlb	0
   810   001C4E  EFA7  F007         	goto	_main	;jump to C main() function
   811                           
   812                           	psect	bssCOMRAM
   813   00003E                     __pbssCOMRAM:
   814                           	callstack 0
   815   00003E                     _Fila2:
   816                           	callstack 0
   817   00003E                     	ds	3
   818   000041                     _Fila1:
   819                           	callstack 0
   820   000041                     	ds	3
   821   000044                     _flags:
   822                           	callstack 0
   823   000044                     	ds	1
   824   000045                     _c:
   825                           	callstack 0
   826   000045                     	ds	1
   827   000046                     _f:
   828                           	callstack 0
   829   000046                     	ds	1
   830   000047                     _NEGRA:
   831                           	callstack 0
   832   000047                     	ds	1
   833   000048                     _BLANCA:
   834                           	callstack 0
   835   000048                     	ds	1
   836   000049                     _METAL:
   837                           	callstack 0
   838   000049                     	ds	1
   839                           
   840                           	psect	bssBANK0
   841   000060                     __pbssBANK0:
   842                           	callstack 0
   843   000060                     _dbuf:
   844                           	callstack 0
   845   000060                     	ds	32
   846   000080                     _Fila3:
   847                           	callstack 0
   848   000080                     	ds	3
   849   000083                     _width:
   850                           	callstack 0
   851   000083                     	ds	2
   852   000085                     _prec:
   853                           	callstack 0
   854   000085                     	ds	2
   855   000087                     _Delay:
   856                           	callstack 0
   857   000087                     	ds	2
   858   000089                     _SALTO:
   859                           	callstack 0
   860   000089                     	ds	2
   861                           
   862                           	psect	cstackBANK0
   863   00008B                     __pcstackBANK0:
   864                           	callstack 0
   865   00008B                     mostrar_variable@buffer:
   866                           	callstack 0
   867                           
   868                           ; 20 bytes @ 0x0
   869   00008B                     	ds	20
   870                           
   871                           	psect	cstackCOMRAM
   872   000001                     __pcstackCOMRAM:
   873                           	callstack 0
   874   000001                     i1Lcd_Port@a:
   875                           	callstack 0
   876   000001                     
   877                           ; 1 bytes @ 0x0
   878   000001                     	ds	1
   879   000002                     ??i1_Lcd_Cmd:
   880                           
   881                           ; 1 bytes @ 0x1
   882   000002                     	ds	1
   883   000003                     i1Lcd_Cmd@a:
   884                           	callstack 0
   885                           
   886                           ; 1 bytes @ 0x2
   887   000003                     	ds	1
   888   000004                     i1Lcd_Set_Cursor@b:
   889                           	callstack 0
   890   000004                     
   891                           ; 1 bytes @ 0x3
   892   000004                     	ds	1
   893   000005                     i1Lcd_Set_Cursor@a:
   894                           	callstack 0
   895   000005                     
   896                           ; 1 bytes @ 0x4
   897   000005                     	ds	1
   898   000006                     i1Lcd_Set_Cursor@z:
   899                           	callstack 0
   900                           
   901                           ; 1 bytes @ 0x5
   902   000006                     	ds	1
   903   000007                     i1Lcd_Set_Cursor@y:
   904                           	callstack 0
   905                           
   906                           ; 1 bytes @ 0x6
   907   000007                     	ds	1
   908   000008                     i1Lcd_Set_Cursor@temp:
   909                           	callstack 0
   910                           
   911                           ; 1 bytes @ 0x7
   912   000008                     	ds	1
   913   000009                     ??_LowISR:
   914                           
   915                           ; 1 bytes @ 0x8
   916   000009                     	ds	3
   917   00000C                     LowISR@dummy:
   918                           	callstack 0
   919                           
   920                           ; 1 bytes @ 0xB
   921   00000C                     	ds	1
   922   00000D                     ?___awdiv:
   923                           	callstack 0
   924   00000D                     ?___awmod:
   925                           	callstack 0
   926   00000D                     MOD@C:
   927                           	callstack 0
   928   00000D                     Lcd_Port@a:
   929                           	callstack 0
   930   00000D                     EEPROM_Write@data:
   931                           	callstack 0
   932   00000D                     EEPROM_Read@dir:
   933                           	callstack 0
   934   00000D                     ___awdiv@dividend:
   935                           	callstack 0
   936   00000D                     ___awmod@dividend:
   937                           	callstack 0
   938   00000D                     fputc@c:
   939                           	callstack 0
   940   00000D                     ??_full:
   941   00000D                     
   942                           ; 1 bytes @ 0xC
   943   00000D                     	ds	1
   944   00000E                     estado@i:
   945                           	callstack 0
   946   00000E                     MOD@x:
   947                           	callstack 0
   948   00000E                     Lcd_Write_Char@temp:
   949                           	callstack 0
   950   00000E                     EEPROM_Write@dir:
   951                           	callstack 0
   952   00000E                     full@i:
   953                           	callstack 0
   954   00000E                     ??_Lcd_Cmd:
   955                           
   956                           ; 1 bytes @ 0xD
   957   00000E                     	ds	1
   958   00000F                     Clear@i:
   959                           	callstack 0
   960   00000F                     guardar@media:
   961                           	callstack 0
   962   00000F                     estado@i_704:
   963                           	callstack 0
   964   00000F                     MOD@F:
   965                           	callstack 0
   966   00000F                     Lcd_Cmd@a:
   967                           	callstack 0
   968   00000F                     Lcd_Write_Char@y:
   969                           	callstack 0
   970   00000F                     fputc@fp:
   971                           	callstack 0
   972   00000F                     ___awdiv@divisor:
   973                           	callstack 0
   974   00000F                     ___awmod@divisor:
   975                           	callstack 0
   976   00000F                     
   977                           ; 1 bytes @ 0xE
   978   00000F                     	ds	1
   979   000010                     guardar@i:
   980                           	callstack 0
   981   000010                     estado@i_705:
   982                           	callstack 0
   983   000010                     Lcd_Set_Cursor@b:
   984                           	callstack 0
   985   000010                     Lcd_Write_Char@a:
   986                           	callstack 0
   987   000010                     full@i_748:
   988                           	callstack 0
   989   000010                     ??_Lcd_Init:
   990   000010                     ??_fputc:
   991                           
   992                           ; 1 bytes @ 0xF
   993   000010                     	ds	1
   994   000011                     guardar@i_699:
   995                           	callstack 0
   996   000011                     Lcd_Set_Cursor@a:
   997                           	callstack 0
   998   000011                     Lcd_CGRAM_CreateChar@chardata:
   999                           	callstack 0
  1000   000011                     ___awdiv@counter:
  1001                           	callstack 0
  1002   000011                     ___awmod@counter:
  1003                           	callstack 0
  1004   000011                     Lcd_Write_String@a:
  1005                           	callstack 0
  1006   000011                     
  1007                           ; 1 bytes @ 0x10
  1008   000011                     	ds	1
  1009   000012                     guardar@i_700:
  1010                           	callstack 0
  1011   000012                     Lcd_Set_Cursor@z:
  1012                           	callstack 0
  1013   000012                     ___awdiv@sign:
  1014                           	callstack 0
  1015   000012                     ___awmod@sign:
  1016                           	callstack 0
  1017   000012                     full@i_749:
  1018                           	callstack 0
  1019   000012                     ??_Lcd_CGRAM_CreateChar:
  1020                           
  1021                           ; 1 bytes @ 0x11
  1022   000012                     	ds	1
  1023   000013                     ?_abs:
  1024                           	callstack 0
  1025   000013                     Lcd_Set_Cursor@y:
  1026                           	callstack 0
  1027   000013                     Lcd_CGRAM_CreateChar@add:
  1028                           	callstack 0
  1029   000013                     ___awdiv@quotient:
  1030                           	callstack 0
  1031   000013                     abs@a:
  1032                           	callstack 0
  1033   000013                     ??_Lcd_Write_String:
  1034                           
  1035                           ; 1 bytes @ 0x12
  1036   000013                     	ds	1
  1037   000014                     Lcd_Set_Cursor@temp:
  1038                           	callstack 0
  1039   000014                     Lcd_CGRAM_CreateChar@i:
  1040                           	callstack 0
  1041   000014                     full@suma:
  1042                           	callstack 0
  1043                           
  1044                           ; 2 bytes @ 0x13
  1045   000014                     	ds	1
  1046   000015                     Actualizar_Matriz@acum:
  1047                           	callstack 0
  1048   000015                     Lcd_CGRAM_CreateChar@i_910:
  1049                           	callstack 0
  1050   000015                     Lcd_Write_String@i:
  1051                           	callstack 0
  1052   000015                     ??_abs:
  1053   000015                     
  1054                           ; 1 bytes @ 0x14
  1055   000015                     	ds	1
  1056   000016                     Actualizar_Matriz@i:
  1057                           	callstack 0
  1058   000016                     Lcd_CGRAM_CreateChar@i_911:
  1059                           	callstack 0
  1060                           
  1061                           ; 1 bytes @ 0x15
  1062   000016                     	ds	1
  1063   000017                     Actualizar_Matriz@i_692:
  1064                           	callstack 0
  1065   000017                     Lcd_CGRAM_CreateChar@i_912:
  1066                           	callstack 0
  1067   000017                     vfpfcnvrt@fp:
  1068                           	callstack 0
  1069   000017                     
  1070                           ; 1 bytes @ 0x16
  1071   000017                     	ds	1
  1072   000018                     Actualizar_Matriz@i_693:
  1073                           	callstack 0
  1074   000018                     Lcd_CGRAM_CreateChar@i_913:
  1075                           	callstack 0
  1076   000018                     vfpfcnvrt@fmt:
  1077                           	callstack 0
  1078                           
  1079                           ; 1 bytes @ 0x17
  1080   000018                     	ds	1
  1081   000019                     Lcd_CGRAM_CreateChar@i_914:
  1082                           	callstack 0
  1083   000019                     vfpfcnvrt@ap:
  1084                           	callstack 0
  1085   000019                     ??_probar_1sg:
  1086                           
  1087                           ; 1 bytes @ 0x18
  1088   000019                     	ds	1
  1089   00001A                     Lcd_CGRAM_CreateChar@i_915:
  1090                           	callstack 0
  1091   00001A                     ??_vfpfcnvrt:
  1092                           
  1093                           ; 1 bytes @ 0x19
  1094   00001A                     	ds	1
  1095   00001B                     Lcd_CGRAM_CreateChar@i_916:
  1096                           	callstack 0
  1097   00001B                     vfpfcnvrt@done:
  1098                           	callstack 0
  1099                           
  1100                           ; 1 bytes @ 0x1A
  1101   00001B                     	ds	1
  1102   00001C                     vfpfcnvrt@cp:
  1103                           	callstack 0
  1104                           
  1105                           ; 1 bytes @ 0x1B
  1106   00001C                     	ds	1
  1107   00001D                     vfpfcnvrt@convarg:
  1108                           	callstack 0
  1109                           
  1110                           ; 4 bytes @ 0x1C
  1111   00001D                     	ds	4
  1112   000021                     vfpfcnvrt@c:
  1113                           	callstack 0
  1114                           
  1115                           ; 1 bytes @ 0x20
  1116   000021                     	ds	1
  1117   000022                     ?_vfprintf:
  1118                           	callstack 0
  1119   000022                     vfprintf@fp:
  1120                           	callstack 0
  1121                           
  1122                           ; 1 bytes @ 0x21
  1123   000022                     	ds	1
  1124   000023                     vfprintf@fmt:
  1125                           	callstack 0
  1126                           
  1127                           ; 1 bytes @ 0x22
  1128   000023                     	ds	1
  1129   000024                     vfprintf@ap:
  1130                           	callstack 0
  1131                           
  1132                           ; 1 bytes @ 0x23
  1133   000024                     	ds	1
  1134   000025                     vfprintf@cfmt:
  1135                           	callstack 0
  1136   000025                     
  1137                           ; 1 bytes @ 0x24
  1138   000025                     	ds	1
  1139   000026                     ?_sprintf:
  1140                           	callstack 0
  1141   000026                     sprintf@s:
  1142                           	callstack 0
  1143                           
  1144                           ; 1 bytes @ 0x25
  1145   000026                     	ds	1
  1146   000027                     sprintf@fmt:
  1147                           	callstack 0
  1148                           
  1149                           ; 1 bytes @ 0x26
  1150   000027                     	ds	3
  1151   00002A                     sprintf@ap:
  1152                           	callstack 0
  1153   00002A                     
  1154                           ; 1 bytes @ 0x29
  1155   00002A                     	ds	1
  1156   00002B                     sprintf@f:
  1157                           	callstack 0
  1158                           
  1159                           ; 11 bytes @ 0x2A
  1160   00002B                     	ds	11
  1161   000036                     mostrar_variable@x:
  1162                           	callstack 0
  1163                           
  1164                           ; 2 bytes @ 0x35
  1165   000036                     	ds	2
  1166   000038                     ??_dejar:
  1167                           
  1168                           ; 1 bytes @ 0x37
  1169   000038                     	ds	2
  1170   00003A                     dejar@acum:
  1171                           	callstack 0
  1172                           
  1173                           ; 2 bytes @ 0x39
  1174   00003A                     	ds	2
  1175   00003C                     ??_main:
  1176                           
  1177                           ; 1 bytes @ 0x3B
  1178   00003C                     	ds	2
  1179                           
  1180 ;;
  1181 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1182 ;;
  1183 ;; *************** function _main *****************
  1184 ;; Defined at:
  1185 ;;		line 396 in file "ASCENSOR.c"
  1186 ;; Parameters:    Size  Location     Type
  1187 ;;		None
  1188 ;; Auto vars:     Size  Location     Type
  1189 ;;		None
  1190 ;; Return value:  Size  Location     Type
  1191 ;;                  1    wreg      void 
  1192 ;; Registers used:
  1193 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1194 ;; Tracked objects:
  1195 ;;		On entry : 0/0
  1196 ;;		On exit  : 0/0
  1197 ;;		Unchanged: 0/0
  1198 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1199 ;;      Params:         0       0       0       0       0       0       0       0       0
  1200 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1201 ;;      Temps:          2       0       0       0       0       0       0       0       0
  1202 ;;      Totals:         2       0       0       0       0       0       0       0       0
  1203 ;;Total ram usage:        2 bytes
  1204 ;; Hardware stack levels required when called: 12
  1205 ;; This function calls:
  1206 ;;		_Actualizar_Matriz
  1207 ;;		_Lcd_CGRAM_Close
  1208 ;;		_Lcd_CGRAM_CreateChar
  1209 ;;		_Lcd_CGRAM_Init
  1210 ;;		_Lcd_Clear
  1211 ;;		_Lcd_Init
  1212 ;;		_Lcd_Set_Cursor
  1213 ;;		_Lcd_Write_String
  1214 ;;		_Modificar
  1215 ;;		_dejar
  1216 ;;		_detectar
  1217 ;;		_estado
  1218 ;;		_full
  1219 ;;		_guardar
  1220 ;;		_init_int
  1221 ;;		_init_ports
  1222 ;;		_reposo
  1223 ;; This function is called by:
  1224 ;;		Startup code after reset
  1225 ;; This function uses a non-reentrant model
  1226 ;;
  1227                           
  1228                           	psect	text0
  1229   000F4E                     __ptext0:
  1230                           	callstack 0
  1231   000F4E                     _main:
  1232                           	callstack 19
  1233   000F4E                     
  1234                           ;ASCENSOR.c: 397:     init_ports();
  1235   000F4E  EC69  F00E         	call	_init_ports	;wreg free
  1236                           
  1237                           ;ASCENSOR.c: 398:     init_int();
  1238   000F52  EC78  F00E         	call	_init_int	;wreg free
  1239                           
  1240                           ;ASCENSOR.c: 399:     Lcd_Init();
  1241   000F56  ECF8  F00B         	call	_Lcd_Init	;wreg free
  1242                           
  1243                           ;ASCENSOR.c: 400:     Lcd_CGRAM_Init();
  1244   000F5A  ECA1  F00E         	call	_Lcd_CGRAM_Init	;wreg free
  1245   000F5E                     
  1246                           ;ASCENSOR.c: 401:     Lcd_CGRAM_CreateChar(0,figura_1);
  1247   000F5E  0E09               	movlw	low _figura_1
  1248   000F60  6E11               	movwf	Lcd_CGRAM_CreateChar@chardata^0,c
  1249   000F62  0E00               	movlw	0
  1250   000F64  EC2F  F005         	call	_Lcd_CGRAM_CreateChar
  1251   000F68                     
  1252                           ;ASCENSOR.c: 402:     Lcd_CGRAM_CreateChar(1,figura_2);
  1253   000F68  0E01               	movlw	low _figura_2
  1254   000F6A  6E11               	movwf	Lcd_CGRAM_CreateChar@chardata^0,c
  1255   000F6C  0E01               	movlw	1
  1256   000F6E  EC2F  F005         	call	_Lcd_CGRAM_CreateChar
  1257                           
  1258                           ;ASCENSOR.c: 403:     Lcd_CGRAM_Close();
  1259   000F72  ECA8  F00E         	call	_Lcd_CGRAM_Close	;wreg free
  1260   000F76                     
  1261                           ;ASCENSOR.c: 405:     estado();
  1262   000F76  EC78  F00C         	call	_estado	;wreg free
  1263   000F7A                     
  1264                           ;ASCENSOR.c: 406:     Lcd_Clear();
  1265   000F7A  EC9A  F00E         	call	_Lcd_Clear	;wreg free
  1266   000F7E                     
  1267                           ;ASCENSOR.c: 407:     Lcd_Set_Cursor(1,1);
  1268   000F7E  0E01               	movlw	1
  1269   000F80  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1270   000F82  0E01               	movlw	1
  1271   000F84  EC4A  F009         	call	_Lcd_Set_Cursor
  1272   000F88                     
  1273                           ;ASCENSOR.c: 408:     Lcd_Write_String("NEGRAS");
  1274   000F88  0E37               	movlw	low STR_5
  1275   000F8A  6E11               	movwf	Lcd_Write_String@a^0,c
  1276   000F8C  5011               	movf	Lcd_Write_String@a^0,w,c
  1277   000F8E  A4D8               	btfss	status,2,c
  1278   000F90  0E08               	movlw	high __smallconst
  1279   000F92  6E12               	movwf	(Lcd_Write_String@a+1)^0,c
  1280   000F94  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  1281   000F98                     
  1282                           ;ASCENSOR.c: 409:     Lcd_Set_Cursor(2,1);
  1283   000F98  0E01               	movlw	1
  1284   000F9A  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1285   000F9C  0E02               	movlw	2
  1286   000F9E  EC4A  F009         	call	_Lcd_Set_Cursor
  1287   000FA2                     
  1288                           ;ASCENSOR.c: 410:     Lcd_Write_String("BLANCAS");
  1289   000FA2  0E28               	movlw	low STR_6
  1290   000FA4  6E11               	movwf	Lcd_Write_String@a^0,c
  1291   000FA6  5011               	movf	Lcd_Write_String@a^0,w,c
  1292   000FA8  A4D8               	btfss	status,2,c
  1293   000FAA  0E08               	movlw	high __smallconst
  1294   000FAC  6E12               	movwf	(Lcd_Write_String@a+1)^0,c
  1295   000FAE  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  1296   000FB2                     
  1297                           ;ASCENSOR.c: 411:     Lcd_Set_Cursor(3,1);
  1298   000FB2  0E01               	movlw	1
  1299   000FB4  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1300   000FB6  0E03               	movlw	3
  1301   000FB8  EC4A  F009         	call	_Lcd_Set_Cursor
  1302   000FBC                     
  1303                           ;ASCENSOR.c: 412:     Lcd_Write_String("METAL");
  1304   000FBC  0E3E               	movlw	low STR_7
  1305   000FBE  6E11               	movwf	Lcd_Write_String@a^0,c
  1306   000FC0  5011               	movf	Lcd_Write_String@a^0,w,c
  1307   000FC2  A4D8               	btfss	status,2,c
  1308   000FC4  0E08               	movlw	high __smallconst
  1309   000FC6  6E12               	movwf	(Lcd_Write_String@a+1)^0,c
  1310   000FC8  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  1311   000FCC                     
  1312                           ;ASCENSOR.c: 413:     _delay((unsigned long)((200)*(4000000/4000.0)));
  1313   000FCC  0E02               	movlw	2
  1314   000FCE  6E3D               	movwf	(??_main+1)^0,c
  1315   000FD0  0E04               	movlw	4
  1316   000FD2  6E3C               	movwf	??_main^0,c
  1317   000FD4  0EBA               	movlw	186
  1318   000FD6                     u3677:
  1319   000FD6  2EE8               	decfsz	wreg,f,c
  1320   000FD8  D7FE               	bra	u3677
  1321   000FDA  2E3C               	decfsz	??_main^0,f,c
  1322   000FDC  D7FC               	bra	u3677
  1323   000FDE  2E3D               	decfsz	(??_main+1)^0,f,c
  1324   000FE0  D7FA               	bra	u3677
  1325   000FE2  D000               	nop2	
  1326   000FE4                     l3860:
  1327                           
  1328                           ;ASCENSOR.c: 416:         Actualizar_Matriz();
  1329   000FE4  ECC9  F008         	call	_Actualizar_Matriz	;wreg free
  1330   000FE8                     
  1331                           ;ASCENSOR.c: 417:         reposo();
  1332   000FE8  EC6D  F00D         	call	_reposo	;wreg free
  1333   000FEC                     
  1334                           ;ASCENSOR.c: 418:         INTCONbits.GIEL=1;
  1335   000FEC  8CF2               	bsf	242,6,c	;volatile
  1336   000FEE                     
  1337                           ;ASCENSOR.c: 419:         Lcd_Set_Cursor(4,1);
  1338   000FEE  0E01               	movlw	1
  1339   000FF0  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1340   000FF2  0E04               	movlw	4
  1341   000FF4  EC4A  F009         	call	_Lcd_Set_Cursor
  1342   000FF8                     
  1343                           ;ASCENSOR.c: 420:         Lcd_Write_String("INICIO");
  1344   000FF8  0E30               	movlw	low STR_8
  1345   000FFA  6E11               	movwf	Lcd_Write_String@a^0,c
  1346   000FFC  5011               	movf	Lcd_Write_String@a^0,w,c
  1347   000FFE  A4D8               	btfss	status,2,c
  1348   001000  0E08               	movlw	high __smallconst
  1349   001002  6E12               	movwf	(Lcd_Write_String@a+1)^0,c
  1350   001004  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  1351                           
  1352                           ;ASCENSOR.c: 421:     while(PORTBbits.RB0==1){
  1353   001008  EF16  F008         	goto	l3874
  1354   00100C                     l269:
  1355                           
  1356                           ;ASCENSOR.c: 423:         if( PORTBbits.RB3==1 || PORTBbits.RB2==1){
  1357   00100C  B681               	btfsc	129,3,c	;volatile
  1358   00100E  EF0B  F008         	goto	u3611
  1359   001012  EF0D  F008         	goto	u3610
  1360   001016                     u3611:
  1361   001016  EF14  F008         	goto	l3872
  1362   00101A                     u3610:
  1363   00101A  A481               	btfss	129,2,c	;volatile
  1364   00101C  EF12  F008         	goto	u3621
  1365   001020  EF14  F008         	goto	u3620
  1366   001024                     u3621:
  1367   001024  EF16  F008         	goto	l3874
  1368   001028                     u3620:
  1369   001028                     l3872:
  1370                           
  1371                           ;ASCENSOR.c: 424:             Modificar();
  1372   001028  EC74  F00B         	call	_Modificar	;wreg free
  1373   00102C                     l3874:
  1374                           
  1375                           ;ASCENSOR.c: 421:     while(PORTBbits.RB0==1){
  1376   00102C  B081               	btfsc	129,0,c	;volatile
  1377   00102E  EF1B  F008         	goto	u3631
  1378   001032  EF1D  F008         	goto	u3630
  1379   001036                     u3631:
  1380   001036  EF06  F008         	goto	l269
  1381   00103A                     u3630:
  1382   00103A                     
  1383                           ;ASCENSOR.c: 427:     detectar();
  1384   00103A  EC29  F00B         	call	_detectar	;wreg free
  1385   00103E                     
  1386                           ;ASCENSOR.c: 428:     full();
  1387   00103E  EC41  F008         	call	_full	;wreg free
  1388   001042                     
  1389                           ;ASCENSOR.c: 429:     if((METAL==1 || BLANCA==1 || NEGRA==1)){
  1390   001042  0449               	decf	_METAL^0,w,c
  1391   001044  B4D8               	btfsc	status,2,c
  1392   001046  EF27  F008         	goto	u3641
  1393   00104A  EF29  F008         	goto	u3640
  1394   00104E                     u3641:
  1395   00104E  EF39  F008         	goto	l3886
  1396   001052                     u3640:
  1397   001052  0448               	decf	_BLANCA^0,w,c
  1398   001054  B4D8               	btfsc	status,2,c
  1399   001056  EF2F  F008         	goto	u3651
  1400   00105A  EF31  F008         	goto	u3650
  1401   00105E                     u3651:
  1402   00105E  EF39  F008         	goto	l3886
  1403   001062                     u3650:
  1404   001062  0447               	decf	_NEGRA^0,w,c
  1405   001064  A4D8               	btfss	status,2,c
  1406   001066  EF37  F008         	goto	u3661
  1407   00106A  EF39  F008         	goto	u3660
  1408   00106E                     u3661:
  1409   00106E  EFF2  F007         	goto	l3860
  1410   001072                     u3660:
  1411   001072                     l3886:
  1412                           
  1413                           ;ASCENSOR.c: 430:     dejar();
  1414   001072  EC00  F007         	call	_dejar	;wreg free
  1415   001076                     
  1416                           ;ASCENSOR.c: 431:     guardar();
  1417   001076  ECB6  F00B         	call	_guardar	;wreg free
  1418   00107A  EFF2  F007         	goto	l3860
  1419   00107E  EF6C  F000         	goto	start
  1420   001082                     __end_of_main:
  1421                           	callstack 0
  1422                           
  1423 ;; *************** function _reposo *****************
  1424 ;; Defined at:
  1425 ;;		line 72 in file "ASCENSOR.c"
  1426 ;; Parameters:    Size  Location     Type
  1427 ;;		None
  1428 ;; Auto vars:     Size  Location     Type
  1429 ;;		None
  1430 ;; Return value:  Size  Location     Type
  1431 ;;                  1    wreg      void 
  1432 ;; Registers used:
  1433 ;;		None
  1434 ;; Tracked objects:
  1435 ;;		On entry : 0/0
  1436 ;;		On exit  : 0/0
  1437 ;;		Unchanged: 0/0
  1438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1439 ;;      Params:         0       0       0       0       0       0       0       0       0
  1440 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1441 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1442 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1443 ;;Total ram usage:        0 bytes
  1444 ;; Hardware stack levels used: 1
  1445 ;; Hardware stack levels required when called: 5
  1446 ;; This function calls:
  1447 ;;		Nothing
  1448 ;; This function is called by:
  1449 ;;		_main
  1450 ;; This function uses a non-reentrant model
  1451 ;;
  1452                           
  1453                           	psect	text1
  1454   001ADA                     __ptext1:
  1455                           	callstack 0
  1456   001ADA                     _reposo:
  1457                           	callstack 25
  1458   001ADA                     
  1459                           ;ASCENSOR.c: 73:  if(PORTAbits.RA1==1){
  1460   001ADA  A280               	btfss	128,1,c	;volatile
  1461   001ADC  EF72  F00D         	goto	u921
  1462   001AE0  EF74  F00D         	goto	u920
  1463   001AE4                     u921:
  1464   001AE4  EF7D  F00D         	goto	l111
  1465   001AE8                     u920:
  1466   001AE8                     
  1467                           ;ASCENSOR.c: 74:   LATDbits.LATD3=1;
  1468   001AE8  868C               	bsf	140,3,c	;volatile
  1469   001AEA                     l112:
  1470   001AEA  B280               	btfsc	128,1,c	;volatile
  1471   001AEC  EF7A  F00D         	goto	u931
  1472   001AF0  EF7C  F00D         	goto	u930
  1473   001AF4                     u931:
  1474   001AF4  EF75  F00D         	goto	l112
  1475   001AF8                     u930:
  1476   001AF8                     
  1477                           ;ASCENSOR.c: 76:      LATDbits.LATD3=0;
  1478   001AF8  968C               	bcf	140,3,c	;volatile
  1479   001AFA                     l111:
  1480                           
  1481                           ;ASCENSOR.c: 79:     if(PORTAbits.RA2==1){
  1482   001AFA  A480               	btfss	128,2,c	;volatile
  1483   001AFC  EF82  F00D         	goto	u941
  1484   001B00  EF84  F00D         	goto	u940
  1485   001B04                     u941:
  1486   001B04  EF8D  F00D         	goto	l119
  1487   001B08                     u940:
  1488   001B08                     
  1489                           ;ASCENSOR.c: 80:      LATDbits.LATD0=1;
  1490   001B08  808C               	bsf	140,0,c	;volatile
  1491   001B0A                     l116:
  1492   001B0A  B480               	btfsc	128,2,c	;volatile
  1493   001B0C  EF8A  F00D         	goto	u951
  1494   001B10  EF8C  F00D         	goto	u950
  1495   001B14                     u951:
  1496   001B14  EF85  F00D         	goto	l116
  1497   001B18                     u950:
  1498   001B18                     
  1499                           ;ASCENSOR.c: 82:      LATDbits.LATD0=0;
  1500   001B18  908C               	bcf	140,0,c	;volatile
  1501   001B1A                     l119:
  1502   001B1A  0012               	return		;funcret
  1503   001B1C                     __end_of_reposo:
  1504                           	callstack 0
  1505                           
  1506 ;; *************** function _init_ports *****************
  1507 ;; Defined at:
  1508 ;;		line 43 in file "ASCENSOR.c"
  1509 ;; Parameters:    Size  Location     Type
  1510 ;;		None
  1511 ;; Auto vars:     Size  Location     Type
  1512 ;;		None
  1513 ;; Return value:  Size  Location     Type
  1514 ;;                  1    wreg      void 
  1515 ;; Registers used:
  1516 ;;		wreg, status,2
  1517 ;; Tracked objects:
  1518 ;;		On entry : 0/0
  1519 ;;		On exit  : 0/0
  1520 ;;		Unchanged: 0/0
  1521 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1522 ;;      Params:         0       0       0       0       0       0       0       0       0
  1523 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1524 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1525 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1526 ;;Total ram usage:        0 bytes
  1527 ;; Hardware stack levels used: 1
  1528 ;; Hardware stack levels required when called: 5
  1529 ;; This function calls:
  1530 ;;		Nothing
  1531 ;; This function is called by:
  1532 ;;		_main
  1533 ;; This function uses a non-reentrant model
  1534 ;;
  1535                           
  1536                           	psect	text2
  1537   001CD2                     __ptext2:
  1538                           	callstack 0
  1539   001CD2                     _init_ports:
  1540                           	callstack 25
  1541   001CD2                     
  1542                           ;ASCENSOR.c: 44:     ADCON1bits.PCFG=0x0F;
  1543   001CD2  0E0F               	movlw	15
  1544   001CD4  12C1               	iorwf	193,f,c	;volatile
  1545   001CD6                     
  1546                           ;ASCENSOR.c: 45:     TRISB=0XFF;
  1547   001CD6  6893               	setf	147,c	;volatile
  1548   001CD8                     
  1549                           ;ASCENSOR.c: 46:     TRISA=0XFF;
  1550   001CD8  6892               	setf	146,c	;volatile
  1551   001CDA                     
  1552                           ;ASCENSOR.c: 47:     TRISD=0X00;
  1553   001CDA  6A95               	clrf	149,c	;volatile
  1554   001CDC                     
  1555                           ;ASCENSOR.c: 48:     TRISE=0X00;
  1556   001CDC  6A96               	clrf	150,c	;volatile
  1557   001CDE                     
  1558                           ;ASCENSOR.c: 49:     TRISC=0XFF;
  1559   001CDE  6894               	setf	148,c	;volatile
  1560   001CE0                     
  1561                           ;ASCENSOR.c: 50:     TRISCbits.RC0=0;
  1562   001CE0  9094               	bcf	148,0,c	;volatile
  1563   001CE2                     
  1564                           ;ASCENSOR.c: 51:     TRISCbits.RC6=0;
  1565   001CE2  9C94               	bcf	148,6,c	;volatile
  1566   001CE4                     
  1567                           ;ASCENSOR.c: 53:     LATA=0X00;
  1568   001CE4  6A89               	clrf	137,c	;volatile
  1569   001CE6                     
  1570                           ;ASCENSOR.c: 54:     LATB=0X00;
  1571   001CE6  6A8A               	clrf	138,c	;volatile
  1572   001CE8                     
  1573                           ;ASCENSOR.c: 55:     LATC=0X00;
  1574   001CE8  6A8B               	clrf	139,c	;volatile
  1575   001CEA                     
  1576                           ;ASCENSOR.c: 56:     LATD=0X00;
  1577   001CEA  6A8C               	clrf	140,c	;volatile
  1578   001CEC                     
  1579                           ;ASCENSOR.c: 57:     LATE=0X00;
  1580   001CEC  6A8D               	clrf	141,c	;volatile
  1581   001CEE  0012               	return		;funcret
  1582   001CF0                     __end_of_init_ports:
  1583                           	callstack 0
  1584                           
  1585 ;; *************** function _init_int *****************
  1586 ;; Defined at:
  1587 ;;		line 61 in file "ASCENSOR.c"
  1588 ;; Parameters:    Size  Location     Type
  1589 ;;		None
  1590 ;; Auto vars:     Size  Location     Type
  1591 ;;		None
  1592 ;; Return value:  Size  Location     Type
  1593 ;;                  1    wreg      void 
  1594 ;; Registers used:
  1595 ;;		wreg, status,2
  1596 ;; Tracked objects:
  1597 ;;		On entry : 0/0
  1598 ;;		On exit  : 0/0
  1599 ;;		Unchanged: 0/0
  1600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1601 ;;      Params:         0       0       0       0       0       0       0       0       0
  1602 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1603 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1604 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1605 ;;Total ram usage:        0 bytes
  1606 ;; Hardware stack levels used: 1
  1607 ;; Hardware stack levels required when called: 5
  1608 ;; This function calls:
  1609 ;;		Nothing
  1610 ;; This function is called by:
  1611 ;;		_main
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614                           
  1615                           	psect	text3
  1616   001CF0                     __ptext3:
  1617                           	callstack 0
  1618   001CF0                     _init_int:
  1619                           	callstack 25
  1620   001CF0                     
  1621                           ;ASCENSOR.c: 62:     RCONbits.IPEN= 1;
  1622   001CF0  8ED0               	bsf	208,7,c	;volatile
  1623                           
  1624                           ;ASCENSOR.c: 63:     INTCONbits.RBIE=1;
  1625   001CF2  86F2               	bsf	242,3,c	;volatile
  1626                           
  1627                           ;ASCENSOR.c: 64:     INTCONbits.RBIF=0;
  1628   001CF4  90F2               	bcf	242,0,c	;volatile
  1629                           
  1630                           ;ASCENSOR.c: 65:     INTCON2bits.RBIP=0;
  1631   001CF6  90F1               	bcf	241,0,c	;volatile
  1632   001CF8                     
  1633                           ;ASCENSOR.c: 66:     T0CON = 0B01111000;
  1634   001CF8  0E78               	movlw	120
  1635   001CFA  6ED5               	movwf	213,c	;volatile
  1636                           
  1637                           ;ASCENSOR.c: 67:     INTCON = 0B10101000;
  1638   001CFC  0EA8               	movlw	168
  1639   001CFE  6EF2               	movwf	242,c	;volatile
  1640   001D00                     
  1641                           ;ASCENSOR.c: 68:     INTCON2bits.TMR0IP = 1;
  1642   001D00  84F1               	bsf	241,2,c	;volatile
  1643   001D02  0012               	return		;funcret
  1644   001D04                     __end_of_init_int:
  1645                           	callstack 0
  1646                           
  1647 ;; *************** function _full *****************
  1648 ;; Defined at:
  1649 ;;		line 330 in file "ASCENSOR.c"
  1650 ;; Parameters:    Size  Location     Type
  1651 ;;		None
  1652 ;; Auto vars:     Size  Location     Type
  1653 ;;  i               2   17[COMRAM] int 
  1654 ;;  i               2   15[COMRAM] int 
  1655 ;;  i               2   13[COMRAM] int 
  1656 ;;  suma            2   19[COMRAM] int 
  1657 ;; Return value:  Size  Location     Type
  1658 ;;                  1    wreg      void 
  1659 ;; Registers used:
  1660 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  1661 ;; Tracked objects:
  1662 ;;		On entry : 0/0
  1663 ;;		On exit  : 0/0
  1664 ;;		Unchanged: 0/0
  1665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1666 ;;      Params:         0       0       0       0       0       0       0       0       0
  1667 ;;      Locals:         8       0       0       0       0       0       0       0       0
  1668 ;;      Temps:          1       0       0       0       0       0       0       0       0
  1669 ;;      Totals:         9       0       0       0       0       0       0       0       0
  1670 ;;Total ram usage:        9 bytes
  1671 ;; Hardware stack levels used: 1
  1672 ;; Hardware stack levels required when called: 5
  1673 ;; This function calls:
  1674 ;;		Nothing
  1675 ;; This function is called by:
  1676 ;;		_main
  1677 ;; This function uses a non-reentrant model
  1678 ;;
  1679                           
  1680                           	psect	text4
  1681   001082                     __ptext4:
  1682                           	callstack 0
  1683   001082                     _full:
  1684                           	callstack 25
  1685   001082                     
  1686                           ;ASCENSOR.c: 331:     int suma=0;
  1687   001082  0E00               	movlw	0
  1688   001084  6E15               	movwf	(full@suma+1)^0,c
  1689   001086  0E00               	movlw	0
  1690   001088  6E14               	movwf	full@suma^0,c
  1691                           
  1692                           ;ASCENSOR.c: 332:     for(int i=0;i<=2;i++){
  1693   00108A  0E00               	movlw	0
  1694   00108C  6E0F               	movwf	(full@i+1)^0,c
  1695   00108E  0E00               	movlw	0
  1696   001090  6E0E               	movwf	full@i^0,c
  1697   001092                     l2882:
  1698                           
  1699                           ;ASCENSOR.c: 333:         suma+=Fila1[i];
  1700   001092  500E               	movf	full@i^0,w,c
  1701   001094  0F41               	addlw	low _Fila1
  1702   001096  6ED9               	movwf	fsr2l,c
  1703   001098  6ADA               	clrf	fsr2h,c
  1704   00109A  50DF               	movf	indf2,w,c
  1705   00109C  6E0D               	movwf	??_full^0,c
  1706   00109E  500D               	movf	??_full^0,w,c
  1707   0010A0  2614               	addwf	full@suma^0,f,c
  1708   0010A2  0E00               	movlw	0
  1709   0010A4  2215               	addwfc	(full@suma+1)^0,f,c
  1710   0010A6                     
  1711                           ;ASCENSOR.c: 335:     }
  1712   0010A6  4A0E               	infsnz	full@i^0,f,c
  1713   0010A8  2A0F               	incf	(full@i+1)^0,f,c
  1714   0010AA  BE0F               	btfsc	(full@i+1)^0,7,c
  1715   0010AC  EF61  F008         	goto	u2471
  1716   0010B0  500F               	movf	(full@i+1)^0,w,c
  1717   0010B2  E109               	bnz	u2470
  1718   0010B4  0E03               	movlw	3
  1719   0010B6  5C0E               	subwf	full@i^0,w,c
  1720   0010B8  A0D8               	btfss	status,0,c
  1721   0010BA  EF61  F008         	goto	u2471
  1722   0010BE  EF63  F008         	goto	u2470
  1723   0010C2                     u2471:
  1724   0010C2  EF49  F008         	goto	l2882
  1725   0010C6                     u2470:
  1726   0010C6                     
  1727                           ;ASCENSOR.c: 336:     if(suma==3){
  1728   0010C6  0E03               	movlw	3
  1729   0010C8  1814               	xorwf	full@suma^0,w,c
  1730   0010CA  1015               	iorwf	(full@suma+1)^0,w,c
  1731   0010CC  A4D8               	btfss	status,2,c
  1732   0010CE  EF6B  F008         	goto	u2481
  1733   0010D2  EF6D  F008         	goto	u2480
  1734   0010D6                     u2481:
  1735   0010D6  EF6E  F008         	goto	l2892
  1736   0010DA                     u2480:
  1737   0010DA                     
  1738                           ;ASCENSOR.c: 337:         METAL=0;
  1739   0010DA  6A49               	clrf	_METAL^0,c
  1740   0010DC                     l2892:
  1741                           
  1742                           ;ASCENSOR.c: 339:       suma=0;
  1743   0010DC  0E00               	movlw	0
  1744   0010DE  6E15               	movwf	(full@suma+1)^0,c
  1745   0010E0  0E00               	movlw	0
  1746   0010E2  6E14               	movwf	full@suma^0,c
  1747                           
  1748                           ;ASCENSOR.c: 340:     for(int i=0;i<=2;i++){
  1749   0010E4  0E00               	movlw	0
  1750   0010E6  6E11               	movwf	(full@i_748+1)^0,c
  1751   0010E8  0E00               	movlw	0
  1752   0010EA  6E10               	movwf	full@i_748^0,c
  1753   0010EC                     l2898:
  1754                           
  1755                           ;ASCENSOR.c: 341:         suma+=Fila2[i];
  1756   0010EC  5010               	movf	full@i_748^0,w,c
  1757   0010EE  0F3E               	addlw	low _Fila2
  1758   0010F0  6ED9               	movwf	fsr2l,c
  1759   0010F2  6ADA               	clrf	fsr2h,c
  1760   0010F4  50DF               	movf	indf2,w,c
  1761   0010F6  6E0D               	movwf	??_full^0,c
  1762   0010F8  500D               	movf	??_full^0,w,c
  1763   0010FA  2614               	addwf	full@suma^0,f,c
  1764   0010FC  0E00               	movlw	0
  1765   0010FE  2215               	addwfc	(full@suma+1)^0,f,c
  1766   001100                     
  1767                           ;ASCENSOR.c: 343:     }
  1768   001100  4A10               	infsnz	full@i_748^0,f,c
  1769   001102  2A11               	incf	(full@i_748+1)^0,f,c
  1770   001104  BE11               	btfsc	(full@i_748+1)^0,7,c
  1771   001106  EF8E  F008         	goto	u2491
  1772   00110A  5011               	movf	(full@i_748+1)^0,w,c
  1773   00110C  E109               	bnz	u2490
  1774   00110E  0E03               	movlw	3
  1775   001110  5C10               	subwf	full@i_748^0,w,c
  1776   001112  A0D8               	btfss	status,0,c
  1777   001114  EF8E  F008         	goto	u2491
  1778   001118  EF90  F008         	goto	u2490
  1779   00111C                     u2491:
  1780   00111C  EF76  F008         	goto	l2898
  1781   001120                     u2490:
  1782   001120                     
  1783                           ;ASCENSOR.c: 344:     if(suma==3){
  1784   001120  0E03               	movlw	3
  1785   001122  1814               	xorwf	full@suma^0,w,c
  1786   001124  1015               	iorwf	(full@suma+1)^0,w,c
  1787   001126  A4D8               	btfss	status,2,c
  1788   001128  EF98  F008         	goto	u2501
  1789   00112C  EF9A  F008         	goto	u2500
  1790   001130                     u2501:
  1791   001130  EF9B  F008         	goto	l2908
  1792   001134                     u2500:
  1793   001134                     
  1794                           ;ASCENSOR.c: 345:         BLANCA=0;
  1795   001134  6A48               	clrf	_BLANCA^0,c
  1796   001136                     l2908:
  1797                           
  1798                           ;ASCENSOR.c: 347:        suma=0;
  1799   001136  0E00               	movlw	0
  1800   001138  6E15               	movwf	(full@suma+1)^0,c
  1801   00113A  0E00               	movlw	0
  1802   00113C  6E14               	movwf	full@suma^0,c
  1803                           
  1804                           ;ASCENSOR.c: 348:     for(int i=0;i<=2;i++){
  1805   00113E  0E00               	movlw	0
  1806   001140  6E13               	movwf	(full@i_749+1)^0,c
  1807   001142  0E00               	movlw	0
  1808   001144  6E12               	movwf	full@i_749^0,c
  1809   001146                     l2914:
  1810                           
  1811                           ;ASCENSOR.c: 349:         suma+=Fila3[i];
  1812   001146  5012               	movf	full@i_749^0,w,c
  1813   001148  0F80               	addlw	low _Fila3
  1814   00114A  6ED9               	movwf	fsr2l,c
  1815   00114C  6ADA               	clrf	fsr2h,c
  1816   00114E  50DF               	movf	indf2,w,c
  1817   001150  6E0D               	movwf	??_full^0,c
  1818   001152  500D               	movf	??_full^0,w,c
  1819   001154  2614               	addwf	full@suma^0,f,c
  1820   001156  0E00               	movlw	0
  1821   001158  2215               	addwfc	(full@suma+1)^0,f,c
  1822   00115A                     
  1823                           ;ASCENSOR.c: 351:     }
  1824   00115A  4A12               	infsnz	full@i_749^0,f,c
  1825   00115C  2A13               	incf	(full@i_749+1)^0,f,c
  1826   00115E  BE13               	btfsc	(full@i_749+1)^0,7,c
  1827   001160  EFBB  F008         	goto	u2511
  1828   001164  5013               	movf	(full@i_749+1)^0,w,c
  1829   001166  E109               	bnz	u2510
  1830   001168  0E03               	movlw	3
  1831   00116A  5C12               	subwf	full@i_749^0,w,c
  1832   00116C  A0D8               	btfss	status,0,c
  1833   00116E  EFBB  F008         	goto	u2511
  1834   001172  EFBD  F008         	goto	u2510
  1835   001176                     u2511:
  1836   001176  EFA3  F008         	goto	l2914
  1837   00117A                     u2510:
  1838   00117A                     
  1839                           ;ASCENSOR.c: 352:     if(suma==3){
  1840   00117A  0E03               	movlw	3
  1841   00117C  1814               	xorwf	full@suma^0,w,c
  1842   00117E  1015               	iorwf	(full@suma+1)^0,w,c
  1843   001180  A4D8               	btfss	status,2,c
  1844   001182  EFC5  F008         	goto	u2521
  1845   001186  EFC7  F008         	goto	u2520
  1846   00118A                     u2521:
  1847   00118A  EFC8  F008         	goto	l240
  1848   00118E                     u2520:
  1849   00118E                     
  1850                           ;ASCENSOR.c: 353:         NEGRA=0;
  1851   00118E  6A47               	clrf	_NEGRA^0,c
  1852   001190                     l240:
  1853   001190  0012               	return		;funcret
  1854   001192                     __end_of_full:
  1855                           	callstack 0
  1856                           
  1857 ;; *************** function _detectar *****************
  1858 ;; Defined at:
  1859 ;;		line 87 in file "ASCENSOR.c"
  1860 ;; Parameters:    Size  Location     Type
  1861 ;;		None
  1862 ;; Auto vars:     Size  Location     Type
  1863 ;;		None
  1864 ;; Return value:  Size  Location     Type
  1865 ;;                  1    wreg      void 
  1866 ;; Registers used:
  1867 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1868 ;; Tracked objects:
  1869 ;;		On entry : 0/0
  1870 ;;		On exit  : 0/0
  1871 ;;		Unchanged: 0/0
  1872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  1873 ;;      Params:         0       0       0       0       0       0       0       0       0
  1874 ;;      Locals:         0       0       0       0       0       0       0       0       0
  1875 ;;      Temps:          0       0       0       0       0       0       0       0       0
  1876 ;;      Totals:         0       0       0       0       0       0       0       0       0
  1877 ;;Total ram usage:        0 bytes
  1878 ;; Hardware stack levels used: 1
  1879 ;; Hardware stack levels required when called: 8
  1880 ;; This function calls:
  1881 ;;		_Lcd_Set_Cursor
  1882 ;;		_Lcd_Write_String
  1883 ;; This function is called by:
  1884 ;;		_main
  1885 ;; This function uses a non-reentrant model
  1886 ;;
  1887                           
  1888                           	psect	text5
  1889   001652                     __ptext5:
  1890                           	callstack 0
  1891   001652                     _detectar:
  1892                           	callstack 22
  1893   001652                     
  1894                           ;ASCENSOR.c: 88:  if(PORTCbits.RC1==0 && PORTCbits.RC2==1){
  1895   001652  B282               	btfsc	130,1,c	;volatile
  1896   001654  EF2E  F00B         	goto	u3361
  1897   001658  EF30  F00B         	goto	u3360
  1898   00165C                     u3361:
  1899   00165C  EF3E  F00B         	goto	l122
  1900   001660                     u3360:
  1901   001660  A482               	btfss	130,2,c	;volatile
  1902   001662  EF35  F00B         	goto	u3371
  1903   001666  EF37  F00B         	goto	u3370
  1904   00166A                     u3371:
  1905   00166A  EF3E  F00B         	goto	l122
  1906   00166E                     u3370:
  1907   00166E                     
  1908                           ;ASCENSOR.c: 89:   METAL=1;
  1909   00166E  0E01               	movlw	1
  1910   001670  6E49               	movwf	_METAL^0,c
  1911                           
  1912                           ;ASCENSOR.c: 90:   TMR0L= 249;
  1913   001672  0EF9               	movlw	249
  1914   001674  6ED6               	movwf	214,c	;volatile
  1915   001676                     
  1916                           ;ASCENSOR.c: 91:         T0CONbits.TMR0ON = 1;
  1917   001676  8ED5               	bsf	213,7,c	;volatile
  1918                           
  1919                           ;ASCENSOR.c: 92:  }
  1920   001678  EF66  F00B         	goto	l3620
  1921   00167C                     l122:
  1922   00167C  A282               	btfss	130,1,c	;volatile
  1923   00167E  EF43  F00B         	goto	u3381
  1924   001682  EF45  F00B         	goto	u3380
  1925   001686                     u3381:
  1926   001686  EF53  F00B         	goto	l124
  1927   00168A                     u3380:
  1928   00168A  B482               	btfsc	130,2,c	;volatile
  1929   00168C  EF4A  F00B         	goto	u3391
  1930   001690  EF4C  F00B         	goto	u3390
  1931   001694                     u3391:
  1932   001694  EF53  F00B         	goto	l124
  1933   001698                     u3390:
  1934   001698                     
  1935                           ;ASCENSOR.c: 94:   BLANCA=1;
  1936   001698  0E01               	movlw	1
  1937   00169A  6E48               	movwf	_BLANCA^0,c
  1938                           
  1939                           ;ASCENSOR.c: 95:         TMR0L= 235;
  1940   00169C  0EEB               	movlw	235
  1941   00169E  6ED6               	movwf	214,c	;volatile
  1942   0016A0                     
  1943                           ;ASCENSOR.c: 96:         T0CONbits.TMR0ON = 1;
  1944   0016A0  8ED5               	bsf	213,7,c	;volatile
  1945                           
  1946                           ;ASCENSOR.c: 97:  }
  1947   0016A2  EF66  F00B         	goto	l3620
  1948   0016A6                     l124:
  1949   0016A6  B282               	btfsc	130,1,c	;volatile
  1950   0016A8  EF58  F00B         	goto	u3401
  1951   0016AC  EF5A  F00B         	goto	u3400
  1952   0016B0                     u3401:
  1953   0016B0  EF66  F00B         	goto	l3620
  1954   0016B4                     u3400:
  1955   0016B4  B482               	btfsc	130,2,c	;volatile
  1956   0016B6  EF5F  F00B         	goto	u3411
  1957   0016BA  EF61  F00B         	goto	u3410
  1958   0016BE                     u3411:
  1959   0016BE  EF66  F00B         	goto	l3620
  1960   0016C2                     u3410:
  1961   0016C2                     
  1962                           ;ASCENSOR.c: 99:   NEGRA=1;
  1963   0016C2  0E01               	movlw	1
  1964   0016C4  6E47               	movwf	_NEGRA^0,c
  1965                           
  1966                           ;ASCENSOR.c: 100:         TMR0L= 220;
  1967   0016C6  0EDC               	movlw	220
  1968   0016C8  6ED6               	movwf	214,c	;volatile
  1969   0016CA                     
  1970                           ;ASCENSOR.c: 101:         T0CONbits.TMR0ON = 1;
  1971   0016CA  8ED5               	bsf	213,7,c	;volatile
  1972   0016CC                     l3620:
  1973                           
  1974                           ;ASCENSOR.c: 103:     Lcd_Set_Cursor(4,1);
  1975   0016CC  0E01               	movlw	1
  1976   0016CE  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  1977   0016D0  0E04               	movlw	4
  1978   0016D2  EC4A  F009         	call	_Lcd_Set_Cursor
  1979   0016D6                     
  1980                           ;ASCENSOR.c: 104:     Lcd_Write_String("DETECTADO");
  1981   0016D6  0E1E               	movlw	low STR_1
  1982   0016D8  6E11               	movwf	Lcd_Write_String@a^0,c
  1983   0016DA  5011               	movf	Lcd_Write_String@a^0,w,c
  1984   0016DC  A4D8               	btfss	status,2,c
  1985   0016DE  0E08               	movlw	high __smallconst
  1986   0016E0  6E12               	movwf	(Lcd_Write_String@a+1)^0,c
  1987   0016E2  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  1988   0016E6  0012               	return		;funcret
  1989   0016E8                     __end_of_detectar:
  1990                           	callstack 0
  1991                           
  1992 ;; *************** function _dejar *****************
  1993 ;; Defined at:
  1994 ;;		line 357 in file "ASCENSOR.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;		None
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;  acum            2   57[COMRAM] int 
  1999 ;; Return value:  Size  Location     Type
  2000 ;;                  1    wreg      void 
  2001 ;; Registers used:
  2002 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 0/0
  2006 ;;		Unchanged: 0/0
  2007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2008 ;;      Params:         0       0       0       0       0       0       0       0       0
  2009 ;;      Locals:         2       0       0       0       0       0       0       0       0
  2010 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2011 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2012 ;;Total ram usage:        4 bytes
  2013 ;; Hardware stack levels used: 1
  2014 ;; Hardware stack levels required when called: 11
  2015 ;; This function calls:
  2016 ;;		_Lcd_Set_Cursor
  2017 ;;		_Lcd_Write_String
  2018 ;;		_calibrar
  2019 ;;		_mostrar_variable
  2020 ;; This function is called by:
  2021 ;;		_main
  2022 ;; This function uses a non-reentrant model
  2023 ;;
  2024                           
  2025                           	psect	text6
  2026   000E00                     __ptext6:
  2027                           	callstack 0
  2028   000E00                     _dejar:
  2029                           	callstack 19
  2030   000E00                     
  2031                           ;ASCENSOR.c: 358:     int acum=0;
  2032   000E00  0E00               	movlw	0
  2033   000E02  6E3B               	movwf	(dejar@acum+1)^0,c
  2034   000E04  0E00               	movlw	0
  2035   000E06  6E3A               	movwf	dejar@acum^0,c
  2036   000E08                     
  2037                           ;ASCENSOR.c: 359:     Lcd_Set_Cursor(4,1);
  2038   000E08  0E01               	movlw	1
  2039   000E0A  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  2040   000E0C  0E04               	movlw	4
  2041   000E0E  EC4A  F009         	call	_Lcd_Set_Cursor
  2042   000E12                     
  2043                           ;ASCENSOR.c: 360:     Lcd_Write_String("            ");
  2044   000E12  0E11               	movlw	low STR_3
  2045   000E14  6E11               	movwf	Lcd_Write_String@a^0,c
  2046   000E16  5011               	movf	Lcd_Write_String@a^0,w,c
  2047   000E18  A4D8               	btfss	status,2,c
  2048   000E1A  0E08               	movlw	high __smallconst
  2049   000E1C  6E12               	movwf	(Lcd_Write_String@a+1)^0,c
  2050   000E1E  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2051   000E22                     
  2052                           ;ASCENSOR.c: 361:     calibrar();
  2053   000E22  EC26  F004         	call	_calibrar	;wreg free
  2054   000E26                     
  2055                           ;ASCENSOR.c: 363:     Lcd_Set_Cursor(4,12);
  2056   000E26  0E0C               	movlw	12
  2057   000E28  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  2058   000E2A  0E04               	movlw	4
  2059   000E2C  EC4A  F009         	call	_Lcd_Set_Cursor
  2060   000E30                     
  2061                           ;ASCENSOR.c: 364:     Lcd_Write_String("X=");
  2062   000E30  0E44               	movlw	low STR_4
  2063   000E32  6E11               	movwf	Lcd_Write_String@a^0,c
  2064   000E34  5011               	movf	Lcd_Write_String@a^0,w,c
  2065   000E36  A4D8               	btfss	status,2,c
  2066   000E38  0E08               	movlw	high __smallconst
  2067   000E3A  6E12               	movwf	(Lcd_Write_String@a+1)^0,c
  2068   000E3C  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2069   000E40                     
  2070                           ;ASCENSOR.c: 365:     LATDbits.LATD1=1;
  2071   000E40  828C               	bsf	140,1,c	;volatile
  2072                           
  2073                           ;ASCENSOR.c: 366:     while(acum!=SALTO){
  2074   000E42  EF33  F007         	goto	l3664
  2075   000E46                     l244:
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;ASCENSOR.c: 367:         if(PORTBbits.RB1==1){
  2079   000E46  A281               	btfss	129,1,c	;volatile
  2080   000E48  EF28  F007         	goto	u3461
  2081   000E4C  EF2A  F007         	goto	u3460
  2082   000E50                     u3461:
  2083   000E50  EF33  F007         	goto	l3664
  2084   000E54                     u3460:
  2085   000E54                     
  2086                           ; BSR set to: 0
  2087                           ;ASCENSOR.c: 368:             acum++;
  2088   000E54  4A3A               	infsnz	dejar@acum^0,f,c
  2089   000E56  2A3B               	incf	(dejar@acum+1)^0,f,c
  2090   000E58                     l246:
  2091   000E58  B281               	btfsc	129,1,c	;volatile
  2092   000E5A  EF31  F007         	goto	u3471
  2093   000E5E  EF33  F007         	goto	u3470
  2094   000E62                     u3471:
  2095   000E62  EF2C  F007         	goto	l246
  2096   000E66                     u3470:
  2097   000E66                     l3664:
  2098                           
  2099                           ;ASCENSOR.c: 366:     while(acum!=SALTO){
  2100   000E66  0100               	movlb	0	; () banked
  2101   000E68  5189               	movf	_SALTO& (0+255),w,b
  2102   000E6A  183A               	xorwf	dejar@acum^0,w,c
  2103   000E6C  E107               	bnz	u3481
  2104   000E6E  518A               	movf	(_SALTO+1)& (0+255),w,b
  2105   000E70  183B               	xorwf	(dejar@acum+1)^0,w,c
  2106   000E72  A4D8               	btfss	status,2,c
  2107   000E74  EF3E  F007         	goto	u3481
  2108   000E78  EF40  F007         	goto	u3480
  2109   000E7C                     u3481:
  2110   000E7C  EF23  F007         	goto	l244
  2111   000E80                     u3480:
  2112   000E80                     
  2113                           ; BSR set to: 0
  2114                           ;ASCENSOR.c: 372:     mostrar_variable(acum);
  2115   000E80  C03A  F036         	movff	dejar@acum,mostrar_variable@x
  2116   000E84  C03B  F037         	movff	dejar@acum+1,mostrar_variable@x+1
  2117   000E88  EC29  F00E         	call	_mostrar_variable	;wreg free
  2118   000E8C                     
  2119                           ;ASCENSOR.c: 373:     LATDbits.LATD1=0;
  2120   000E8C  928C               	bcf	140,1,c	;volatile
  2121   000E8E                     
  2122                           ;ASCENSOR.c: 374:     _delay((unsigned long)((200)*(4000000/4000.0)));
  2123   000E8E  0E02               	movlw	2
  2124   000E90  6E39               	movwf	(??_dejar+1)^0,c
  2125   000E92  0E04               	movlw	4
  2126   000E94  6E38               	movwf	??_dejar^0,c
  2127   000E96  0EBA               	movlw	186
  2128   000E98                     u3687:
  2129   000E98  2EE8               	decfsz	wreg,f,c
  2130   000E9A  D7FE               	bra	u3687
  2131   000E9C  2E38               	decfsz	??_dejar^0,f,c
  2132   000E9E  D7FC               	bra	u3687
  2133   000EA0  2E39               	decfsz	(??_dejar+1)^0,f,c
  2134   000EA2  D7FA               	bra	u3687
  2135   000EA4  D000               	nop2	
  2136   000EA6                     
  2137                           ;ASCENSOR.c: 376:     LATDbits.LATD2= 1;
  2138   000EA6  848C               	bsf	140,2,c	;volatile
  2139   000EA8                     l250:
  2140   000EA8  B48C               	btfsc	140,2,c	;volatile
  2141   000EAA  EF59  F007         	goto	u3491
  2142   000EAE  EF5B  F007         	goto	u3490
  2143   000EB2                     u3491:
  2144   000EB2  EF54  F007         	goto	l250
  2145   000EB6                     u3490:
  2146   000EB6                     
  2147                           ;ASCENSOR.c: 378:     _delay((unsigned long)((250)*(4000000/4000.0)));
  2148   000EB6  0E02               	movlw	2
  2149   000EB8  6E39               	movwf	(??_dejar+1)^0,c
  2150   000EBA  0E45               	movlw	69
  2151   000EBC  6E38               	movwf	??_dejar^0,c
  2152   000EBE  0EAA               	movlw	170
  2153   000EC0                     u3697:
  2154   000EC0  2EE8               	decfsz	wreg,f,c
  2155   000EC2  D7FE               	bra	u3697
  2156   000EC4  2E38               	decfsz	??_dejar^0,f,c
  2157   000EC6  D7FC               	bra	u3697
  2158   000EC8  2E39               	decfsz	(??_dejar+1)^0,f,c
  2159   000ECA  D7FA               	bra	u3697
  2160   000ECC                     
  2161                           ;ASCENSOR.c: 379:     LATCbits.LC0=1;
  2162   000ECC  808B               	bsf	139,0,c	;volatile
  2163   000ECE                     l253:
  2164   000ECE  BA80               	btfsc	128,5,c	;volatile
  2165   000ED0  EF6C  F007         	goto	u3501
  2166   000ED4  EF6E  F007         	goto	u3500
  2167   000ED8                     u3501:
  2168   000ED8  EF67  F007         	goto	l253
  2169   000EDC                     u3500:
  2170   000EDC                     
  2171                           ;ASCENSOR.c: 381:     _delay((unsigned long)((250)*(4000000/4000.0)));
  2172   000EDC  0E02               	movlw	2
  2173   000EDE  6E39               	movwf	(??_dejar+1)^0,c
  2174   000EE0  0E45               	movlw	69
  2175   000EE2  6E38               	movwf	??_dejar^0,c
  2176   000EE4  0EAA               	movlw	170
  2177   000EE6                     u3707:
  2178   000EE6  2EE8               	decfsz	wreg,f,c
  2179   000EE8  D7FE               	bra	u3707
  2180   000EEA  2E38               	decfsz	??_dejar^0,f,c
  2181   000EEC  D7FC               	bra	u3707
  2182   000EEE  2E39               	decfsz	(??_dejar+1)^0,f,c
  2183   000EF0  D7FA               	bra	u3707
  2184   000EF2                     
  2185                           ;ASCENSOR.c: 382:     TMR0L= 251;
  2186   000EF2  0EFB               	movlw	251
  2187   000EF4  6ED6               	movwf	214,c	;volatile
  2188   000EF6                     
  2189                           ;ASCENSOR.c: 383:     T0CONbits.TMR0ON = 1;
  2190   000EF6  8ED5               	bsf	213,7,c	;volatile
  2191   000EF8                     
  2192                           ;ASCENSOR.c: 384:     LATDbits.LATD3=1;
  2193   000EF8  868C               	bsf	140,3,c	;volatile
  2194   000EFA                     l256:
  2195   000EFA  B68C               	btfsc	140,3,c	;volatile
  2196   000EFC  EF82  F007         	goto	u3511
  2197   000F00  EF84  F007         	goto	u3510
  2198   000F04                     u3511:
  2199   000F04  EF7D  F007         	goto	l256
  2200   000F08                     u3510:
  2201   000F08                     
  2202                           ;ASCENSOR.c: 386:     _delay((unsigned long)((250)*(4000000/4000.0)));
  2203   000F08  0E02               	movlw	2
  2204   000F0A  6E39               	movwf	(??_dejar+1)^0,c
  2205   000F0C  0E45               	movlw	69
  2206   000F0E  6E38               	movwf	??_dejar^0,c
  2207   000F10  0EAA               	movlw	170
  2208   000F12                     u3717:
  2209   000F12  2EE8               	decfsz	wreg,f,c
  2210   000F14  D7FE               	bra	u3717
  2211   000F16  2E38               	decfsz	??_dejar^0,f,c
  2212   000F18  D7FC               	bra	u3717
  2213   000F1A  2E39               	decfsz	(??_dejar+1)^0,f,c
  2214   000F1C  D7FA               	bra	u3717
  2215   000F1E                     
  2216                           ;ASCENSOR.c: 387:     LATCbits.LC0=0;
  2217   000F1E  908B               	bcf	139,0,c	;volatile
  2218   000F20                     l259:
  2219   000F20  B680               	btfsc	128,3,c	;volatile
  2220   000F22  EF95  F007         	goto	u3521
  2221   000F26  EF97  F007         	goto	u3520
  2222   000F2A                     u3521:
  2223   000F2A  EF90  F007         	goto	l259
  2224   000F2E                     u3520:
  2225   000F2E                     
  2226                           ;ASCENSOR.c: 389:     _delay((unsigned long)((200)*(4000000/4000.0)));
  2227   000F2E  0E02               	movlw	2
  2228   000F30  6E39               	movwf	(??_dejar+1)^0,c
  2229   000F32  0E04               	movlw	4
  2230   000F34  6E38               	movwf	??_dejar^0,c
  2231   000F36  0EBA               	movlw	186
  2232   000F38                     u3727:
  2233   000F38  2EE8               	decfsz	wreg,f,c
  2234   000F3A  D7FE               	bra	u3727
  2235   000F3C  2E38               	decfsz	??_dejar^0,f,c
  2236   000F3E  D7FC               	bra	u3727
  2237   000F40  2E39               	decfsz	(??_dejar+1)^0,f,c
  2238   000F42  D7FA               	bra	u3727
  2239   000F44  D000               	nop2	
  2240   000F46                     
  2241                           ;ASCENSOR.c: 390:     METAL=0;
  2242   000F46  6A49               	clrf	_METAL^0,c
  2243   000F48                     
  2244                           ;ASCENSOR.c: 391:     BLANCA=0;
  2245   000F48  6A48               	clrf	_BLANCA^0,c
  2246   000F4A                     
  2247                           ;ASCENSOR.c: 392:     NEGRA=0;
  2248   000F4A  6A47               	clrf	_NEGRA^0,c
  2249   000F4C  0012               	return		;funcret
  2250   000F4E                     __end_of_dejar:
  2251                           	callstack 0
  2252                           
  2253 ;; *************** function _mostrar_variable *****************
  2254 ;; Defined at:
  2255 ;;		line 219 in file "ASCENSOR.c"
  2256 ;; Parameters:    Size  Location     Type
  2257 ;;  x               2   53[COMRAM] int 
  2258 ;; Auto vars:     Size  Location     Type
  2259 ;;  buffer         20    0[BANK0 ] unsigned char [20]
  2260 ;; Return value:  Size  Location     Type
  2261 ;;                  1    wreg      void 
  2262 ;; Registers used:
  2263 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2264 ;; Tracked objects:
  2265 ;;		On entry : 0/0
  2266 ;;		On exit  : 0/0
  2267 ;;		Unchanged: 0/0
  2268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2269 ;;      Params:         2       0       0       0       0       0       0       0       0
  2270 ;;      Locals:         0      20       0       0       0       0       0       0       0
  2271 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2272 ;;      Totals:         2      20       0       0       0       0       0       0       0
  2273 ;;Total ram usage:       22 bytes
  2274 ;; Hardware stack levels used: 1
  2275 ;; Hardware stack levels required when called: 10
  2276 ;; This function calls:
  2277 ;;		_Lcd_Write_String
  2278 ;;		_sprintf
  2279 ;; This function is called by:
  2280 ;;		_dejar
  2281 ;; This function uses a non-reentrant model
  2282 ;;
  2283                           
  2284                           	psect	text7
  2285   001C52                     __ptext7:
  2286                           	callstack 0
  2287   001C52                     _mostrar_variable:
  2288                           	callstack 19
  2289   001C52                     
  2290                           ;ASCENSOR.c: 220:     char buffer[20];;ASCENSOR.c: 221:      sprintf(buffer,"%d",x);
  2291   001C52  0E8B               	movlw	low mostrar_variable@buffer
  2292   001C54  6E26               	movwf	sprintf@s^0,c
  2293   001C56  0E47               	movlw	low STR_2
  2294   001C58  6E27               	movwf	sprintf@fmt^0,c
  2295   001C5A  C036  F028         	movff	mostrar_variable@x,?_sprintf+2
  2296   001C5E  C037  F029         	movff	mostrar_variable@x+1,?_sprintf+3
  2297   001C62  ECC9  F00D         	call	_sprintf	;wreg free
  2298   001C66                     
  2299                           ;ASCENSOR.c: 222:     Lcd_Write_String(buffer);
  2300   001C66  0E8B               	movlw	low mostrar_variable@buffer
  2301   001C68  6E11               	movwf	Lcd_Write_String@a^0,c
  2302   001C6A  6A12               	clrf	(Lcd_Write_String@a+1)^0,c
  2303   001C6C  EC39  F00C         	call	_Lcd_Write_String	;wreg free
  2304   001C70  0012               	return		;funcret
  2305   001C72                     __end_of_mostrar_variable:
  2306                           	callstack 0
  2307                           
  2308 ;; *************** function _sprintf *****************
  2309 ;; Defined at:
  2310 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_sprintf.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  s               1   37[COMRAM] PTR unsigned char 
  2313 ;;		 -> mostrar_variable@buffer(20), 
  2314 ;;  fmt             1   38[COMRAM] PTR const unsigned char 
  2315 ;;		 -> STR_2(3), 
  2316 ;; Auto vars:     Size  Location     Type
  2317 ;;  f              11   42[COMRAM] struct _IO_FILE
  2318 ;;  ret             2    0        int 
  2319 ;;  ap              1   41[COMRAM] PTR void [1]
  2320 ;;		 -> ?_sprintf(2), 
  2321 ;; Return value:  Size  Location     Type
  2322 ;;                  2   37[COMRAM] int 
  2323 ;; Registers used:
  2324 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2325 ;; Tracked objects:
  2326 ;;		On entry : 0/0
  2327 ;;		On exit  : 0/0
  2328 ;;		Unchanged: 0/0
  2329 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2330 ;;      Params:         4       0       0       0       0       0       0       0       0
  2331 ;;      Locals:        12       0       0       0       0       0       0       0       0
  2332 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2333 ;;      Totals:        16       0       0       0       0       0       0       0       0
  2334 ;;Total ram usage:       16 bytes
  2335 ;; Hardware stack levels used: 1
  2336 ;; Hardware stack levels required when called: 9
  2337 ;; This function calls:
  2338 ;;		_vfprintf
  2339 ;; This function is called by:
  2340 ;;		_mostrar_variable
  2341 ;; This function uses a non-reentrant model
  2342 ;;
  2343                           
  2344                           	psect	text8
  2345   001B92                     __ptext8:
  2346                           	callstack 0
  2347   001B92                     _sprintf:
  2348                           	callstack 19
  2349   001B92  0E28               	movlw	low (?_sprintf+2)
  2350   001B94  6E2A               	movwf	sprintf@ap^0,c
  2351   001B96  C026  F02B         	movff	sprintf@s,sprintf@f
  2352   001B9A  0E00               	movlw	0
  2353   001B9C  6E2E               	movwf	(sprintf@f+3)^0,c
  2354   001B9E  0E00               	movlw	0
  2355   001BA0  6E2D               	movwf	(sprintf@f+2)^0,c
  2356   001BA2  0E00               	movlw	0
  2357   001BA4  6E35               	movwf	(sprintf@f+10)^0,c
  2358   001BA6  0E00               	movlw	0
  2359   001BA8  6E34               	movwf	(sprintf@f+9)^0,c
  2360   001BAA  0E2B               	movlw	low sprintf@f
  2361   001BAC  6E22               	movwf	vfprintf@fp^0,c
  2362   001BAE  C027  F023         	movff	sprintf@fmt,vfprintf@fmt
  2363   001BB2  0E2A               	movlw	low sprintf@ap
  2364   001BB4  6E24               	movwf	vfprintf@ap^0,c
  2365   001BB6  EC8E  F00D         	call	_vfprintf	;wreg free
  2366   001BBA  5026               	movf	sprintf@s^0,w,c
  2367   001BBC  242D               	addwf	(sprintf@f+2)^0,w,c
  2368   001BBE  6ED9               	movwf	fsr2l,c
  2369   001BC0  6ADA               	clrf	fsr2h,c
  2370   001BC2  6ADF               	clrf	indf2,c
  2371   001BC4  0012               	return		;funcret
  2372   001BC6                     __end_of_sprintf:
  2373                           	callstack 0
  2374                           
  2375 ;; *************** function _vfprintf *****************
  2376 ;; Defined at:
  2377 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;  fp              1   33[COMRAM] PTR struct _IO_FILE
  2380 ;;		 -> sprintf@f(11), 
  2381 ;;  fmt             1   34[COMRAM] PTR const unsigned char 
  2382 ;;		 -> STR_2(3), 
  2383 ;;  ap              1   35[COMRAM] PTR PTR void 
  2384 ;;		 -> sprintf@ap(1), 
  2385 ;; Auto vars:     Size  Location     Type
  2386 ;;  cfmt            1   36[COMRAM] PTR unsigned char 
  2387 ;;		 -> STR_2(3), 
  2388 ;; Return value:  Size  Location     Type
  2389 ;;                  2   33[COMRAM] int 
  2390 ;; Registers used:
  2391 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2392 ;; Tracked objects:
  2393 ;;		On entry : 0/0
  2394 ;;		On exit  : 0/0
  2395 ;;		Unchanged: 0/0
  2396 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2397 ;;      Params:         3       0       0       0       0       0       0       0       0
  2398 ;;      Locals:         1       0       0       0       0       0       0       0       0
  2399 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2400 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2401 ;;Total ram usage:        4 bytes
  2402 ;; Hardware stack levels used: 1
  2403 ;; Hardware stack levels required when called: 8
  2404 ;; This function calls:
  2405 ;;		_vfpfcnvrt
  2406 ;; This function is called by:
  2407 ;;		_sprintf
  2408 ;; This function uses a non-reentrant model
  2409 ;;
  2410                           
  2411                           	psect	text9
  2412   001B1C                     __ptext9:
  2413                           	callstack 0
  2414   001B1C                     _vfprintf:
  2415                           	callstack 19
  2416   001B1C                     
  2417                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
  2418   001B1C  C023  F025         	movff	vfprintf@fmt,vfprintf@cfmt
  2419                           
  2420                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2421   001B20  EF9A  F00D         	goto	l3470
  2422   001B24                     l3468:
  2423                           
  2424                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
  2425   001B24  C022  F017         	movff	vfprintf@fp,vfpfcnvrt@fp
  2426   001B28  0E25               	movlw	low vfprintf@cfmt
  2427   001B2A  6E18               	movwf	vfpfcnvrt@fmt^0,c
  2428   001B2C  C024  F019         	movff	vfprintf@ap,vfpfcnvrt@ap
  2429   001B30  EC23  F006         	call	_vfpfcnvrt	;wreg free
  2430   001B34                     l3470:
  2431                           
  2432                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
  2433   001B34  C025  FFF6         	movff	vfprintf@cfmt,tblptrl
  2434   001B38                     	if	1	;There is more than 1 active tblptr byte
  2435   001B38  0E08               	movlw	high __smallconst
  2436   001B3A  6EF7               	movwf	tblptrh,c
  2437   001B3C                     	endif
  2438   001B3C                     	if	0	;tblptru may be non-zero
  2439   001B3C                     	endif
  2440   001B3C                     	if	0	;tblptru may be non-zero
  2441   001B3C                     	endif
  2442   001B3C  0008               	tblrd		*
  2443   001B3E  50F5               	movf	tablat,w,c
  2444   001B40  0900               	iorlw	0
  2445   001B42  A4D8               	btfss	status,2,c
  2446   001B44  EFA6  F00D         	goto	u3221
  2447   001B48  EFA8  F00D         	goto	u3220
  2448   001B4C                     u3221:
  2449   001B4C  EF92  F00D         	goto	l3468
  2450   001B50                     u3220:
  2451   001B50                     
  2452                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1835:  return 0;
  2453   001B50  0E00               	movlw	0
  2454   001B52  6E23               	movwf	(?_vfprintf+1)^0,c
  2455   001B54  0E00               	movlw	0
  2456   001B56  6E22               	movwf	?_vfprintf^0,c
  2457   001B58  0012               	return		;funcret
  2458   001B5A                     __end_of_vfprintf:
  2459                           	callstack 0
  2460                           
  2461 ;; *************** function _vfpfcnvrt *****************
  2462 ;; Defined at:
  2463 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c"
  2464 ;; Parameters:    Size  Location     Type
  2465 ;;  fp              1   22[COMRAM] PTR struct _IO_FILE
  2466 ;;		 -> sprintf@f(11), 
  2467 ;;  fmt             1   23[COMRAM] PTR PTR unsigned char 
  2468 ;;		 -> vfprintf@cfmt(1), 
  2469 ;;  ap              1   24[COMRAM] PTR PTR void 
  2470 ;;		 -> sprintf@ap(1), 
  2471 ;; Auto vars:     Size  Location     Type
  2472 ;;  convarg         4   28[COMRAM] struct .
  2473 ;;  c               1   32[COMRAM] unsigned char 
  2474 ;;  cp              1   27[COMRAM] PTR unsigned char 
  2475 ;;		 -> STR_2(3), 
  2476 ;;  done            1   26[COMRAM] _Bool 
  2477 ;; Return value:  Size  Location     Type
  2478 ;;                  1    wreg      void 
  2479 ;; Registers used:
  2480 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2481 ;; Tracked objects:
  2482 ;;		On entry : 0/0
  2483 ;;		On exit  : 0/0
  2484 ;;		Unchanged: 0/0
  2485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2486 ;;      Params:         3       0       0       0       0       0       0       0       0
  2487 ;;      Locals:         7       0       0       0       0       0       0       0       0
  2488 ;;      Temps:          1       0       0       0       0       0       0       0       0
  2489 ;;      Totals:        11       0       0       0       0       0       0       0       0
  2490 ;;Total ram usage:       11 bytes
  2491 ;; Hardware stack levels used: 1
  2492 ;; Hardware stack levels required when called: 7
  2493 ;; This function calls:
  2494 ;;		___awdiv
  2495 ;;		___awmod
  2496 ;;		_abs
  2497 ;;		_fputc
  2498 ;; This function is called by:
  2499 ;;		_vfprintf
  2500 ;; This function uses a non-reentrant model
  2501 ;;
  2502                           
  2503                           	psect	text10
  2504   000C46                     __ptext10:
  2505                           	callstack 0
  2506   000C46                     _vfpfcnvrt:
  2507                           	callstack 19
  2508   000C46                     
  2509                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
  2510   000C46  5018               	movf	vfpfcnvrt@fmt^0,w,c
  2511   000C48  6ED9               	movwf	fsr2l,c
  2512   000C4A  6ADA               	clrf	fsr2h,c
  2513   000C4C  CFDF FFF6          	movff	indf2,tblptrl
  2514   000C50                     	if	1	;There is more than 1 active tblptr byte
  2515   000C50  0E08               	movlw	high __smallconst
  2516   000C52  6EF7               	movwf	tblptrh,c
  2517   000C54                     	endif
  2518   000C54                     	if	0	;tblptru may be non-zero
  2519   000C54                     	endif
  2520   000C54                     	if	0	;tblptru may be non-zero
  2521   000C54                     	endif
  2522   000C54  0008               	tblrd		*
  2523   000C56  50F5               	movf	tablat,w,c
  2524   000C58  0A25               	xorlw	37
  2525   000C5A  A4D8               	btfss	status,2,c
  2526   000C5C  EF32  F006         	goto	u3081
  2527   000C60  EF34  F006         	goto	u3080
  2528   000C64                     u3081:
  2529   000C64  EFEE  F006         	goto	l3408
  2530   000C68                     u3080:
  2531   000C68                     
  2532                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
  2533   000C68  5018               	movf	vfpfcnvrt@fmt^0,w,c
  2534   000C6A  6ED9               	movwf	fsr2l,c
  2535   000C6C  6ADA               	clrf	fsr2h,c
  2536   000C6E  2ADF               	incf	indf2,f,c
  2537   000C70                     
  2538                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
  2539   000C70  0E00               	movlw	0
  2540   000C72  0100               	movlb	0	; () banked
  2541   000C74  6F84               	movwf	(_width+1)& (0+255),b
  2542   000C76  0E00               	movlw	0
  2543   000C78  6F83               	movwf	_width& (0+255),b
  2544   000C7A  C083  F044         	movff	_width,_flags
  2545   000C7E                     
  2546                           ; BSR set to: 0
  2547                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
  2548   000C7E  6985               	setf	_prec& (0+255),b
  2549   000C80  6986               	setf	(_prec+1)& (0+255),b
  2550   000C82                     
  2551                           ; BSR set to: 0
  2552                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1291:   cp = *fmt
      +                          ;
  2553   000C82  5018               	movf	vfpfcnvrt@fmt^0,w,c
  2554   000C84  6ED9               	movwf	fsr2l,c
  2555   000C86  6ADA               	clrf	fsr2h,c
  2556   000C88  50DF               	movf	indf2,w,c
  2557   000C8A  6E1C               	movwf	vfpfcnvrt@cp^0,c
  2558   000C8C                     
  2559                           ; BSR set to: 0
  2560                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1361:   if (*cp =
      +                          = 'd' || *cp == 'i') {
  2561   000C8C  C01C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2562   000C90                     	if	1	;There is more than 1 active tblptr byte
  2563   000C90  0E08               	movlw	high __smallconst
  2564   000C92  6EF7               	movwf	tblptrh,c
  2565   000C94                     	endif
  2566   000C94                     	if	0	;tblptru may be non-zero
  2567   000C94                     	endif
  2568   000C94                     	if	0	;tblptru may be non-zero
  2569   000C94                     	endif
  2570   000C94  0008               	tblrd		*
  2571   000C96  50F5               	movf	tablat,w,c
  2572   000C98  0A64               	xorlw	100
  2573   000C9A  B4D8               	btfsc	status,2,c
  2574   000C9C  EF52  F006         	goto	u3091
  2575   000CA0  EF54  F006         	goto	u3090
  2576   000CA4                     u3091:
  2577   000CA4  EF62  F006         	goto	l3378
  2578   000CA8                     u3090:
  2579   000CA8                     
  2580                           ; BSR set to: 0
  2581   000CA8  C01C  FFF6         	movff	vfpfcnvrt@cp,tblptrl
  2582   000CAC                     	if	1	;There is more than 1 active tblptr byte
  2583   000CAC  0E08               	movlw	high __smallconst
  2584   000CAE  6EF7               	movwf	tblptrh,c
  2585   000CB0                     	endif
  2586   000CB0                     	if	0	;tblptru may be non-zero
  2587   000CB0                     	endif
  2588   000CB0                     	if	0	;tblptru may be non-zero
  2589   000CB0                     	endif
  2590   000CB0  0008               	tblrd		*
  2591   000CB2  50F5               	movf	tablat,w,c
  2592   000CB4  0A69               	xorlw	105
  2593   000CB6  A4D8               	btfss	status,2,c
  2594   000CB8  EF60  F006         	goto	u3101
  2595   000CBC  EF62  F006         	goto	u3100
  2596   000CC0                     u3101:
  2597   000CC0  EFE8  F006         	goto	l3404
  2598   000CC4                     u3100:
  2599   000CC4                     l3378:
  2600                           
  2601                           ; BSR set to: 0
  2602                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1404:    convarg.
      +                          sint = (vfpf_sint_t)(int)(*(int *)__va_arg(*(int **)ap, (int)0));
  2603   000CC4  5019               	movf	vfpfcnvrt@ap^0,w,c
  2604   000CC6  6ED9               	movwf	fsr2l,c
  2605   000CC8  6ADA               	clrf	fsr2h,c
  2606   000CCA  0E02               	movlw	2
  2607   000CCC  26DF               	addwf	indf2,f,c
  2608   000CCE  5CDF               	subwf	indf2,w,c
  2609   000CD0  6ED9               	movwf	fsr2l,c
  2610   000CD2  6ADA               	clrf	fsr2h,c
  2611   000CD4  CFDE F01D          	movff	postinc2,vfpfcnvrt@convarg
  2612   000CD8  CFDE F01E          	movff	postinc2,vfpfcnvrt@convarg+1
  2613   000CDC                     
  2614                           ; BSR set to: 0
  2615                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1406:    *fmt = c
      +                          p+1;
  2616   000CDC  5018               	movf	vfpfcnvrt@fmt^0,w,c
  2617   000CDE  6ED9               	movwf	fsr2l,c
  2618   000CE0  6ADA               	clrf	fsr2h,c
  2619   000CE2  281C               	incf	vfpfcnvrt@cp^0,w,c
  2620   000CE4  6EDF               	movwf	indf2,c
  2621   000CE6                     
  2622                           ; BSR set to: 0
  2623                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1408:    c = size
      +                          of(dbuf);
  2624   000CE6  0E20               	movlw	32
  2625   000CE8  6E21               	movwf	vfpfcnvrt@c^0,c
  2626                           
  2627                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1409:    done = c
      +                          onvarg.sint < 0;
  2628   000CEA  BE1E               	btfsc	(vfpfcnvrt@convarg+1)^0,7,c
  2629   000CEC  EF7A  F006         	goto	u3111
  2630   000CF0  EF7D  F006         	goto	u3110
  2631   000CF4                     u3111:
  2632   000CF4  0E01               	movlw	1
  2633   000CF6  EF7E  F006         	goto	u3120
  2634   000CFA                     u3110:
  2635   000CFA  0E00               	movlw	0
  2636   000CFC                     u3120:
  2637   000CFC  6E1B               	movwf	vfpfcnvrt@done^0,c
  2638   000CFE                     l3384:
  2639                           
  2640                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1411:     dbuf[--
      +                          c] = abs(convarg.sint % 10) + '0';
  2641   000CFE  0621               	decf	vfpfcnvrt@c^0,f,c
  2642   000D00  5021               	movf	vfpfcnvrt@c^0,w,c
  2643   000D02  0F60               	addlw	low _dbuf
  2644   000D04  6ED9               	movwf	fsr2l,c
  2645   000D06  6ADA               	clrf	fsr2h,c
  2646   000D08  C01D  F00D         	movff	vfpfcnvrt@convarg,___awmod@dividend
  2647   000D0C  C01E  F00E         	movff	vfpfcnvrt@convarg+1,___awmod@dividend+1
  2648   000D10  0E00               	movlw	0
  2649   000D12  6E10               	movwf	(___awmod@divisor+1)^0,c
  2650   000D14  0E0A               	movlw	10
  2651   000D16  6E0F               	movwf	___awmod@divisor^0,c
  2652   000D18  EC7D  F00A         	call	___awmod	;wreg free
  2653   000D1C  C00D  F013         	movff	?___awmod,abs@a
  2654   000D20  C00E  F014         	movff	?___awmod+1,abs@a+1
  2655   000D24  ECE3  F00D         	call	_abs	;wreg free
  2656   000D28  5013               	movf	?_abs^0,w,c
  2657   000D2A  0F30               	addlw	48
  2658   000D2C  6EDF               	movwf	indf2,c
  2659   000D2E                     
  2660                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1412:     convarg
      +                          .sint /= 10;
  2661   000D2E  C01D  F00D         	movff	vfpfcnvrt@convarg,___awdiv@dividend
  2662   000D32  C01E  F00E         	movff	vfpfcnvrt@convarg+1,___awdiv@dividend+1
  2663   000D36  0E00               	movlw	0
  2664   000D38  6E10               	movwf	(___awdiv@divisor+1)^0,c
  2665   000D3A  0E0A               	movlw	10
  2666   000D3C  6E0F               	movwf	___awdiv@divisor^0,c
  2667   000D3E  EC1C  F00A         	call	___awdiv	;wreg free
  2668   000D42  C00D  F01D         	movff	?___awdiv,vfpfcnvrt@convarg
  2669   000D46  C00E  F01E         	movff	?___awdiv+1,vfpfcnvrt@convarg+1
  2670   000D4A                     
  2671                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1416:    } while 
      +                          (convarg.sint != 0 && c != 0);
  2672   000D4A  501D               	movf	vfpfcnvrt@convarg^0,w,c
  2673   000D4C  101E               	iorwf	(vfpfcnvrt@convarg+1)^0,w,c
  2674   000D4E  B4D8               	btfsc	status,2,c
  2675   000D50  EFAC  F006         	goto	u3131
  2676   000D54  EFAE  F006         	goto	u3130
  2677   000D58                     u3131:
  2678   000D58  EFB6  F006         	goto	l3392
  2679   000D5C                     u3130:
  2680   000D5C  5021               	movf	vfpfcnvrt@c^0,w,c
  2681   000D5E  A4D8               	btfss	status,2,c
  2682   000D60  EFB4  F006         	goto	u3141
  2683   000D64  EFB6  F006         	goto	u3140
  2684   000D68                     u3141:
  2685   000D68  EF7F  F006         	goto	l3384
  2686   000D6C                     u3140:
  2687   000D6C                     l3392:
  2688                           
  2689                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1417:    if (c !=
      +                           0 && done) {
  2690   000D6C  5021               	movf	vfpfcnvrt@c^0,w,c
  2691   000D6E  B4D8               	btfsc	status,2,c
  2692   000D70  EFBC  F006         	goto	u3151
  2693   000D74  EFBE  F006         	goto	u3150
  2694   000D78                     u3151:
  2695   000D78  EFDD  F006         	goto	l3402
  2696   000D7C                     u3150:
  2697   000D7C  501B               	movf	vfpfcnvrt@done^0,w,c
  2698   000D7E  B4D8               	btfsc	status,2,c
  2699   000D80  EFC4  F006         	goto	u3161
  2700   000D84  EFC6  F006         	goto	u3160
  2701   000D88                     u3161:
  2702   000D88  EFDD  F006         	goto	l3402
  2703   000D8C                     u3160:
  2704   000D8C                     
  2705                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1418:     dbuf[--
      +                          c] = '-';
  2706   000D8C  0621               	decf	vfpfcnvrt@c^0,f,c
  2707   000D8E  5021               	movf	vfpfcnvrt@c^0,w,c
  2708   000D90  0F60               	addlw	low _dbuf
  2709   000D92  6ED9               	movwf	fsr2l,c
  2710   000D94  6ADA               	clrf	fsr2h,c
  2711   000D96  0E2D               	movlw	45
  2712   000D98  6EDF               	movwf	indf2,c
  2713   000D9A  EFDD  F006         	goto	l3402
  2714   000D9E                     l3398:
  2715                           
  2716                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1424:     fputc(d
      +                          buf[c++], fp);
  2717   000D9E  5021               	movf	vfpfcnvrt@c^0,w,c
  2718   000DA0  0F60               	addlw	low _dbuf
  2719   000DA2  6ED9               	movwf	fsr2l,c
  2720   000DA4  6ADA               	clrf	fsr2h,c
  2721   000DA6  50DF               	movf	indf2,w,c
  2722   000DA8  6E1A               	movwf	??_vfpfcnvrt^0,c
  2723   000DAA  501A               	movf	??_vfpfcnvrt^0,w,c
  2724   000DAC  6E0D               	movwf	fputc@c^0,c
  2725   000DAE  6A0E               	clrf	(fputc@c+1)^0,c
  2726   000DB0  C017  F00F         	movff	vfpfcnvrt@fp,fputc@fp
  2727   000DB4  ECD4  F00A         	call	_fputc	;wreg free
  2728   000DB8  2A21               	incf	vfpfcnvrt@c^0,f,c
  2729   000DBA                     l3402:
  2730                           
  2731                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1423:    while (c
      +                           != sizeof(dbuf)) {
  2732   000DBA  0E20               	movlw	32
  2733   000DBC  1821               	xorwf	vfpfcnvrt@c^0,w,c
  2734   000DBE  A4D8               	btfss	status,2,c
  2735   000DC0  EFE4  F006         	goto	u3171
  2736   000DC4  EFE6  F006         	goto	u3170
  2737   000DC8                     u3171:
  2738   000DC8  EFCF  F006         	goto	l3398
  2739   000DCC                     u3170:
  2740   000DCC  EFFF  F006         	goto	l1126
  2741   000DD0                     l3404:
  2742                           
  2743                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  2744   000DD0  5018               	movf	vfpfcnvrt@fmt^0,w,c
  2745   000DD2  6ED9               	movwf	fsr2l,c
  2746   000DD4  6ADA               	clrf	fsr2h,c
  2747   000DD6  2ADF               	incf	indf2,f,c
  2748   000DD8  EFFF  F006         	goto	l1126
  2749   000DDC                     l3408:
  2750                           
  2751                           ;C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  2752   000DDC  5018               	movf	vfpfcnvrt@fmt^0,w,c
  2753   000DDE  6ED9               	movwf	fsr2l,c
  2754   000DE0  6ADA               	clrf	fsr2h,c
  2755   000DE2  CFDF FFF6          	movff	indf2,tblptrl
  2756   000DE6                     	if	1	;There is more than 1 active tblptr byte
  2757   000DE6  0E08               	movlw	high __smallconst
  2758   000DE8  6EF7               	movwf	tblptrh,c
  2759   000DEA                     	endif
  2760   000DEA                     	if	0	;tblptru may be non-zero
  2761   000DEA                     	endif
  2762   000DEA                     	if	0	;tblptru may be non-zero
  2763   000DEA                     	endif
  2764   000DEA  0008               	tblrd		*
  2765   000DEC  50F5               	movf	tablat,w,c
  2766   000DEE  6E0D               	movwf	fputc@c^0,c
  2767   000DF0  6A0E               	clrf	(fputc@c+1)^0,c
  2768   000DF2  C017  F00F         	movff	vfpfcnvrt@fp,fputc@fp
  2769   000DF6  ECD4  F00A         	call	_fputc	;wreg free
  2770   000DFA  EFE8  F006         	goto	l3404
  2771   000DFE                     l1126:
  2772   000DFE  0012               	return		;funcret
  2773   000E00                     __end_of_vfpfcnvrt:
  2774                           	callstack 0
  2775                           
  2776 ;; *************** function _fputc *****************
  2777 ;; Defined at:
  2778 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\nf_fputc.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;  c               2   12[COMRAM] int 
  2781 ;;  fp              1   14[COMRAM] PTR struct _IO_FILE
  2782 ;;		 -> sprintf@f(11), 
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;		None
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  2   12[COMRAM] int 
  2787 ;; Registers used:
  2788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2794 ;;      Params:         3       0       0       0       0       0       0       0       0
  2795 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2796 ;;      Temps:          5       0       0       0       0       0       0       0       0
  2797 ;;      Totals:         8       0       0       0       0       0       0       0       0
  2798 ;;Total ram usage:        8 bytes
  2799 ;; Hardware stack levels used: 1
  2800 ;; Hardware stack levels required when called: 6
  2801 ;; This function calls:
  2802 ;;		_putch
  2803 ;; This function is called by:
  2804 ;;		_vfpfcnvrt
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           	psect	text11
  2809   0015A8                     __ptext11:
  2810                           	callstack 0
  2811   0015A8                     _fputc:
  2812                           	callstack 19
  2813   0015A8  500F               	movf	fputc@fp^0,w,c
  2814   0015AA  B4D8               	btfsc	status,2,c
  2815   0015AC  EFDA  F00A         	goto	u3031
  2816   0015B0  EFDC  F00A         	goto	u3030
  2817   0015B4                     u3031:
  2818   0015B4  EFE4  F00A         	goto	l3340
  2819   0015B8                     u3030:
  2820   0015B8  500F               	movf	fputc@fp^0,w,c
  2821   0015BA  A4D8               	btfss	status,2,c
  2822   0015BC  EFE2  F00A         	goto	u3041
  2823   0015C0  EFE4  F00A         	goto	u3040
  2824   0015C4                     u3041:
  2825   0015C4  EFE9  F00A         	goto	l3342
  2826   0015C8                     u3040:
  2827   0015C8                     l3340:
  2828   0015C8  500D               	movf	fputc@c^0,w,c
  2829   0015CA  ECB6  F00E         	call	_putch
  2830   0015CE  EF28  F00B         	goto	l1151
  2831   0015D2                     l3342:
  2832   0015D2  500F               	movf	fputc@fp^0,w,c
  2833   0015D4  6ED9               	movwf	fsr2l,c
  2834   0015D6  6ADA               	clrf	fsr2h,c
  2835   0015D8  0E09               	movlw	9
  2836   0015DA  26D9               	addwf	fsr2l,f,c
  2837   0015DC  50DE               	movf	postinc2,w,c
  2838   0015DE  10DE               	iorwf	postinc2,w,c
  2839   0015E0  B4D8               	btfsc	status,2,c
  2840   0015E2  EFF5  F00A         	goto	u3051
  2841   0015E6  EFF7  F00A         	goto	u3050
  2842   0015EA                     u3051:
  2843   0015EA  EF10  F00B         	goto	l3346
  2844   0015EE                     u3050:
  2845   0015EE  500F               	movf	fputc@fp^0,w,c
  2846   0015F0  6ED9               	movwf	fsr2l,c
  2847   0015F2  6ADA               	clrf	fsr2h,c
  2848   0015F4  0E09               	movlw	9
  2849   0015F6  26D9               	addwf	fsr2l,f,c
  2850   0015F8  500F               	movf	fputc@fp^0,w,c
  2851   0015FA  6EE1               	movwf	fsr1l,c
  2852   0015FC  6AE2               	clrf	fsr1h,c
  2853   0015FE  0E02               	movlw	2
  2854   001600  26E1               	addwf	fsr1l,f,c
  2855   001602  50DE               	movf	postinc2,w,c
  2856   001604  5CE6               	subwf	postinc1,w,c
  2857   001606  50E6               	movf	postinc1,w,c
  2858   001608  0A80               	xorlw	128
  2859   00160A  6E14               	movwf	(??_fputc+4)^0,c
  2860   00160C  50DE               	movf	postinc2,w,c
  2861   00160E  0A80               	xorlw	128
  2862   001610  5814               	subwfb	(??_fputc+4)^0,w,c
  2863   001612  B0D8               	btfsc	status,0,c
  2864   001614  EF0E  F00B         	goto	u3061
  2865   001618  EF10  F00B         	goto	u3060
  2866   00161C                     u3061:
  2867   00161C  EF28  F00B         	goto	l1151
  2868   001620                     u3060:
  2869   001620                     l3346:
  2870   001620  500F               	movf	fputc@fp^0,w,c
  2871   001622  6ED9               	movwf	fsr2l,c
  2872   001624  6ADA               	clrf	fsr2h,c
  2873   001626  0E02               	movlw	2
  2874   001628  26D9               	addwf	fsr2l,f,c
  2875   00162A  50DF               	movf	indf2,w,c
  2876   00162C  6E10               	movwf	??_fputc^0,c
  2877   00162E  500F               	movf	fputc@fp^0,w,c
  2878   001630  6ED9               	movwf	fsr2l,c
  2879   001632  6ADA               	clrf	fsr2h,c
  2880   001634  50DF               	movf	indf2,w,c
  2881   001636  2410               	addwf	??_fputc^0,w,c
  2882   001638  6ED9               	movwf	fsr2l,c
  2883   00163A  6ADA               	clrf	fsr2h,c
  2884   00163C  C00D  FFDF         	movff	fputc@c,indf2
  2885   001640  500F               	movf	fputc@fp^0,w,c
  2886   001642  6ED9               	movwf	fsr2l,c
  2887   001644  6ADA               	clrf	fsr2h,c
  2888   001646  0E02               	movlw	2
  2889   001648  26D9               	addwf	fsr2l,f,c
  2890   00164A  2ADE               	incf	postinc2,f,c
  2891   00164C  0E00               	movlw	0
  2892   00164E  22DD               	addwfc	postdec2,f,c
  2893   001650                     l1151:
  2894   001650  0012               	return		;funcret
  2895   001652                     __end_of_fputc:
  2896                           	callstack 0
  2897                           
  2898 ;; *************** function _putch *****************
  2899 ;; Defined at:
  2900 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\putch.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  c               1    wreg     unsigned char 
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;  c               1    0[COMRAM] unsigned char 
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      void 
  2907 ;; Registers used:
  2908 ;;		wreg
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2914 ;;      Params:         0       0       0       0       0       0       0       0       0
  2915 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2916 ;;      Temps:          0       0       0       0       0       0       0       0       0
  2917 ;;      Totals:         0       0       0       0       0       0       0       0       0
  2918 ;;Total ram usage:        0 bytes
  2919 ;; Hardware stack levels used: 1
  2920 ;; Hardware stack levels required when called: 5
  2921 ;; This function calls:
  2922 ;;		Nothing
  2923 ;; This function is called by:
  2924 ;;		_fputc
  2925 ;; This function uses a non-reentrant model
  2926 ;;
  2927                           
  2928                           	psect	text12
  2929   001D6C                     __ptext12:
  2930                           	callstack 0
  2931   001D6C                     _putch:
  2932                           	callstack 19
  2933   001D6C  0012               	return		;funcret
  2934   001D6E                     __end_of_putch:
  2935                           	callstack 0
  2936                           
  2937 ;; *************** function _abs *****************
  2938 ;; Defined at:
  2939 ;;		line 1 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\abs.c"
  2940 ;; Parameters:    Size  Location     Type
  2941 ;;  a               2   18[COMRAM] int 
  2942 ;; Auto vars:     Size  Location     Type
  2943 ;;		None
  2944 ;; Return value:  Size  Location     Type
  2945 ;;                  2   18[COMRAM] int 
  2946 ;; Registers used:
  2947 ;;		wreg, status,2, status,0
  2948 ;; Tracked objects:
  2949 ;;		On entry : 0/0
  2950 ;;		On exit  : 0/0
  2951 ;;		Unchanged: 0/0
  2952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  2953 ;;      Params:         2       0       0       0       0       0       0       0       0
  2954 ;;      Locals:         0       0       0       0       0       0       0       0       0
  2955 ;;      Temps:          2       0       0       0       0       0       0       0       0
  2956 ;;      Totals:         4       0       0       0       0       0       0       0       0
  2957 ;;Total ram usage:        4 bytes
  2958 ;; Hardware stack levels used: 1
  2959 ;; Hardware stack levels required when called: 5
  2960 ;; This function calls:
  2961 ;;		Nothing
  2962 ;; This function is called by:
  2963 ;;		_vfpfcnvrt
  2964 ;; This function uses a non-reentrant model
  2965 ;;
  2966                           
  2967                           	psect	text13
  2968   001BC6                     __ptext13:
  2969                           	callstack 0
  2970   001BC6                     _abs:
  2971                           	callstack 20
  2972   001BC6  BE14               	btfsc	(abs@a+1)^0,7,c
  2973   001BC8  EFE8  F00D         	goto	u3071
  2974   001BCC  EFEA  F00D         	goto	u3070
  2975   001BD0                     u3071:
  2976   001BD0  EFF0  F00D         	goto	l1136
  2977   001BD4                     u3070:
  2978   001BD4  C013  F013         	movff	abs@a,?_abs
  2979   001BD8  C014  F014         	movff	abs@a+1,?_abs+1
  2980   001BDC  EFFC  F00D         	goto	l1139
  2981   001BE0                     l1136:
  2982   001BE0  C013  F015         	movff	abs@a,??_abs
  2983   001BE4  C014  F016         	movff	abs@a+1,??_abs+1
  2984   001BE8  1E15               	comf	??_abs^0,f,c
  2985   001BEA  1E16               	comf	(??_abs+1)^0,f,c
  2986   001BEC  4A15               	infsnz	??_abs^0,f,c
  2987   001BEE  2A16               	incf	(??_abs+1)^0,f,c
  2988   001BF0  C015  F013         	movff	??_abs,?_abs
  2989   001BF4  C016  F014         	movff	??_abs+1,?_abs+1
  2990   001BF8                     l1139:
  2991   001BF8  0012               	return		;funcret
  2992   001BFA                     __end_of_abs:
  2993                           	callstack 0
  2994                           
  2995 ;; *************** function ___awmod *****************
  2996 ;; Defined at:
  2997 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awmod.c"
  2998 ;; Parameters:    Size  Location     Type
  2999 ;;  dividend        2   12[COMRAM] int 
  3000 ;;  divisor         2   14[COMRAM] int 
  3001 ;; Auto vars:     Size  Location     Type
  3002 ;;  sign            1   17[COMRAM] unsigned char 
  3003 ;;  counter         1   16[COMRAM] unsigned char 
  3004 ;; Return value:  Size  Location     Type
  3005 ;;                  2   12[COMRAM] int 
  3006 ;; Registers used:
  3007 ;;		wreg, status,2, status,0
  3008 ;; Tracked objects:
  3009 ;;		On entry : 0/0
  3010 ;;		On exit  : 0/0
  3011 ;;		Unchanged: 0/0
  3012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3013 ;;      Params:         4       0       0       0       0       0       0       0       0
  3014 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3015 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3016 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3017 ;;Total ram usage:        6 bytes
  3018 ;; Hardware stack levels used: 1
  3019 ;; Hardware stack levels required when called: 5
  3020 ;; This function calls:
  3021 ;;		Nothing
  3022 ;; This function is called by:
  3023 ;;		_vfpfcnvrt
  3024 ;; This function uses a non-reentrant model
  3025 ;;
  3026                           
  3027                           	psect	text14
  3028   0014FA                     __ptext14:
  3029                           	callstack 0
  3030   0014FA                     ___awmod:
  3031                           	callstack 20
  3032   0014FA  6A12               	clrf	___awmod@sign^0,c
  3033   0014FC  BE0E               	btfsc	(___awmod@dividend+1)^0,7,c
  3034   0014FE  EF85  F00A         	goto	u2970
  3035   001502  EF83  F00A         	goto	u2971
  3036   001506                     u2971:
  3037   001506  EF8B  F00A         	goto	l3308
  3038   00150A                     u2970:
  3039   00150A  6C0D               	negf	___awmod@dividend^0,c
  3040   00150C  1E0E               	comf	(___awmod@dividend+1)^0,f,c
  3041   00150E  B0D8               	btfsc	status,0,c
  3042   001510  2A0E               	incf	(___awmod@dividend+1)^0,f,c
  3043   001512  0E01               	movlw	1
  3044   001514  6E12               	movwf	___awmod@sign^0,c
  3045   001516                     l3308:
  3046   001516  BE10               	btfsc	(___awmod@divisor+1)^0,7,c
  3047   001518  EF92  F00A         	goto	u2980
  3048   00151C  EF90  F00A         	goto	u2981
  3049   001520                     u2981:
  3050   001520  EF96  F00A         	goto	l3312
  3051   001524                     u2980:
  3052   001524  6C0F               	negf	___awmod@divisor^0,c
  3053   001526  1E10               	comf	(___awmod@divisor+1)^0,f,c
  3054   001528  B0D8               	btfsc	status,0,c
  3055   00152A  2A10               	incf	(___awmod@divisor+1)^0,f,c
  3056   00152C                     l3312:
  3057   00152C  500F               	movf	___awmod@divisor^0,w,c
  3058   00152E  1010               	iorwf	(___awmod@divisor+1)^0,w,c
  3059   001530  B4D8               	btfsc	status,2,c
  3060   001532  EF9D  F00A         	goto	u2991
  3061   001536  EF9F  F00A         	goto	u2990
  3062   00153A                     u2991:
  3063   00153A  EFC3  F00A         	goto	l3328
  3064   00153E                     u2990:
  3065   00153E  0E01               	movlw	1
  3066   001540  6E11               	movwf	___awmod@counter^0,c
  3067   001542  EFA7  F00A         	goto	l3318
  3068   001546                     l3316:
  3069   001546  90D8               	bcf	status,0,c
  3070   001548  360F               	rlcf	___awmod@divisor^0,f,c
  3071   00154A  3610               	rlcf	(___awmod@divisor+1)^0,f,c
  3072   00154C  2A11               	incf	___awmod@counter^0,f,c
  3073   00154E                     l3318:
  3074   00154E  AE10               	btfss	(___awmod@divisor+1)^0,7,c
  3075   001550  EFAC  F00A         	goto	u3001
  3076   001554  EFAE  F00A         	goto	u3000
  3077   001558                     u3001:
  3078   001558  EFA3  F00A         	goto	l3316
  3079   00155C                     u3000:
  3080   00155C                     l3320:
  3081   00155C  500F               	movf	___awmod@divisor^0,w,c
  3082   00155E  5C0D               	subwf	___awmod@dividend^0,w,c
  3083   001560  5010               	movf	(___awmod@divisor+1)^0,w,c
  3084   001562  580E               	subwfb	(___awmod@dividend+1)^0,w,c
  3085   001564  A0D8               	btfss	status,0,c
  3086   001566  EFB7  F00A         	goto	u3011
  3087   00156A  EFB9  F00A         	goto	u3010
  3088   00156E                     u3011:
  3089   00156E  EFBD  F00A         	goto	l3324
  3090   001572                     u3010:
  3091   001572  500F               	movf	___awmod@divisor^0,w,c
  3092   001574  5E0D               	subwf	___awmod@dividend^0,f,c
  3093   001576  5010               	movf	(___awmod@divisor+1)^0,w,c
  3094   001578  5A0E               	subwfb	(___awmod@dividend+1)^0,f,c
  3095   00157A                     l3324:
  3096   00157A  90D8               	bcf	status,0,c
  3097   00157C  3210               	rrcf	(___awmod@divisor+1)^0,f,c
  3098   00157E  320F               	rrcf	___awmod@divisor^0,f,c
  3099   001580  2E11               	decfsz	___awmod@counter^0,f,c
  3100   001582  EFAE  F00A         	goto	l3320
  3101   001586                     l3328:
  3102   001586  5012               	movf	___awmod@sign^0,w,c
  3103   001588  B4D8               	btfsc	status,2,c
  3104   00158A  EFC9  F00A         	goto	u3021
  3105   00158E  EFCB  F00A         	goto	u3020
  3106   001592                     u3021:
  3107   001592  EFCF  F00A         	goto	l3332
  3108   001596                     u3020:
  3109   001596  6C0D               	negf	___awmod@dividend^0,c
  3110   001598  1E0E               	comf	(___awmod@dividend+1)^0,f,c
  3111   00159A  B0D8               	btfsc	status,0,c
  3112   00159C  2A0E               	incf	(___awmod@dividend+1)^0,f,c
  3113   00159E                     l3332:
  3114   00159E  C00D  F00D         	movff	___awmod@dividend,?___awmod
  3115   0015A2  C00E  F00E         	movff	___awmod@dividend+1,?___awmod+1
  3116   0015A6  0012               	return		;funcret
  3117   0015A8                     __end_of___awmod:
  3118                           	callstack 0
  3119                           
  3120 ;; *************** function ___awdiv *****************
  3121 ;; Defined at:
  3122 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v3.00\pic\sources\c99\common\awdiv.c"
  3123 ;; Parameters:    Size  Location     Type
  3124 ;;  dividend        2   12[COMRAM] int 
  3125 ;;  divisor         2   14[COMRAM] int 
  3126 ;; Auto vars:     Size  Location     Type
  3127 ;;  quotient        2   18[COMRAM] int 
  3128 ;;  sign            1   17[COMRAM] unsigned char 
  3129 ;;  counter         1   16[COMRAM] unsigned char 
  3130 ;; Return value:  Size  Location     Type
  3131 ;;                  2   12[COMRAM] int 
  3132 ;; Registers used:
  3133 ;;		wreg, status,2, status,0
  3134 ;; Tracked objects:
  3135 ;;		On entry : 0/0
  3136 ;;		On exit  : 0/0
  3137 ;;		Unchanged: 0/0
  3138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3139 ;;      Params:         4       0       0       0       0       0       0       0       0
  3140 ;;      Locals:         4       0       0       0       0       0       0       0       0
  3141 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3142 ;;      Totals:         8       0       0       0       0       0       0       0       0
  3143 ;;Total ram usage:        8 bytes
  3144 ;; Hardware stack levels used: 1
  3145 ;; Hardware stack levels required when called: 5
  3146 ;; This function calls:
  3147 ;;		Nothing
  3148 ;; This function is called by:
  3149 ;;		_vfpfcnvrt
  3150 ;; This function uses a non-reentrant model
  3151 ;;
  3152                           
  3153                           	psect	text15
  3154   001438                     __ptext15:
  3155                           	callstack 0
  3156   001438                     ___awdiv:
  3157                           	callstack 20
  3158   001438  6A12               	clrf	___awdiv@sign^0,c
  3159   00143A  BE10               	btfsc	(___awdiv@divisor+1)^0,7,c
  3160   00143C  EF24  F00A         	goto	u2910
  3161   001440  EF22  F00A         	goto	u2911
  3162   001444                     u2911:
  3163   001444  EF2A  F00A         	goto	l3264
  3164   001448                     u2910:
  3165   001448  6C0F               	negf	___awdiv@divisor^0,c
  3166   00144A  1E10               	comf	(___awdiv@divisor+1)^0,f,c
  3167   00144C  B0D8               	btfsc	status,0,c
  3168   00144E  2A10               	incf	(___awdiv@divisor+1)^0,f,c
  3169   001450  0E01               	movlw	1
  3170   001452  6E12               	movwf	___awdiv@sign^0,c
  3171   001454                     l3264:
  3172   001454  BE0E               	btfsc	(___awdiv@dividend+1)^0,7,c
  3173   001456  EF31  F00A         	goto	u2920
  3174   00145A  EF2F  F00A         	goto	u2921
  3175   00145E                     u2921:
  3176   00145E  EF37  F00A         	goto	l3270
  3177   001462                     u2920:
  3178   001462  6C0D               	negf	___awdiv@dividend^0,c
  3179   001464  1E0E               	comf	(___awdiv@dividend+1)^0,f,c
  3180   001466  B0D8               	btfsc	status,0,c
  3181   001468  2A0E               	incf	(___awdiv@dividend+1)^0,f,c
  3182   00146A  0E01               	movlw	1
  3183   00146C  1A12               	xorwf	___awdiv@sign^0,f,c
  3184   00146E                     l3270:
  3185   00146E  0E00               	movlw	0
  3186   001470  6E14               	movwf	(___awdiv@quotient+1)^0,c
  3187   001472  0E00               	movlw	0
  3188   001474  6E13               	movwf	___awdiv@quotient^0,c
  3189   001476  500F               	movf	___awdiv@divisor^0,w,c
  3190   001478  1010               	iorwf	(___awdiv@divisor+1)^0,w,c
  3191   00147A  B4D8               	btfsc	status,2,c
  3192   00147C  EF42  F00A         	goto	u2931
  3193   001480  EF44  F00A         	goto	u2930
  3194   001484                     u2931:
  3195   001484  EF6C  F00A         	goto	l3292
  3196   001488                     u2930:
  3197   001488  0E01               	movlw	1
  3198   00148A  6E11               	movwf	___awdiv@counter^0,c
  3199   00148C  EF4C  F00A         	goto	l3278
  3200   001490                     l3276:
  3201   001490  90D8               	bcf	status,0,c
  3202   001492  360F               	rlcf	___awdiv@divisor^0,f,c
  3203   001494  3610               	rlcf	(___awdiv@divisor+1)^0,f,c
  3204   001496  2A11               	incf	___awdiv@counter^0,f,c
  3205   001498                     l3278:
  3206   001498  AE10               	btfss	(___awdiv@divisor+1)^0,7,c
  3207   00149A  EF51  F00A         	goto	u2941
  3208   00149E  EF53  F00A         	goto	u2940
  3209   0014A2                     u2941:
  3210   0014A2  EF48  F00A         	goto	l3276
  3211   0014A6                     u2940:
  3212   0014A6                     l3280:
  3213   0014A6  90D8               	bcf	status,0,c
  3214   0014A8  3613               	rlcf	___awdiv@quotient^0,f,c
  3215   0014AA  3614               	rlcf	(___awdiv@quotient+1)^0,f,c
  3216   0014AC  500F               	movf	___awdiv@divisor^0,w,c
  3217   0014AE  5C0D               	subwf	___awdiv@dividend^0,w,c
  3218   0014B0  5010               	movf	(___awdiv@divisor+1)^0,w,c
  3219   0014B2  580E               	subwfb	(___awdiv@dividend+1)^0,w,c
  3220   0014B4  A0D8               	btfss	status,0,c
  3221   0014B6  EF5F  F00A         	goto	u2951
  3222   0014BA  EF61  F00A         	goto	u2950
  3223   0014BE                     u2951:
  3224   0014BE  EF66  F00A         	goto	l3288
  3225   0014C2                     u2950:
  3226   0014C2  500F               	movf	___awdiv@divisor^0,w,c
  3227   0014C4  5E0D               	subwf	___awdiv@dividend^0,f,c
  3228   0014C6  5010               	movf	(___awdiv@divisor+1)^0,w,c
  3229   0014C8  5A0E               	subwfb	(___awdiv@dividend+1)^0,f,c
  3230   0014CA  8013               	bsf	___awdiv@quotient^0,0,c
  3231   0014CC                     l3288:
  3232   0014CC  90D8               	bcf	status,0,c
  3233   0014CE  3210               	rrcf	(___awdiv@divisor+1)^0,f,c
  3234   0014D0  320F               	rrcf	___awdiv@divisor^0,f,c
  3235   0014D2  2E11               	decfsz	___awdiv@counter^0,f,c
  3236   0014D4  EF53  F00A         	goto	l3280
  3237   0014D8                     l3292:
  3238   0014D8  5012               	movf	___awdiv@sign^0,w,c
  3239   0014DA  B4D8               	btfsc	status,2,c
  3240   0014DC  EF72  F00A         	goto	u2961
  3241   0014E0  EF74  F00A         	goto	u2960
  3242   0014E4                     u2961:
  3243   0014E4  EF78  F00A         	goto	l3296
  3244   0014E8                     u2960:
  3245   0014E8  6C13               	negf	___awdiv@quotient^0,c
  3246   0014EA  1E14               	comf	(___awdiv@quotient+1)^0,f,c
  3247   0014EC  B0D8               	btfsc	status,0,c
  3248   0014EE  2A14               	incf	(___awdiv@quotient+1)^0,f,c
  3249   0014F0                     l3296:
  3250   0014F0  C013  F00D         	movff	___awdiv@quotient,?___awdiv
  3251   0014F4  C014  F00E         	movff	___awdiv@quotient+1,?___awdiv+1
  3252   0014F8  0012               	return		;funcret
  3253   0014FA                     __end_of___awdiv:
  3254                           	callstack 0
  3255                           
  3256 ;; *************** function _Lcd_Write_String *****************
  3257 ;; Defined at:
  3258 ;;		line 104 in file "lcd.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;  a               2   16[COMRAM] PTR const unsigned char 
  3261 ;;		 -> STR_8(7), STR_7(6), STR_6(8), STR_5(7), 
  3262 ;;		 -> STR_4(3), STR_3(13), mostrar_variable@buffer(20), STR_1(10), 
  3263 ;; Auto vars:     Size  Location     Type
  3264 ;;  i               2   20[COMRAM] int 
  3265 ;; Return value:  Size  Location     Type
  3266 ;;                  1    wreg      void 
  3267 ;; Registers used:
  3268 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  3269 ;; Tracked objects:
  3270 ;;		On entry : 0/0
  3271 ;;		On exit  : 0/0
  3272 ;;		Unchanged: 0/0
  3273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3274 ;;      Params:         2       0       0       0       0       0       0       0       0
  3275 ;;      Locals:         2       0       0       0       0       0       0       0       0
  3276 ;;      Temps:          2       0       0       0       0       0       0       0       0
  3277 ;;      Totals:         6       0       0       0       0       0       0       0       0
  3278 ;;Total ram usage:        6 bytes
  3279 ;; Hardware stack levels used: 1
  3280 ;; Hardware stack levels required when called: 7
  3281 ;; This function calls:
  3282 ;;		_Lcd_Write_Char
  3283 ;; This function is called by:
  3284 ;;		_detectar
  3285 ;;		_mostrar_variable
  3286 ;;		_dejar
  3287 ;;		_main
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text16
  3292   001872                     __ptext16:
  3293                           	callstack 0
  3294   001872                     _Lcd_Write_String:
  3295                           	callstack 22
  3296   001872                     
  3297                           ;lcd.c: 104: void Lcd_Write_String(const char *a);lcd.c: 105: {;lcd.c: 106:     int i;;l
      +                          cd.c: 107:     for(i=0;a[i]!='\0';i++)
  3298   001872  0E00               	movlw	0
  3299   001874  6E16               	movwf	(Lcd_Write_String@i+1)^0,c
  3300   001876  0E00               	movlw	0
  3301   001878  6E15               	movwf	Lcd_Write_String@i^0,c
  3302   00187A  EF59  F00C         	goto	l3482
  3303   00187E                     l3478:
  3304                           
  3305                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
  3306   00187E  5015               	movf	Lcd_Write_String@i^0,w,c
  3307   001880  2411               	addwf	Lcd_Write_String@a^0,w,c
  3308   001882  6E13               	movwf	??_Lcd_Write_String^0,c
  3309   001884  5016               	movf	(Lcd_Write_String@i+1)^0,w,c
  3310   001886  2012               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  3311   001888  6E14               	movwf	(??_Lcd_Write_String+1)^0,c
  3312   00188A  C013  FFF6         	movff	??_Lcd_Write_String,tblptrl
  3313   00188E  C014  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  3314   001892  6AF8               	clrf	tblptru,c
  3315   001894  0E07               	movlw	(high __ramtop+-1)
  3316   001896  64F7               	cpfsgt	tblptrh,c
  3317   001898  D003               	bra	u3237
  3318   00189A  0008               	tblrd		*
  3319   00189C  50F5               	movf	tablat,w,c
  3320   00189E  D005               	bra	u3230
  3321   0018A0                     u3237:
  3322   0018A0  CFF6 FFE1          	movff	tblptrl,fsr1l
  3323   0018A4  CFF7 FFE2          	movff	tblptrh,fsr1h
  3324   0018A8  50E7               	movf	indf1,w,c
  3325   0018AA                     u3230:
  3326   0018AA  ECAD  F00D         	call	_Lcd_Write_Char
  3327   0018AE  4A15               	infsnz	Lcd_Write_String@i^0,f,c
  3328   0018B0  2A16               	incf	(Lcd_Write_String@i+1)^0,f,c
  3329   0018B2                     l3482:
  3330   0018B2  5015               	movf	Lcd_Write_String@i^0,w,c
  3331   0018B4  2411               	addwf	Lcd_Write_String@a^0,w,c
  3332   0018B6  6E13               	movwf	??_Lcd_Write_String^0,c
  3333   0018B8  5016               	movf	(Lcd_Write_String@i+1)^0,w,c
  3334   0018BA  2012               	addwfc	(Lcd_Write_String@a+1)^0,w,c
  3335   0018BC  6E14               	movwf	(??_Lcd_Write_String+1)^0,c
  3336   0018BE  C013  FFF6         	movff	??_Lcd_Write_String,tblptrl
  3337   0018C2  C014  FFF7         	movff	??_Lcd_Write_String+1,tblptrh
  3338   0018C6  6AF8               	clrf	tblptru,c
  3339   0018C8  0E07               	movlw	(high __ramtop+-1)
  3340   0018CA  64F7               	cpfsgt	tblptrh,c
  3341   0018CC  D003               	bra	u3247
  3342   0018CE  0008               	tblrd		*
  3343   0018D0  50F5               	movf	tablat,w,c
  3344   0018D2  D005               	bra	u3240
  3345   0018D4                     u3247:
  3346   0018D4  CFF6 FFE1          	movff	tblptrl,fsr1l
  3347   0018D8  CFF7 FFE2          	movff	tblptrh,fsr1h
  3348   0018DC  50E7               	movf	indf1,w,c
  3349   0018DE                     u3240:
  3350   0018DE  0900               	iorlw	0
  3351   0018E0  A4D8               	btfss	status,2,c
  3352   0018E2  EF75  F00C         	goto	u3251
  3353   0018E6  EF77  F00C         	goto	u3250
  3354   0018EA                     u3251:
  3355   0018EA  EF3F  F00C         	goto	l3478
  3356   0018EE                     u3250:
  3357   0018EE  0012               	return		;funcret
  3358   0018F0                     __end_of_Lcd_Write_String:
  3359                           	callstack 0
  3360                           
  3361 ;; *************** function _calibrar *****************
  3362 ;; Defined at:
  3363 ;;		line 277 in file "ASCENSOR.c"
  3364 ;; Parameters:    Size  Location     Type
  3365 ;;		None
  3366 ;; Auto vars:     Size  Location     Type
  3367 ;;		None
  3368 ;; Return value:  Size  Location     Type
  3369 ;;                  1    wreg      void 
  3370 ;; Registers used:
  3371 ;;		wreg, status,2
  3372 ;; Tracked objects:
  3373 ;;		On entry : 0/0
  3374 ;;		On exit  : 0/0
  3375 ;;		Unchanged: 0/0
  3376 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3377 ;;      Params:         0       0       0       0       0       0       0       0       0
  3378 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3379 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3380 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3381 ;;Total ram usage:        0 bytes
  3382 ;; Hardware stack levels used: 1
  3383 ;; Hardware stack levels required when called: 5
  3384 ;; This function calls:
  3385 ;;		Nothing
  3386 ;; This function is called by:
  3387 ;;		_dejar
  3388 ;; This function uses a non-reentrant model
  3389 ;;
  3390                           
  3391                           	psect	text17
  3392   00084C                     __ptext17:
  3393                           	callstack 0
  3394   00084C                     _calibrar:
  3395                           	callstack 24
  3396   00084C                     
  3397                           ;ASCENSOR.c: 278:     if (Fila1[0]==0 || Fila2[0]==0 || Fila3[0]==0){
  3398   00084C  5041               	movf	_Fila1^0,w,c
  3399   00084E  B4D8               	btfsc	status,2,c
  3400   000850  EF2C  F004         	goto	u2101
  3401   000854  EF2E  F004         	goto	u2100
  3402   000858                     u2101:
  3403   000858  EF3F  F004         	goto	l2730
  3404   00085C                     u2100:
  3405   00085C  503E               	movf	_Fila2^0,w,c
  3406   00085E  B4D8               	btfsc	status,2,c
  3407   000860  EF34  F004         	goto	u2111
  3408   000864  EF36  F004         	goto	u2110
  3409   000868                     u2111:
  3410   000868  EF3F  F004         	goto	l2730
  3411   00086C                     u2110:
  3412   00086C  0100               	movlb	0	; () banked
  3413   00086E  5180               	movf	_Fila3& (0+255),w,b
  3414   000870  A4D8               	btfss	status,2,c
  3415   000872  EF3D  F004         	goto	u2121
  3416   000876  EF3F  F004         	goto	u2120
  3417   00087A                     u2121:
  3418   00087A  EF80  F004         	goto	l2754
  3419   00087E                     u2120:
  3420   00087E                     l2730:
  3421                           
  3422                           ;ASCENSOR.c: 279:     SALTO=19;
  3423   00087E  0E00               	movlw	0
  3424   000880  0100               	movlb	0	; () banked
  3425   000882  6F8A               	movwf	(_SALTO+1)& (0+255),b
  3426   000884  0E13               	movlw	19
  3427   000886  6F89               	movwf	_SALTO& (0+255),b
  3428                           
  3429                           ;ASCENSOR.c: 280:     if(METAL !=0 && Fila1[0]==0){
  3430   000888  5049               	movf	_METAL^0,w,c
  3431   00088A  B4D8               	btfsc	status,2,c
  3432   00088C  EF4A  F004         	goto	u2131
  3433   000890  EF4C  F004         	goto	u2130
  3434   000894                     u2131:
  3435   000894  EF58  F004         	goto	l2738
  3436   000898                     u2130:
  3437   000898                     
  3438                           ; BSR set to: 0
  3439   000898  5041               	movf	_Fila1^0,w,c
  3440   00089A  A4D8               	btfss	status,2,c
  3441   00089C  EF52  F004         	goto	u2141
  3442   0008A0  EF54  F004         	goto	u2140
  3443   0008A4                     u2141:
  3444   0008A4  EF58  F004         	goto	l2738
  3445   0008A8                     u2140:
  3446   0008A8                     
  3447                           ; BSR set to: 0
  3448                           ;ASCENSOR.c: 281:         Fila1[0]=1;
  3449   0008A8  0E01               	movlw	1
  3450   0008AA  6E41               	movwf	_Fila1^0,c
  3451   0008AC  EF2E  F005         	goto	l214
  3452   0008B0                     l2738:
  3453                           
  3454                           ; BSR set to: 0
  3455                           ;ASCENSOR.c: 284:     if(BLANCA !=0 && Fila2[0]==0){
  3456   0008B0  5048               	movf	_BLANCA^0,w,c
  3457   0008B2  B4D8               	btfsc	status,2,c
  3458   0008B4  EF5E  F004         	goto	u2151
  3459   0008B8  EF60  F004         	goto	u2150
  3460   0008BC                     u2151:
  3461   0008BC  EF6C  F004         	goto	l2746
  3462   0008C0                     u2150:
  3463   0008C0                     
  3464                           ; BSR set to: 0
  3465   0008C0  503E               	movf	_Fila2^0,w,c
  3466   0008C2  A4D8               	btfss	status,2,c
  3467   0008C4  EF66  F004         	goto	u2161
  3468   0008C8  EF68  F004         	goto	u2160
  3469   0008CC                     u2161:
  3470   0008CC  EF6C  F004         	goto	l2746
  3471   0008D0                     u2160:
  3472   0008D0                     
  3473                           ; BSR set to: 0
  3474                           ;ASCENSOR.c: 285:         Fila2[0]=1;
  3475   0008D0  0E01               	movlw	1
  3476   0008D2  6E3E               	movwf	_Fila2^0,c
  3477   0008D4  EF2E  F005         	goto	l214
  3478   0008D8                     l2746:
  3479                           
  3480                           ; BSR set to: 0
  3481                           ;ASCENSOR.c: 289:     if(NEGRA !=0 && Fila3[0]==0){
  3482   0008D8  5047               	movf	_NEGRA^0,w,c
  3483   0008DA  B4D8               	btfsc	status,2,c
  3484   0008DC  EF72  F004         	goto	u2171
  3485   0008E0  EF74  F004         	goto	u2170
  3486   0008E4                     u2171:
  3487   0008E4  EF80  F004         	goto	l2754
  3488   0008E8                     u2170:
  3489   0008E8                     
  3490                           ; BSR set to: 0
  3491   0008E8  5180               	movf	_Fila3& (0+255),w,b
  3492   0008EA  A4D8               	btfss	status,2,c
  3493   0008EC  EF7A  F004         	goto	u2181
  3494   0008F0  EF7C  F004         	goto	u2180
  3495   0008F4                     u2181:
  3496   0008F4  EF80  F004         	goto	l2754
  3497   0008F8                     u2180:
  3498   0008F8                     
  3499                           ; BSR set to: 0
  3500                           ;ASCENSOR.c: 290:         Fila3[0]=1;
  3501   0008F8  0E01               	movlw	1
  3502   0008FA  6F80               	movwf	_Fila3& (0+255),b
  3503   0008FC  EF2E  F005         	goto	l214
  3504   000900                     l2754:
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;ASCENSOR.c: 295:     if (Fila1[1]==0 || Fila2[1]==0 || Fila3[1]==0){
  3508   000900  5042               	movf	(_Fila1+1)^0,w,c
  3509   000902  B4D8               	btfsc	status,2,c
  3510   000904  EF86  F004         	goto	u2191
  3511   000908  EF88  F004         	goto	u2190
  3512   00090C                     u2191:
  3513   00090C  EF98  F004         	goto	l2760
  3514   000910                     u2190:
  3515   000910                     
  3516                           ; BSR set to: 0
  3517   000910  503F               	movf	(_Fila2+1)^0,w,c
  3518   000912  B4D8               	btfsc	status,2,c
  3519   000914  EF8E  F004         	goto	u2201
  3520   000918  EF90  F004         	goto	u2200
  3521   00091C                     u2201:
  3522   00091C  EF98  F004         	goto	l2760
  3523   000920                     u2200:
  3524   000920                     
  3525                           ; BSR set to: 0
  3526   000920  5181               	movf	(_Fila3+1)& (0+255),w,b
  3527   000922  A4D8               	btfss	status,2,c
  3528   000924  EF96  F004         	goto	u2211
  3529   000928  EF98  F004         	goto	u2210
  3530   00092C                     u2211:
  3531   00092C  EFD8  F004         	goto	l2784
  3532   000930                     u2210:
  3533   000930                     l2760:
  3534                           
  3535                           ; BSR set to: 0
  3536                           ;ASCENSOR.c: 296:     SALTO=37;
  3537   000930  0E00               	movlw	0
  3538   000932  6F8A               	movwf	(_SALTO+1)& (0+255),b
  3539   000934  0E25               	movlw	37
  3540   000936  6F89               	movwf	_SALTO& (0+255),b
  3541                           
  3542                           ;ASCENSOR.c: 297:     if(METAL !=0 && Fila1[1]==0){
  3543   000938  5049               	movf	_METAL^0,w,c
  3544   00093A  B4D8               	btfsc	status,2,c
  3545   00093C  EFA2  F004         	goto	u2221
  3546   000940  EFA4  F004         	goto	u2220
  3547   000944                     u2221:
  3548   000944  EFB0  F004         	goto	l2768
  3549   000948                     u2220:
  3550   000948                     
  3551                           ; BSR set to: 0
  3552   000948  5042               	movf	(_Fila1+1)^0,w,c
  3553   00094A  A4D8               	btfss	status,2,c
  3554   00094C  EFAA  F004         	goto	u2231
  3555   000950  EFAC  F004         	goto	u2230
  3556   000954                     u2231:
  3557   000954  EFB0  F004         	goto	l2768
  3558   000958                     u2230:
  3559   000958                     
  3560                           ; BSR set to: 0
  3561                           ;ASCENSOR.c: 298:         Fila1[1]=1;
  3562   000958  0E01               	movlw	1
  3563   00095A  6E42               	movwf	(_Fila1+1)^0,c
  3564   00095C  EF2E  F005         	goto	l214
  3565   000960                     l2768:
  3566                           
  3567                           ; BSR set to: 0
  3568                           ;ASCENSOR.c: 301:     if(BLANCA !=0 && Fila2[1]==0){
  3569   000960  5048               	movf	_BLANCA^0,w,c
  3570   000962  B4D8               	btfsc	status,2,c
  3571   000964  EFB6  F004         	goto	u2241
  3572   000968  EFB8  F004         	goto	u2240
  3573   00096C                     u2241:
  3574   00096C  EFC4  F004         	goto	l2776
  3575   000970                     u2240:
  3576   000970                     
  3577                           ; BSR set to: 0
  3578   000970  503F               	movf	(_Fila2+1)^0,w,c
  3579   000972  A4D8               	btfss	status,2,c
  3580   000974  EFBE  F004         	goto	u2251
  3581   000978  EFC0  F004         	goto	u2250
  3582   00097C                     u2251:
  3583   00097C  EFC4  F004         	goto	l2776
  3584   000980                     u2250:
  3585   000980                     
  3586                           ; BSR set to: 0
  3587                           ;ASCENSOR.c: 302:         Fila2[1]=1;
  3588   000980  0E01               	movlw	1
  3589   000982  6E3F               	movwf	(_Fila2+1)^0,c
  3590   000984  EF2E  F005         	goto	l214
  3591   000988                     l2776:
  3592                           
  3593                           ; BSR set to: 0
  3594                           ;ASCENSOR.c: 306:     if(NEGRA !=0 && Fila3[1]==0){
  3595   000988  5047               	movf	_NEGRA^0,w,c
  3596   00098A  B4D8               	btfsc	status,2,c
  3597   00098C  EFCA  F004         	goto	u2261
  3598   000990  EFCC  F004         	goto	u2260
  3599   000994                     u2261:
  3600   000994  EFD8  F004         	goto	l2784
  3601   000998                     u2260:
  3602   000998                     
  3603                           ; BSR set to: 0
  3604   000998  5181               	movf	(_Fila3+1)& (0+255),w,b
  3605   00099A  A4D8               	btfss	status,2,c
  3606   00099C  EFD2  F004         	goto	u2271
  3607   0009A0  EFD4  F004         	goto	u2270
  3608   0009A4                     u2271:
  3609   0009A4  EFD8  F004         	goto	l2784
  3610   0009A8                     u2270:
  3611   0009A8                     
  3612                           ; BSR set to: 0
  3613                           ;ASCENSOR.c: 307:         Fila3[1]=1;
  3614   0009A8  0E01               	movlw	1
  3615   0009AA  6F81               	movwf	(_Fila3+1)& (0+255),b
  3616   0009AC  EF2E  F005         	goto	l214
  3617   0009B0                     l2784:
  3618                           
  3619                           ; BSR set to: 0
  3620                           ;ASCENSOR.c: 312:     if (Fila1[2]==0 || Fila2[2]==0 || Fila3[2]==0){
  3621   0009B0  5043               	movf	(_Fila1+2)^0,w,c
  3622   0009B2  B4D8               	btfsc	status,2,c
  3623   0009B4  EFDE  F004         	goto	u2281
  3624   0009B8  EFE0  F004         	goto	u2280
  3625   0009BC                     u2281:
  3626   0009BC  EFF0  F004         	goto	l2790
  3627   0009C0                     u2280:
  3628   0009C0                     
  3629                           ; BSR set to: 0
  3630   0009C0  5040               	movf	(_Fila2+2)^0,w,c
  3631   0009C2  B4D8               	btfsc	status,2,c
  3632   0009C4  EFE6  F004         	goto	u2291
  3633   0009C8  EFE8  F004         	goto	u2290
  3634   0009CC                     u2291:
  3635   0009CC  EFF0  F004         	goto	l2790
  3636   0009D0                     u2290:
  3637   0009D0                     
  3638                           ; BSR set to: 0
  3639   0009D0  5182               	movf	(_Fila3+2)& (0+255),w,b
  3640   0009D2  A4D8               	btfss	status,2,c
  3641   0009D4  EFEE  F004         	goto	u2301
  3642   0009D8  EFF0  F004         	goto	u2300
  3643   0009DC                     u2301:
  3644   0009DC  EF2E  F005         	goto	l214
  3645   0009E0                     u2300:
  3646   0009E0                     l2790:
  3647                           
  3648                           ; BSR set to: 0
  3649                           ;ASCENSOR.c: 313:     SALTO=55;
  3650   0009E0  0E00               	movlw	0
  3651   0009E2  6F8A               	movwf	(_SALTO+1)& (0+255),b
  3652   0009E4  0E37               	movlw	55
  3653   0009E6  6F89               	movwf	_SALTO& (0+255),b
  3654                           
  3655                           ;ASCENSOR.c: 314:     if(METAL !=0 && Fila1[2]==0){
  3656   0009E8  5049               	movf	_METAL^0,w,c
  3657   0009EA  B4D8               	btfsc	status,2,c
  3658   0009EC  EFFA  F004         	goto	u2311
  3659   0009F0  EFFC  F004         	goto	u2310
  3660   0009F4                     u2311:
  3661   0009F4  EF08  F005         	goto	l2798
  3662   0009F8                     u2310:
  3663   0009F8                     
  3664                           ; BSR set to: 0
  3665   0009F8  5043               	movf	(_Fila1+2)^0,w,c
  3666   0009FA  A4D8               	btfss	status,2,c
  3667   0009FC  EF02  F005         	goto	u2321
  3668   000A00  EF04  F005         	goto	u2320
  3669   000A04                     u2321:
  3670   000A04  EF08  F005         	goto	l2798
  3671   000A08                     u2320:
  3672   000A08                     
  3673                           ; BSR set to: 0
  3674                           ;ASCENSOR.c: 315:         Fila1[2]=1;
  3675   000A08  0E01               	movlw	1
  3676   000A0A  6E43               	movwf	(_Fila1+2)^0,c
  3677   000A0C  EF2E  F005         	goto	l214
  3678   000A10                     l2798:
  3679                           
  3680                           ; BSR set to: 0
  3681                           ;ASCENSOR.c: 318:     if(BLANCA !=0 && Fila2[2]==0){
  3682   000A10  5048               	movf	_BLANCA^0,w,c
  3683   000A12  B4D8               	btfsc	status,2,c
  3684   000A14  EF0E  F005         	goto	u2331
  3685   000A18  EF10  F005         	goto	u2330
  3686   000A1C                     u2331:
  3687   000A1C  EF1C  F005         	goto	l2806
  3688   000A20                     u2330:
  3689   000A20                     
  3690                           ; BSR set to: 0
  3691   000A20  5040               	movf	(_Fila2+2)^0,w,c
  3692   000A22  A4D8               	btfss	status,2,c
  3693   000A24  EF16  F005         	goto	u2341
  3694   000A28  EF18  F005         	goto	u2340
  3695   000A2C                     u2341:
  3696   000A2C  EF1C  F005         	goto	l2806
  3697   000A30                     u2340:
  3698   000A30                     
  3699                           ; BSR set to: 0
  3700                           ;ASCENSOR.c: 319:         Fila2[2]=1;
  3701   000A30  0E01               	movlw	1
  3702   000A32  6E40               	movwf	(_Fila2+2)^0,c
  3703   000A34  EF2E  F005         	goto	l214
  3704   000A38                     l2806:
  3705                           
  3706                           ; BSR set to: 0
  3707                           ;ASCENSOR.c: 323:     if(NEGRA !=0 && Fila3[2]==0){
  3708   000A38  5047               	movf	_NEGRA^0,w,c
  3709   000A3A  B4D8               	btfsc	status,2,c
  3710   000A3C  EF22  F005         	goto	u2351
  3711   000A40  EF24  F005         	goto	u2350
  3712   000A44                     u2351:
  3713   000A44  EF2E  F005         	goto	l214
  3714   000A48                     u2350:
  3715   000A48                     
  3716                           ; BSR set to: 0
  3717   000A48  5182               	movf	(_Fila3+2)& (0+255),w,b
  3718   000A4A  A4D8               	btfss	status,2,c
  3719   000A4C  EF2A  F005         	goto	u2361
  3720   000A50  EF2C  F005         	goto	u2360
  3721   000A54                     u2361:
  3722   000A54  EF2E  F005         	goto	l214
  3723   000A58                     u2360:
  3724   000A58                     
  3725                           ; BSR set to: 0
  3726                           ;ASCENSOR.c: 324:         Fila3[2]=1;
  3727   000A58  0E01               	movlw	1
  3728   000A5A  6F82               	movwf	(_Fila3+2)& (0+255),b
  3729   000A5C                     l214:
  3730                           
  3731                           ; BSR set to: 0
  3732   000A5C  0012               	return		;funcret
  3733   000A5E                     __end_of_calibrar:
  3734                           	callstack 0
  3735                           
  3736 ;; *************** function _Modificar *****************
  3737 ;; Defined at:
  3738 ;;		line 256 in file "ASCENSOR.c"
  3739 ;; Parameters:    Size  Location     Type
  3740 ;;		None
  3741 ;; Auto vars:     Size  Location     Type
  3742 ;;		None
  3743 ;; Return value:  Size  Location     Type
  3744 ;;                  1    wreg      void 
  3745 ;; Registers used:
  3746 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3747 ;; Tracked objects:
  3748 ;;		On entry : 0/0
  3749 ;;		On exit  : 0/0
  3750 ;;		Unchanged: 0/0
  3751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3752 ;;      Params:         0       0       0       0       0       0       0       0       0
  3753 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3754 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3755 ;;      Totals:         0       0       0       0       0       0       0       0       0
  3756 ;;Total ram usage:        0 bytes
  3757 ;; Hardware stack levels used: 1
  3758 ;; Hardware stack levels required when called: 10
  3759 ;; This function calls:
  3760 ;;		_Actualizar_Matriz
  3761 ;;		_Lcd_NoBlink
  3762 ;;		_Lcd_Set_Cursor
  3763 ;;		_Lcd_Write_Char
  3764 ;;		_MOD
  3765 ;;		_guardar
  3766 ;;		_probar_1sg
  3767 ;; This function is called by:
  3768 ;;		_main
  3769 ;; This function uses a non-reentrant model
  3770 ;;
  3771                           
  3772                           	psect	text18
  3773   0016E8                     __ptext18:
  3774                           	callstack 0
  3775   0016E8                     _Modificar:
  3776                           	callstack 20
  3777   0016E8                     
  3778                           ;ASCENSOR.c: 257:     if (PORTBbits.RB2==1){
  3779   0016E8  A481               	btfss	129,2,c	;volatile
  3780   0016EA  EF79  F00B         	goto	u3421
  3781   0016EE  EF7B  F00B         	goto	u3420
  3782   0016F2                     u3421:
  3783   0016F2  EF8C  F00B         	goto	l199
  3784   0016F6                     u3420:
  3785   0016F6                     
  3786                           ;ASCENSOR.c: 258:         MOD(f,c,1);
  3787   0016F6  C045  F00D         	movff	_c,MOD@C
  3788   0016FA  0E01               	movlw	1
  3789   0016FC  6E0E               	movwf	MOD@x^0,c
  3790   0016FE  5046               	movf	_f^0,w,c
  3791   001700  ECE1  F00C         	call	_MOD
  3792   001704                     
  3793                           ;ASCENSOR.c: 259:         Lcd_Write_Char(1);
  3794   001704  0E01               	movlw	1
  3795   001706  ECAD  F00D         	call	_Lcd_Write_Char
  3796   00170A                     l200:
  3797   00170A  B481               	btfsc	129,2,c	;volatile
  3798   00170C  EF8A  F00B         	goto	u3431
  3799   001710  EF8C  F00B         	goto	u3430
  3800   001714                     u3431:
  3801   001714  EF85  F00B         	goto	l200
  3802   001718                     u3430:
  3803   001718                     l199:
  3804                           
  3805                           ;ASCENSOR.c: 262:     if (PORTBbits.RB3==1){
  3806   001718  A681               	btfss	129,3,c	;volatile
  3807   00171A  EF91  F00B         	goto	u3441
  3808   00171E  EF93  F00B         	goto	u3440
  3809   001722                     u3441:
  3810   001722  EFA6  F00B         	goto	l3636
  3811   001726                     u3440:
  3812   001726                     
  3813                           ;ASCENSOR.c: 263:         probar_1sg();
  3814   001726  ECB1  F00C         	call	_probar_1sg	;wreg free
  3815                           
  3816                           ;ASCENSOR.c: 264:          MOD(f,c,0);
  3817   00172A  C045  F00D         	movff	_c,MOD@C
  3818   00172E  0E00               	movlw	0
  3819   001730  6E0E               	movwf	MOD@x^0,c
  3820   001732  5046               	movf	_f^0,w,c
  3821   001734  ECE1  F00C         	call	_MOD
  3822   001738                     
  3823                           ;ASCENSOR.c: 265:         Lcd_Write_Char(0);
  3824   001738  0E00               	movlw	0
  3825   00173A  ECAD  F00D         	call	_Lcd_Write_Char
  3826   00173E                     l204:
  3827   00173E  B681               	btfsc	129,3,c	;volatile
  3828   001740  EFA4  F00B         	goto	u3451
  3829   001744  EFA6  F00B         	goto	u3450
  3830   001748                     u3451:
  3831   001748  EF9F  F00B         	goto	l204
  3832   00174C                     u3450:
  3833   00174C                     l3636:
  3834                           
  3835                           ;ASCENSOR.c: 268:     guardar();
  3836   00174C  ECB6  F00B         	call	_guardar	;wreg free
  3837   001750                     
  3838                           ;ASCENSOR.c: 269:     Lcd_Set_Cursor(1,13);
  3839   001750  0E0D               	movlw	13
  3840   001752  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  3841   001754  0E01               	movlw	1
  3842   001756  EC4A  F009         	call	_Lcd_Set_Cursor
  3843   00175A                     
  3844                           ;ASCENSOR.c: 270:     f=1;
  3845   00175A  0E01               	movlw	1
  3846   00175C  6E46               	movwf	_f^0,c
  3847   00175E                     
  3848                           ;ASCENSOR.c: 271:     c=13;
  3849   00175E  0E0D               	movlw	13
  3850   001760  6E45               	movwf	_c^0,c
  3851   001762                     
  3852                           ;ASCENSOR.c: 272:     Lcd_NoBlink();
  3853   001762  EC93  F00E         	call	_Lcd_NoBlink	;wreg free
  3854   001766                     
  3855                           ;ASCENSOR.c: 273:     Actualizar_Matriz();
  3856   001766  ECC9  F008         	call	_Actualizar_Matriz	;wreg free
  3857   00176A  0012               	return		;funcret
  3858   00176C                     __end_of_Modificar:
  3859                           	callstack 0
  3860                           
  3861 ;; *************** function _probar_1sg *****************
  3862 ;; Defined at:
  3863 ;;		line 225 in file "ASCENSOR.c"
  3864 ;; Parameters:    Size  Location     Type
  3865 ;;		None
  3866 ;; Auto vars:     Size  Location     Type
  3867 ;;		None
  3868 ;; Return value:  Size  Location     Type
  3869 ;;                  1    wreg      void 
  3870 ;; Registers used:
  3871 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3872 ;; Tracked objects:
  3873 ;;		On entry : 0/0
  3874 ;;		On exit  : 0/0
  3875 ;;		Unchanged: 0/0
  3876 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3877 ;;      Params:         0       0       0       0       0       0       0       0       0
  3878 ;;      Locals:         0       0       0       0       0       0       0       0       0
  3879 ;;      Temps:          1       0       0       0       0       0       0       0       0
  3880 ;;      Totals:         1       0       0       0       0       0       0       0       0
  3881 ;;Total ram usage:        1 bytes
  3882 ;; Hardware stack levels used: 1
  3883 ;; Hardware stack levels required when called: 9
  3884 ;; This function calls:
  3885 ;;		_Actualizar_Matriz
  3886 ;;		_Clear
  3887 ;;		_estado
  3888 ;; This function is called by:
  3889 ;;		_Modificar
  3890 ;; This function uses a non-reentrant model
  3891 ;;
  3892                           
  3893                           	psect	text19
  3894   001962                     __ptext19:
  3895                           	callstack 0
  3896   001962                     _probar_1sg:
  3897                           	callstack 20
  3898   001962                     
  3899                           ;ASCENSOR.c: 226:     if(PORTBbits.RB3==0){
  3900   001962  B681               	btfsc	129,3,c	;volatile
  3901   001964  EFB6  F00C         	goto	u3331
  3902   001968  EFB8  F00C         	goto	u3330
  3903   00196C                     u3331:
  3904   00196C  EFBA  F00C         	goto	l3578
  3905   001970                     u3330:
  3906   001970  EFE0  F00C         	goto	l188
  3907   001974                     l3578:
  3908                           
  3909                           ;ASCENSOR.c: 229:     _delay((unsigned long)((100)*(4000000/4000.0)));
  3910   001974  0E82               	movlw	130
  3911   001976  6E19               	movwf	??_probar_1sg^0,c
  3912   001978  0EDE               	movlw	222
  3913   00197A                     u3737:
  3914   00197A  2EE8               	decfsz	wreg,f,c
  3915   00197C  D7FE               	bra	u3737
  3916   00197E  2E19               	decfsz	??_probar_1sg^0,f,c
  3917   001980  D7FC               	bra	u3737
  3918   001982                     
  3919                           ;ASCENSOR.c: 230:     if(PORTBbits.RB3==0){
  3920   001982  B681               	btfsc	129,3,c	;volatile
  3921   001984  EFC6  F00C         	goto	u3341
  3922   001988  EFC8  F00C         	goto	u3340
  3923   00198C                     u3341:
  3924   00198C  EFCA  F00C         	goto	l3584
  3925   001990                     u3340:
  3926   001990  EFE0  F00C         	goto	l188
  3927   001994                     l3584:
  3928                           
  3929                           ;ASCENSOR.c: 233:     _delay((unsigned long)((100)*(4000000/4000.0)));
  3930   001994  0E82               	movlw	130
  3931   001996  6E19               	movwf	??_probar_1sg^0,c
  3932   001998  0EDE               	movlw	222
  3933   00199A                     u3747:
  3934   00199A  2EE8               	decfsz	wreg,f,c
  3935   00199C  D7FE               	bra	u3747
  3936   00199E  2E19               	decfsz	??_probar_1sg^0,f,c
  3937   0019A0  D7FC               	bra	u3747
  3938   0019A2                     
  3939                           ;ASCENSOR.c: 234:     if(PORTBbits.RB3==0){
  3940   0019A2  B681               	btfsc	129,3,c	;volatile
  3941   0019A4  EFD6  F00C         	goto	u3351
  3942   0019A8  EFD8  F00C         	goto	u3350
  3943   0019AC                     u3351:
  3944   0019AC  EFDA  F00C         	goto	l3590
  3945   0019B0                     u3350:
  3946   0019B0  EFE0  F00C         	goto	l188
  3947   0019B4                     l3590:
  3948                           
  3949                           ;ASCENSOR.c: 237:     Clear();
  3950   0019B4  EC39  F00E         	call	_Clear	;wreg free
  3951   0019B8                     
  3952                           ;ASCENSOR.c: 238:     estado();
  3953   0019B8  EC78  F00C         	call	_estado	;wreg free
  3954   0019BC                     
  3955                           ;ASCENSOR.c: 239:     Actualizar_Matriz();
  3956   0019BC  ECC9  F008         	call	_Actualizar_Matriz	;wreg free
  3957   0019C0                     l188:
  3958   0019C0  0012               	return		;funcret
  3959   0019C2                     __end_of_probar_1sg:
  3960                           	callstack 0
  3961                           
  3962 ;; *************** function _estado *****************
  3963 ;; Defined at:
  3964 ;;		line 174 in file "ASCENSOR.c"
  3965 ;; Parameters:    Size  Location     Type
  3966 ;;		None
  3967 ;; Auto vars:     Size  Location     Type
  3968 ;;  i               1   15[COMRAM] unsigned char 
  3969 ;;  i               1   14[COMRAM] unsigned char 
  3970 ;;  i               1   13[COMRAM] unsigned char 
  3971 ;;  g               1    0        unsigned char 
  3972 ;; Return value:  Size  Location     Type
  3973 ;;                  1    wreg      void 
  3974 ;; Registers used:
  3975 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  3976 ;; Tracked objects:
  3977 ;;		On entry : 0/0
  3978 ;;		On exit  : 0/0
  3979 ;;		Unchanged: 0/0
  3980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  3981 ;;      Params:         0       0       0       0       0       0       0       0       0
  3982 ;;      Locals:         3       0       0       0       0       0       0       0       0
  3983 ;;      Temps:          0       0       0       0       0       0       0       0       0
  3984 ;;      Totals:         3       0       0       0       0       0       0       0       0
  3985 ;;Total ram usage:        3 bytes
  3986 ;; Hardware stack levels used: 1
  3987 ;; Hardware stack levels required when called: 6
  3988 ;; This function calls:
  3989 ;;		_EEPROM_Read
  3990 ;; This function is called by:
  3991 ;;		_probar_1sg
  3992 ;;		_main
  3993 ;; This function uses a non-reentrant model
  3994 ;;
  3995                           
  3996                           	psect	text20
  3997   0018F0                     __ptext20:
  3998                           	callstack 0
  3999   0018F0                     _estado:
  4000                           	callstack 24
  4001   0018F0                     
  4002                           ;ASCENSOR.c: 175:     char g;;ASCENSOR.c: 176:     for (char i=0; i<=2; i++){
  4003   0018F0  6A0E               	clrf	estado@i^0,c
  4004   0018F2                     l2590:
  4005                           
  4006                           ;ASCENSOR.c: 177:         Fila1[i]=EEPROM_Read(i);
  4007   0018F2  500E               	movf	estado@i^0,w,c
  4008   0018F4  0F41               	addlw	low _Fila1
  4009   0018F6  6ED9               	movwf	fsr2l,c
  4010   0018F8  6ADA               	clrf	fsr2h,c
  4011   0018FA  500E               	movf	estado@i^0,w,c
  4012   0018FC  EC8B  F00E         	call	_EEPROM_Read
  4013   001900  6EDF               	movwf	indf2,c
  4014   001902                     
  4015                           ;ASCENSOR.c: 178:     }
  4016   001902  2A0E               	incf	estado@i^0,f,c
  4017   001904  0E02               	movlw	2
  4018   001906  640E               	cpfsgt	estado@i^0,c
  4019   001908  EF88  F00C         	goto	u1941
  4020   00190C  EF8A  F00C         	goto	u1940
  4021   001910                     u1941:
  4022   001910  EF79  F00C         	goto	l2590
  4023   001914                     u1940:
  4024   001914                     
  4025                           ;ASCENSOR.c: 179:     for (char i=0; i<=2; i++){
  4026   001914  6A0F               	clrf	estado@i_704^0,c
  4027   001916                     l2600:
  4028                           
  4029                           ;ASCENSOR.c: 180:         Fila2[i]=EEPROM_Read(i+3);
  4030   001916  500F               	movf	estado@i_704^0,w,c
  4031   001918  0F3E               	addlw	low _Fila2
  4032   00191A  6ED9               	movwf	fsr2l,c
  4033   00191C  6ADA               	clrf	fsr2h,c
  4034   00191E  500F               	movf	estado@i_704^0,w,c
  4035   001920  0F03               	addlw	3
  4036   001922  EC8B  F00E         	call	_EEPROM_Read
  4037   001926  6EDF               	movwf	indf2,c
  4038   001928                     
  4039                           ;ASCENSOR.c: 181:     }
  4040   001928  2A0F               	incf	estado@i_704^0,f,c
  4041   00192A  0E02               	movlw	2
  4042   00192C  640F               	cpfsgt	estado@i_704^0,c
  4043   00192E  EF9B  F00C         	goto	u1951
  4044   001932  EF9D  F00C         	goto	u1950
  4045   001936                     u1951:
  4046   001936  EF8B  F00C         	goto	l2600
  4047   00193A                     u1950:
  4048   00193A                     
  4049                           ;ASCENSOR.c: 182:     for (char i=0; i<=2; i++){
  4050   00193A  6A10               	clrf	estado@i_705^0,c
  4051   00193C                     l2610:
  4052                           
  4053                           ;ASCENSOR.c: 183:         Fila3[i]=EEPROM_Read(i+6);
  4054   00193C  5010               	movf	estado@i_705^0,w,c
  4055   00193E  0F80               	addlw	low _Fila3
  4056   001940  6ED9               	movwf	fsr2l,c
  4057   001942  6ADA               	clrf	fsr2h,c
  4058   001944  5010               	movf	estado@i_705^0,w,c
  4059   001946  0F06               	addlw	6
  4060   001948  EC8B  F00E         	call	_EEPROM_Read
  4061   00194C  6EDF               	movwf	indf2,c
  4062   00194E                     
  4063                           ;ASCENSOR.c: 184:     }
  4064   00194E  2A10               	incf	estado@i_705^0,f,c
  4065   001950  0E02               	movlw	2
  4066   001952  6410               	cpfsgt	estado@i_705^0,c
  4067   001954  EFAE  F00C         	goto	u1961
  4068   001958  EFB0  F00C         	goto	u1960
  4069   00195C                     u1961:
  4070   00195C  EF9E  F00C         	goto	l2610
  4071   001960                     u1960:
  4072   001960  0012               	return		;funcret
  4073   001962                     __end_of_estado:
  4074                           	callstack 0
  4075                           
  4076 ;; *************** function _EEPROM_Read *****************
  4077 ;; Defined at:
  4078 ;;		line 20 in file "../EEPROM_RW.X/eeprom.c"
  4079 ;; Parameters:    Size  Location     Type
  4080 ;;  dir             1    wreg     unsigned char 
  4081 ;; Auto vars:     Size  Location     Type
  4082 ;;  dir             1   12[COMRAM] unsigned char 
  4083 ;; Return value:  Size  Location     Type
  4084 ;;                  1    wreg      unsigned char 
  4085 ;; Registers used:
  4086 ;;		wreg, status,2
  4087 ;; Tracked objects:
  4088 ;;		On entry : 0/0
  4089 ;;		On exit  : 0/0
  4090 ;;		Unchanged: 0/0
  4091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4092 ;;      Params:         0       0       0       0       0       0       0       0       0
  4093 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4094 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4095 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4096 ;;Total ram usage:        1 bytes
  4097 ;; Hardware stack levels used: 1
  4098 ;; Hardware stack levels required when called: 5
  4099 ;; This function calls:
  4100 ;;		Nothing
  4101 ;; This function is called by:
  4102 ;;		_estado
  4103 ;; This function uses a non-reentrant model
  4104 ;;
  4105                           
  4106                           	psect	text21
  4107   001D16                     __ptext21:
  4108                           	callstack 0
  4109   001D16                     _EEPROM_Read:
  4110                           	callstack 24
  4111                           
  4112                           ;incstack = 0
  4113                           ;EEPROM_Read@dir stored from wreg
  4114   001D16  6E0D               	movwf	EEPROM_Read@dir^0,c
  4115   001D18                     
  4116                           ;../EEPROM_RW.X/eeprom.c: 20: unsigned char EEPROM_Read(unsigned char dir);../EEPROM_RW.
      +                          X/eeprom.c: 21: {;../EEPROM_RW.X/eeprom.c: 22:     EEADR = dir;
  4117   001D18  C00D  FFA9         	movff	EEPROM_Read@dir,4009	;volatile
  4118   001D1C                     
  4119                           ;../EEPROM_RW.X/eeprom.c: 23:     EECON1bits.EEPGD = 0;
  4120   001D1C  9EA6               	bcf	166,7,c	;volsfr
  4121   001D1E                     
  4122                           ;../EEPROM_RW.X/eeprom.c: 24:     EECON1bits.CFGS = 0;
  4123   001D1E  9CA6               	bcf	166,6,c	;volsfr
  4124   001D20                     
  4125                           ;../EEPROM_RW.X/eeprom.c: 25:     EECON1bits.RD = 1;
  4126   001D20  80A6               	bsf	166,0,c	;volsfr
  4127   001D22                     
  4128                           ;../EEPROM_RW.X/eeprom.c: 26:     return EEDATA;
  4129   001D22  50A8               	movf	168,w,c	;volatile
  4130   001D24  0012               	return		;funcret
  4131   001D26                     __end_of_EEPROM_Read:
  4132                           	callstack 0
  4133                           
  4134 ;; *************** function _Clear *****************
  4135 ;; Defined at:
  4136 ;;		line 152 in file "ASCENSOR.c"
  4137 ;; Parameters:    Size  Location     Type
  4138 ;;		None
  4139 ;; Auto vars:     Size  Location     Type
  4140 ;;  i               1   14[COMRAM] unsigned char 
  4141 ;; Return value:  Size  Location     Type
  4142 ;;                  1    wreg      void 
  4143 ;; Registers used:
  4144 ;;		wreg, status,2, status,0, cstack
  4145 ;; Tracked objects:
  4146 ;;		On entry : 0/0
  4147 ;;		On exit  : 0/0
  4148 ;;		Unchanged: 0/0
  4149 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4150 ;;      Params:         0       0       0       0       0       0       0       0       0
  4151 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4152 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4153 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4154 ;;Total ram usage:        1 bytes
  4155 ;; Hardware stack levels used: 1
  4156 ;; Hardware stack levels required when called: 6
  4157 ;; This function calls:
  4158 ;;		_EEPROM_Write
  4159 ;; This function is called by:
  4160 ;;		_probar_1sg
  4161 ;; This function uses a non-reentrant model
  4162 ;;
  4163                           
  4164                           	psect	text22
  4165   001C72                     __ptext22:
  4166                           	callstack 0
  4167   001C72                     _Clear:
  4168                           	callstack 22
  4169   001C72                     
  4170                           ;ASCENSOR.c: 153:     for (char i=0; i<10; i++){
  4171   001C72  6A0F               	clrf	Clear@i^0,c
  4172   001C74                     l2578:
  4173                           
  4174                           ;ASCENSOR.c: 154:         EEPROM_Write(i,0);
  4175   001C74  0E00               	movlw	0
  4176   001C76  6E0D               	movwf	EEPROM_Write@data^0,c
  4177   001C78  500F               	movf	Clear@i^0,w,c
  4178   001C7A  ECFD  F00D         	call	_EEPROM_Write
  4179   001C7E                     
  4180                           ;ASCENSOR.c: 155:     }
  4181   001C7E  2A0F               	incf	Clear@i^0,f,c
  4182   001C80  0E09               	movlw	9
  4183   001C82  640F               	cpfsgt	Clear@i^0,c
  4184   001C84  EF46  F00E         	goto	u1931
  4185   001C88  EF48  F00E         	goto	u1930
  4186   001C8C                     u1931:
  4187   001C8C  EF3A  F00E         	goto	l2578
  4188   001C90                     u1930:
  4189   001C90  0012               	return		;funcret
  4190   001C92                     __end_of_Clear:
  4191                           	callstack 0
  4192                           
  4193 ;; *************** function _Actualizar_Matriz *****************
  4194 ;; Defined at:
  4195 ;;		line 108 in file "ASCENSOR.c"
  4196 ;; Parameters:    Size  Location     Type
  4197 ;;		None
  4198 ;; Auto vars:     Size  Location     Type
  4199 ;;  i               1   23[COMRAM] unsigned char 
  4200 ;;  i               1   22[COMRAM] unsigned char 
  4201 ;;  i               1   21[COMRAM] unsigned char 
  4202 ;;  acum            1   20[COMRAM] unsigned char 
  4203 ;; Return value:  Size  Location     Type
  4204 ;;                  1    wreg      void 
  4205 ;; Registers used:
  4206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4207 ;; Tracked objects:
  4208 ;;		On entry : 0/0
  4209 ;;		On exit  : 0/0
  4210 ;;		Unchanged: 0/0
  4211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4212 ;;      Params:         0       0       0       0       0       0       0       0       0
  4213 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4214 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4215 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4216 ;;Total ram usage:        4 bytes
  4217 ;; Hardware stack levels used: 1
  4218 ;; Hardware stack levels required when called: 8
  4219 ;; This function calls:
  4220 ;;		_Lcd_Set_Cursor
  4221 ;;		_Lcd_Write_Char
  4222 ;; This function is called by:
  4223 ;;		_probar_1sg
  4224 ;;		_Modificar
  4225 ;;		_main
  4226 ;; This function uses a non-reentrant model
  4227 ;;
  4228                           
  4229                           	psect	text23
  4230   001192                     __ptext23:
  4231                           	callstack 0
  4232   001192                     _Actualizar_Matriz:
  4233                           	callstack 20
  4234   001192                     
  4235                           ;ASCENSOR.c: 109:     Lcd_Set_Cursor(1,13);
  4236   001192  0E0D               	movlw	13
  4237   001194  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  4238   001196  0E01               	movlw	1
  4239   001198  EC4A  F009         	call	_Lcd_Set_Cursor
  4240   00119C                     
  4241                           ;ASCENSOR.c: 110:     char acum=0;
  4242   00119C  6A15               	clrf	Actualizar_Matriz@acum^0,c
  4243   00119E                     
  4244                           ;ASCENSOR.c: 111:     for(char i=0;i<=2;i++){
  4245   00119E  6A16               	clrf	Actualizar_Matriz@i^0,c
  4246   0011A0                     l3494:
  4247                           
  4248                           ;ASCENSOR.c: 112:         if (Fila3[i]==0){
  4249   0011A0  5016               	movf	Actualizar_Matriz@i^0,w,c
  4250   0011A2  0F80               	addlw	low _Fila3
  4251   0011A4  6ED9               	movwf	fsr2l,c
  4252   0011A6  6ADA               	clrf	fsr2h,c
  4253   0011A8  50DF               	movf	indf2,w,c
  4254   0011AA  A4D8               	btfss	status,2,c
  4255   0011AC  EFDA  F008         	goto	u3261
  4256   0011B0  EFDC  F008         	goto	u3260
  4257   0011B4                     u3261:
  4258   0011B4  EFE1  F008         	goto	l3498
  4259   0011B8                     u3260:
  4260   0011B8                     
  4261                           ;ASCENSOR.c: 113:             Lcd_Write_Char(0);
  4262   0011B8  0E00               	movlw	0
  4263   0011BA  ECAD  F00D         	call	_Lcd_Write_Char
  4264                           
  4265                           ;ASCENSOR.c: 114:         }
  4266   0011BE  EFE5  F008         	goto	l3502
  4267   0011C2                     l3498:
  4268                           
  4269                           ;ASCENSOR.c: 116:         {;ASCENSOR.c: 117:             Lcd_Write_Char(1);
  4270   0011C2  0E01               	movlw	1
  4271   0011C4  ECAD  F00D         	call	_Lcd_Write_Char
  4272   0011C8                     
  4273                           ;ASCENSOR.c: 118:             acum++;
  4274   0011C8  2A15               	incf	Actualizar_Matriz@acum^0,f,c
  4275   0011CA                     l3502:
  4276                           
  4277                           ;ASCENSOR.c: 120:     }
  4278   0011CA  2A16               	incf	Actualizar_Matriz@i^0,f,c
  4279   0011CC  0E02               	movlw	2
  4280   0011CE  6416               	cpfsgt	Actualizar_Matriz@i^0,c
  4281   0011D0  EFEC  F008         	goto	u3271
  4282   0011D4  EFEE  F008         	goto	u3270
  4283   0011D8                     u3271:
  4284   0011D8  EFD0  F008         	goto	l3494
  4285   0011DC                     u3270:
  4286   0011DC                     
  4287                           ;ASCENSOR.c: 121:     Lcd_Set_Cursor(2,13);
  4288   0011DC  0E0D               	movlw	13
  4289   0011DE  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  4290   0011E0  0E02               	movlw	2
  4291   0011E2  EC4A  F009         	call	_Lcd_Set_Cursor
  4292   0011E6                     
  4293                           ;ASCENSOR.c: 122:     for(char i=0;i<=2;i++){
  4294   0011E6  6A17               	clrf	Actualizar_Matriz@i_692^0,c
  4295   0011E8                     l3514:
  4296                           
  4297                           ;ASCENSOR.c: 123:         if (Fila2[i]==0){
  4298   0011E8  5017               	movf	Actualizar_Matriz@i_692^0,w,c
  4299   0011EA  0F3E               	addlw	low _Fila2
  4300   0011EC  6ED9               	movwf	fsr2l,c
  4301   0011EE  6ADA               	clrf	fsr2h,c
  4302   0011F0  50DF               	movf	indf2,w,c
  4303   0011F2  A4D8               	btfss	status,2,c
  4304   0011F4  EFFE  F008         	goto	u3281
  4305   0011F8  EF00  F009         	goto	u3280
  4306   0011FC                     u3281:
  4307   0011FC  EF05  F009         	goto	l3518
  4308   001200                     u3280:
  4309   001200                     
  4310                           ;ASCENSOR.c: 124:             Lcd_Write_Char(0);
  4311   001200  0E00               	movlw	0
  4312   001202  ECAD  F00D         	call	_Lcd_Write_Char
  4313                           
  4314                           ;ASCENSOR.c: 125:         }
  4315   001206  EF09  F009         	goto	l3522
  4316   00120A                     l3518:
  4317                           
  4318                           ;ASCENSOR.c: 127:         {;ASCENSOR.c: 128:             Lcd_Write_Char(1);
  4319   00120A  0E01               	movlw	1
  4320   00120C  ECAD  F00D         	call	_Lcd_Write_Char
  4321   001210                     
  4322                           ;ASCENSOR.c: 129:             acum++;
  4323   001210  2A15               	incf	Actualizar_Matriz@acum^0,f,c
  4324   001212                     l3522:
  4325                           
  4326                           ;ASCENSOR.c: 131:     }
  4327   001212  2A17               	incf	Actualizar_Matriz@i_692^0,f,c
  4328   001214  0E02               	movlw	2
  4329   001216  6417               	cpfsgt	Actualizar_Matriz@i_692^0,c
  4330   001218  EF10  F009         	goto	u3291
  4331   00121C  EF12  F009         	goto	u3290
  4332   001220                     u3291:
  4333   001220  EFF4  F008         	goto	l3514
  4334   001224                     u3290:
  4335   001224                     
  4336                           ;ASCENSOR.c: 132:     Lcd_Set_Cursor(3,13);
  4337   001224  0E0D               	movlw	13
  4338   001226  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  4339   001228  0E03               	movlw	3
  4340   00122A  EC4A  F009         	call	_Lcd_Set_Cursor
  4341   00122E                     
  4342                           ;ASCENSOR.c: 133:     for(char i=0;i<=2;i++){
  4343   00122E  6A18               	clrf	Actualizar_Matriz@i_693^0,c
  4344   001230                     l3534:
  4345                           
  4346                           ;ASCENSOR.c: 134:         if (Fila1[i]==0){
  4347   001230  5018               	movf	Actualizar_Matriz@i_693^0,w,c
  4348   001232  0F41               	addlw	low _Fila1
  4349   001234  6ED9               	movwf	fsr2l,c
  4350   001236  6ADA               	clrf	fsr2h,c
  4351   001238  50DF               	movf	indf2,w,c
  4352   00123A  A4D8               	btfss	status,2,c
  4353   00123C  EF22  F009         	goto	u3301
  4354   001240  EF24  F009         	goto	u3300
  4355   001244                     u3301:
  4356   001244  EF29  F009         	goto	l3538
  4357   001248                     u3300:
  4358   001248                     
  4359                           ;ASCENSOR.c: 135:             Lcd_Write_Char(0);
  4360   001248  0E00               	movlw	0
  4361   00124A  ECAD  F00D         	call	_Lcd_Write_Char
  4362                           
  4363                           ;ASCENSOR.c: 136:         }
  4364   00124E  EF2D  F009         	goto	l3542
  4365   001252                     l3538:
  4366                           
  4367                           ;ASCENSOR.c: 138:         {;ASCENSOR.c: 139:             Lcd_Write_Char(1);
  4368   001252  0E01               	movlw	1
  4369   001254  ECAD  F00D         	call	_Lcd_Write_Char
  4370   001258                     
  4371                           ;ASCENSOR.c: 140:             acum++;
  4372   001258  2A15               	incf	Actualizar_Matriz@acum^0,f,c
  4373   00125A                     l3542:
  4374                           
  4375                           ;ASCENSOR.c: 142:     }
  4376   00125A  2A18               	incf	Actualizar_Matriz@i_693^0,f,c
  4377   00125C  0E02               	movlw	2
  4378   00125E  6418               	cpfsgt	Actualizar_Matriz@i_693^0,c
  4379   001260  EF34  F009         	goto	u3311
  4380   001264  EF36  F009         	goto	u3310
  4381   001268                     u3311:
  4382   001268  EF18  F009         	goto	l3534
  4383   00126C                     u3310:
  4384   00126C                     
  4385                           ;ASCENSOR.c: 143:     Lcd_Set_Cursor(1,13);
  4386   00126C  0E0D               	movlw	13
  4387   00126E  6E10               	movwf	Lcd_Set_Cursor@b^0,c
  4388   001270  0E01               	movlw	1
  4389   001272  EC4A  F009         	call	_Lcd_Set_Cursor
  4390   001276                     
  4391                           ;ASCENSOR.c: 144:     f=1;
  4392   001276  0E01               	movlw	1
  4393   001278  6E46               	movwf	_f^0,c
  4394   00127A                     
  4395                           ;ASCENSOR.c: 145:     c=13;
  4396   00127A  0E0D               	movlw	13
  4397   00127C  6E45               	movwf	_c^0,c
  4398   00127E                     
  4399                           ;ASCENSOR.c: 146:     if(acum==9){
  4400   00127E  0E09               	movlw	9
  4401   001280  1815               	xorwf	Actualizar_Matriz@acum^0,w,c
  4402   001282  A4D8               	btfss	status,2,c
  4403   001284  EF46  F009         	goto	u3321
  4404   001288  EF48  F009         	goto	u3320
  4405   00128C                     u3321:
  4406   00128C  EF49  F009         	goto	l143
  4407   001290                     u3320:
  4408   001290                     
  4409                           ;ASCENSOR.c: 147:         PORTCbits.RC6=1;
  4410   001290  8C82               	bsf	130,6,c	;volatile
  4411   001292                     l143:
  4412   001292  0012               	return		;funcret
  4413   001294                     __end_of_Actualizar_Matriz:
  4414                           	callstack 0
  4415                           
  4416 ;; *************** function _Lcd_Set_Cursor *****************
  4417 ;; Defined at:
  4418 ;;		line 26 in file "lcd.c"
  4419 ;; Parameters:    Size  Location     Type
  4420 ;;  a               1    wreg     unsigned char 
  4421 ;;  b               1   15[COMRAM] unsigned char 
  4422 ;; Auto vars:     Size  Location     Type
  4423 ;;  a               1   16[COMRAM] unsigned char 
  4424 ;;  temp            1   19[COMRAM] unsigned char 
  4425 ;;  y               1   18[COMRAM] unsigned char 
  4426 ;;  z               1   17[COMRAM] unsigned char 
  4427 ;; Return value:  Size  Location     Type
  4428 ;;                  1    wreg      void 
  4429 ;; Registers used:
  4430 ;;		wreg, status,2, status,0, cstack
  4431 ;; Tracked objects:
  4432 ;;		On entry : 0/0
  4433 ;;		On exit  : 0/0
  4434 ;;		Unchanged: 0/0
  4435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4436 ;;      Params:         1       0       0       0       0       0       0       0       0
  4437 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4438 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4439 ;;      Totals:         5       0       0       0       0       0       0       0       0
  4440 ;;Total ram usage:        5 bytes
  4441 ;; Hardware stack levels used: 1
  4442 ;; Hardware stack levels required when called: 7
  4443 ;; This function calls:
  4444 ;;		_Lcd_Cmd
  4445 ;; This function is called by:
  4446 ;;		_detectar
  4447 ;;		_Actualizar_Matriz
  4448 ;;		_Modificar
  4449 ;;		_dejar
  4450 ;;		_main
  4451 ;; This function uses a non-reentrant model
  4452 ;;
  4453                           
  4454                           	psect	text24
  4455   001294                     __ptext24:
  4456                           	callstack 0
  4457   001294                     _Lcd_Set_Cursor:
  4458                           	callstack 22
  4459                           
  4460                           ;incstack = 0
  4461                           ;Lcd_Set_Cursor@a stored from wreg
  4462   001294  6E11               	movwf	Lcd_Set_Cursor@a^0,c
  4463   001296                     
  4464                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
  4465   001296  0411               	decf	Lcd_Set_Cursor@a^0,w,c
  4466   001298  A4D8               	btfss	status,2,c
  4467   00129A  EF51  F009         	goto	u3181
  4468   00129E  EF53  F009         	goto	u3180
  4469   0012A2                     u3181:
  4470   0012A2  EF64  F009         	goto	l3422
  4471   0012A6                     u3180:
  4472   0012A6                     
  4473                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
  4474   0012A6  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  4475   0012A8  0F7F               	addlw	127
  4476   0012AA  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  4477                           
  4478                           ;lcd.c: 32:         z = temp>>4;
  4479   0012AC  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4480   0012AE  0B0F               	andlw	15
  4481   0012B0  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  4482                           
  4483                           ;lcd.c: 33:         y = temp & 0x0F;
  4484   0012B2  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  4485   0012B4  0B0F               	andlw	15
  4486   0012B6  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  4487   0012B8                     
  4488                           ;lcd.c: 34:         Lcd_Cmd(z);
  4489   0012B8  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  4490   0012BA  EC49  F00E         	call	_Lcd_Cmd
  4491   0012BE                     
  4492                           ;lcd.c: 35:         Lcd_Cmd(y);
  4493   0012BE  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  4494   0012C0  EC49  F00E         	call	_Lcd_Cmd
  4495                           
  4496                           ;lcd.c: 36:     }
  4497   0012C4  EFB2  F009         	goto	l322
  4498   0012C8                     l3422:
  4499   0012C8  0E02               	movlw	2
  4500   0012CA  1811               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4501   0012CC  A4D8               	btfss	status,2,c
  4502   0012CE  EF6B  F009         	goto	u3191
  4503   0012D2  EF6D  F009         	goto	u3190
  4504   0012D6                     u3191:
  4505   0012D6  EF7E  F009         	goto	l3430
  4506   0012DA                     u3190:
  4507   0012DA                     
  4508                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
  4509   0012DA  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  4510   0012DC  0FBF               	addlw	191
  4511   0012DE  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  4512                           
  4513                           ;lcd.c: 40:         z = temp>>4;
  4514   0012E0  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4515   0012E2  0B0F               	andlw	15
  4516   0012E4  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  4517                           
  4518                           ;lcd.c: 41:         y = temp & 0x0F;
  4519   0012E6  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  4520   0012E8  0B0F               	andlw	15
  4521   0012EA  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  4522   0012EC                     
  4523                           ;lcd.c: 42:         Lcd_Cmd(z);
  4524   0012EC  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  4525   0012EE  EC49  F00E         	call	_Lcd_Cmd
  4526   0012F2                     
  4527                           ;lcd.c: 43:         Lcd_Cmd(y);
  4528   0012F2  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  4529   0012F4  EC49  F00E         	call	_Lcd_Cmd
  4530                           
  4531                           ;lcd.c: 44:     }
  4532   0012F8  EFB2  F009         	goto	l322
  4533   0012FC                     l3430:
  4534   0012FC  0E03               	movlw	3
  4535   0012FE  1811               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4536   001300  A4D8               	btfss	status,2,c
  4537   001302  EF85  F009         	goto	u3201
  4538   001306  EF87  F009         	goto	u3200
  4539   00130A                     u3201:
  4540   00130A  EF98  F009         	goto	l3438
  4541   00130E                     u3200:
  4542   00130E                     
  4543                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x90 + b - 1;
  4544   00130E  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  4545   001310  0F8F               	addlw	143
  4546   001312  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  4547                           
  4548                           ;lcd.c: 48:         z = temp>>4;
  4549   001314  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4550   001316  0B0F               	andlw	15
  4551   001318  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  4552                           
  4553                           ;lcd.c: 49:         y = temp & 0x0F;
  4554   00131A  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  4555   00131C  0B0F               	andlw	15
  4556   00131E  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  4557   001320                     
  4558                           ;lcd.c: 50:         Lcd_Cmd(z);
  4559   001320  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  4560   001322  EC49  F00E         	call	_Lcd_Cmd
  4561   001326                     
  4562                           ;lcd.c: 51:         Lcd_Cmd(y);
  4563   001326  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  4564   001328  EC49  F00E         	call	_Lcd_Cmd
  4565                           
  4566                           ;lcd.c: 52:     }
  4567   00132C  EFB2  F009         	goto	l322
  4568   001330                     l3438:
  4569   001330  0E04               	movlw	4
  4570   001332  1811               	xorwf	Lcd_Set_Cursor@a^0,w,c
  4571   001334  A4D8               	btfss	status,2,c
  4572   001336  EF9F  F009         	goto	u3211
  4573   00133A  EFA1  F009         	goto	u3210
  4574   00133E                     u3211:
  4575   00133E  EFB2  F009         	goto	l318
  4576   001342                     u3210:
  4577   001342                     
  4578                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD0 + b - 1;
  4579   001342  5010               	movf	Lcd_Set_Cursor@b^0,w,c
  4580   001344  0FCF               	addlw	207
  4581   001346  6E14               	movwf	Lcd_Set_Cursor@temp^0,c
  4582                           
  4583                           ;lcd.c: 56:         z = temp>>4;
  4584   001348  3814               	swapf	Lcd_Set_Cursor@temp^0,w,c
  4585   00134A  0B0F               	andlw	15
  4586   00134C  6E12               	movwf	Lcd_Set_Cursor@z^0,c
  4587                           
  4588                           ;lcd.c: 57:         y = temp & 0x0F;
  4589   00134E  5014               	movf	Lcd_Set_Cursor@temp^0,w,c
  4590   001350  0B0F               	andlw	15
  4591   001352  6E13               	movwf	Lcd_Set_Cursor@y^0,c
  4592   001354                     
  4593                           ;lcd.c: 58:         Lcd_Cmd(z);
  4594   001354  5012               	movf	Lcd_Set_Cursor@z^0,w,c
  4595   001356  EC49  F00E         	call	_Lcd_Cmd
  4596   00135A                     
  4597                           ;lcd.c: 59:         Lcd_Cmd(y);
  4598   00135A  5013               	movf	Lcd_Set_Cursor@y^0,w,c
  4599   00135C  EC49  F00E         	call	_Lcd_Cmd
  4600   001360  EFB2  F009         	goto	l322
  4601   001364                     l318:
  4602   001364                     l322:
  4603   001364  0012               	return		;funcret
  4604   001366                     __end_of_Lcd_Set_Cursor:
  4605                           	callstack 0
  4606                           
  4607 ;; *************** function _guardar *****************
  4608 ;; Defined at:
  4609 ;;		line 158 in file "ASCENSOR.c"
  4610 ;; Parameters:    Size  Location     Type
  4611 ;;		None
  4612 ;; Auto vars:     Size  Location     Type
  4613 ;;  i               1   17[COMRAM] unsigned char 
  4614 ;;  i               1   16[COMRAM] unsigned char 
  4615 ;;  i               1   15[COMRAM] unsigned char 
  4616 ;;  media           1   14[COMRAM] unsigned char 
  4617 ;; Return value:  Size  Location     Type
  4618 ;;                  1    wreg      void 
  4619 ;; Registers used:
  4620 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  4621 ;; Tracked objects:
  4622 ;;		On entry : 0/0
  4623 ;;		On exit  : 0/0
  4624 ;;		Unchanged: 0/0
  4625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4626 ;;      Params:         0       0       0       0       0       0       0       0       0
  4627 ;;      Locals:         4       0       0       0       0       0       0       0       0
  4628 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4629 ;;      Totals:         4       0       0       0       0       0       0       0       0
  4630 ;;Total ram usage:        4 bytes
  4631 ;; Hardware stack levels used: 1
  4632 ;; Hardware stack levels required when called: 6
  4633 ;; This function calls:
  4634 ;;		_EEPROM_Write
  4635 ;; This function is called by:
  4636 ;;		_Modificar
  4637 ;;		_main
  4638 ;; This function uses a non-reentrant model
  4639 ;;
  4640                           
  4641                           	psect	text25
  4642   00176C                     __ptext25:
  4643                           	callstack 0
  4644   00176C                     _guardar:
  4645                           	callstack 24
  4646   00176C                     
  4647                           ;ASCENSOR.c: 159:     char media;;ASCENSOR.c: 160:     for (char i=0; i<=2; i++){
  4648   00176C  6A10               	clrf	guardar@i^0,c
  4649   00176E                     l2650:
  4650                           
  4651                           ;ASCENSOR.c: 161:         media= Fila1[i];
  4652   00176E  5010               	movf	guardar@i^0,w,c
  4653   001770  0F41               	addlw	low _Fila1
  4654   001772  6ED9               	movwf	fsr2l,c
  4655   001774  6ADA               	clrf	fsr2h,c
  4656   001776  50DF               	movf	indf2,w,c
  4657   001778  6E0F               	movwf	guardar@media^0,c
  4658   00177A                     
  4659                           ;ASCENSOR.c: 162:         EEPROM_Write(i,media);
  4660   00177A  C00F  F00D         	movff	guardar@media,EEPROM_Write@data
  4661   00177E  5010               	movf	guardar@i^0,w,c
  4662   001780  ECFD  F00D         	call	_EEPROM_Write
  4663   001784                     
  4664                           ;ASCENSOR.c: 163:     }
  4665   001784  2A10               	incf	guardar@i^0,f,c
  4666   001786  0E02               	movlw	2
  4667   001788  6410               	cpfsgt	guardar@i^0,c
  4668   00178A  EFC9  F00B         	goto	u2011
  4669   00178E  EFCB  F00B         	goto	u2010
  4670   001792                     u2011:
  4671   001792  EFB7  F00B         	goto	l2650
  4672   001796                     u2010:
  4673   001796                     
  4674                           ;ASCENSOR.c: 164:     for (char i=0; i<=2; i++){
  4675   001796  6A11               	clrf	guardar@i_699^0,c
  4676   001798                     l2662:
  4677                           
  4678                           ;ASCENSOR.c: 165:         media= Fila2[i];
  4679   001798  5011               	movf	guardar@i_699^0,w,c
  4680   00179A  0F3E               	addlw	low _Fila2
  4681   00179C  6ED9               	movwf	fsr2l,c
  4682   00179E  6ADA               	clrf	fsr2h,c
  4683   0017A0  50DF               	movf	indf2,w,c
  4684   0017A2  6E0F               	movwf	guardar@media^0,c
  4685   0017A4                     
  4686                           ;ASCENSOR.c: 166:         EEPROM_Write(i+3,media);
  4687   0017A4  C00F  F00D         	movff	guardar@media,EEPROM_Write@data
  4688   0017A8  5011               	movf	guardar@i_699^0,w,c
  4689   0017AA  0F03               	addlw	3
  4690   0017AC  ECFD  F00D         	call	_EEPROM_Write
  4691   0017B0                     
  4692                           ;ASCENSOR.c: 167:     }
  4693   0017B0  2A11               	incf	guardar@i_699^0,f,c
  4694   0017B2  0E02               	movlw	2
  4695   0017B4  6411               	cpfsgt	guardar@i_699^0,c
  4696   0017B6  EFDF  F00B         	goto	u2021
  4697   0017BA  EFE1  F00B         	goto	u2020
  4698   0017BE                     u2021:
  4699   0017BE  EFCC  F00B         	goto	l2662
  4700   0017C2                     u2020:
  4701   0017C2                     
  4702                           ;ASCENSOR.c: 168:     for (char i=0; i<=2; i++){
  4703   0017C2  6A12               	clrf	guardar@i_700^0,c
  4704   0017C4                     l2674:
  4705                           
  4706                           ;ASCENSOR.c: 169:         media= Fila3[i];
  4707   0017C4  5012               	movf	guardar@i_700^0,w,c
  4708   0017C6  0F80               	addlw	low _Fila3
  4709   0017C8  6ED9               	movwf	fsr2l,c
  4710   0017CA  6ADA               	clrf	fsr2h,c
  4711   0017CC  50DF               	movf	indf2,w,c
  4712   0017CE  6E0F               	movwf	guardar@media^0,c
  4713   0017D0                     
  4714                           ;ASCENSOR.c: 170:         EEPROM_Write(i+6,media);
  4715   0017D0  C00F  F00D         	movff	guardar@media,EEPROM_Write@data
  4716   0017D4  5012               	movf	guardar@i_700^0,w,c
  4717   0017D6  0F06               	addlw	6
  4718   0017D8  ECFD  F00D         	call	_EEPROM_Write
  4719   0017DC                     
  4720                           ;ASCENSOR.c: 171:     }
  4721   0017DC  2A12               	incf	guardar@i_700^0,f,c
  4722   0017DE  0E02               	movlw	2
  4723   0017E0  6412               	cpfsgt	guardar@i_700^0,c
  4724   0017E2  EFF5  F00B         	goto	u2031
  4725   0017E6  EFF7  F00B         	goto	u2030
  4726   0017EA                     u2031:
  4727   0017EA  EFE2  F00B         	goto	l2674
  4728   0017EE                     u2030:
  4729   0017EE  0012               	return		;funcret
  4730   0017F0                     __end_of_guardar:
  4731                           	callstack 0
  4732                           
  4733 ;; *************** function _EEPROM_Write *****************
  4734 ;; Defined at:
  4735 ;;		line 3 in file "../EEPROM_RW.X/eeprom.c"
  4736 ;; Parameters:    Size  Location     Type
  4737 ;;  dir             1    wreg     unsigned char 
  4738 ;;  data            1   12[COMRAM] unsigned char 
  4739 ;; Auto vars:     Size  Location     Type
  4740 ;;  dir             1   13[COMRAM] unsigned char 
  4741 ;; Return value:  Size  Location     Type
  4742 ;;                  1    wreg      void 
  4743 ;; Registers used:
  4744 ;;		wreg, status,2
  4745 ;; Tracked objects:
  4746 ;;		On entry : 0/0
  4747 ;;		On exit  : 0/0
  4748 ;;		Unchanged: 0/0
  4749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4750 ;;      Params:         1       0       0       0       0       0       0       0       0
  4751 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4752 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4753 ;;      Totals:         2       0       0       0       0       0       0       0       0
  4754 ;;Total ram usage:        2 bytes
  4755 ;; Hardware stack levels used: 1
  4756 ;; Hardware stack levels required when called: 5
  4757 ;; This function calls:
  4758 ;;		Nothing
  4759 ;; This function is called by:
  4760 ;;		_Clear
  4761 ;;		_guardar
  4762 ;;		_EEPROM_Clear
  4763 ;; This function uses a non-reentrant model
  4764 ;;
  4765                           
  4766                           	psect	text26
  4767   001BFA                     __ptext26:
  4768                           	callstack 0
  4769   001BFA                     _EEPROM_Write:
  4770                           	callstack 24
  4771                           
  4772                           ;incstack = 0
  4773                           ;EEPROM_Write@dir stored from wreg
  4774   001BFA  6E0E               	movwf	EEPROM_Write@dir^0,c
  4775   001BFC                     
  4776                           ;../EEPROM_RW.X/eeprom.c: 3: void EEPROM_Write(unsigned char dir, unsigned char data);..
      +                          /EEPROM_RW.X/eeprom.c: 4: {;../EEPROM_RW.X/eeprom.c: 5:     EEADR = dir;
  4777   001BFC  C00E  FFA9         	movff	EEPROM_Write@dir,4009	;volatile
  4778   001C00                     
  4779                           ;../EEPROM_RW.X/eeprom.c: 6:     EEDATA = data;
  4780   001C00  C00D  FFA8         	movff	EEPROM_Write@data,4008	;volatile
  4781   001C04                     
  4782                           ;../EEPROM_RW.X/eeprom.c: 7:     EECON1bits.EEPGD = 0;
  4783   001C04  9EA6               	bcf	166,7,c	;volsfr
  4784   001C06                     
  4785                           ;../EEPROM_RW.X/eeprom.c: 8:     EECON1bits.CFGS = 0;
  4786   001C06  9CA6               	bcf	166,6,c	;volsfr
  4787   001C08                     
  4788                           ;../EEPROM_RW.X/eeprom.c: 9:     EECON1bits.WREN = 1;
  4789   001C08  84A6               	bsf	166,2,c	;volsfr
  4790   001C0A                     
  4791                           ;../EEPROM_RW.X/eeprom.c: 10:     INTCONbits.GIE = 0;
  4792   001C0A  9EF2               	bcf	242,7,c	;volatile
  4793   001C0C                     
  4794                           ;../EEPROM_RW.X/eeprom.c: 11:     EECON2 = 0x55;
  4795   001C0C  0E55               	movlw	85
  4796   001C0E  6EA7               	movwf	167,c	;volsfr
  4797   001C10                     
  4798                           ;../EEPROM_RW.X/eeprom.c: 12:     EECON2 = 0x0AA;
  4799   001C10  0EAA               	movlw	170
  4800   001C12  6EA7               	movwf	167,c	;volsfr
  4801   001C14                     
  4802                           ;../EEPROM_RW.X/eeprom.c: 13:     EECON1bits.WR = 1;
  4803   001C14  82A6               	bsf	166,1,c	;volsfr
  4804   001C16                     
  4805                           ;../EEPROM_RW.X/eeprom.c: 14:     INTCONbits.GIE = 1;
  4806   001C16  8EF2               	bsf	242,7,c	;volatile
  4807   001C18                     l396:
  4808   001C18  A8A1               	btfss	161,4,c	;volatile
  4809   001C1A  EF11  F00E         	goto	u1811
  4810   001C1E  EF13  F00E         	goto	u1810
  4811   001C22                     u1811:
  4812   001C22  EF0C  F00E         	goto	l396
  4813   001C26                     u1810:
  4814   001C26                     
  4815                           ;../EEPROM_RW.X/eeprom.c: 16:     PIR2bits.EEIF = 0;
  4816   001C26  98A1               	bcf	161,4,c	;volatile
  4817                           
  4818                           ;../EEPROM_RW.X/eeprom.c: 17:     EECON1bits.WREN = 0;
  4819   001C28  94A6               	bcf	166,2,c	;volsfr
  4820   001C2A  0012               	return		;funcret
  4821   001C2C                     __end_of_EEPROM_Write:
  4822                           	callstack 0
  4823                           
  4824 ;; *************** function _MOD *****************
  4825 ;; Defined at:
  4826 ;;		line 242 in file "ASCENSOR.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;  F               1    wreg     unsigned char 
  4829 ;;  C               1   12[COMRAM] unsigned char 
  4830 ;;  x               1   13[COMRAM] unsigned char 
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;  F               1   14[COMRAM] unsigned char 
  4833 ;; Return value:  Size  Location     Type
  4834 ;;                  1    wreg      void 
  4835 ;; Registers used:
  4836 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/0
  4839 ;;		On exit  : 0/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4842 ;;      Params:         2       0       0       0       0       0       0       0       0
  4843 ;;      Locals:         1       0       0       0       0       0       0       0       0
  4844 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4845 ;;      Totals:         3       0       0       0       0       0       0       0       0
  4846 ;;Total ram usage:        3 bytes
  4847 ;; Hardware stack levels used: 1
  4848 ;; Hardware stack levels required when called: 5
  4849 ;; This function calls:
  4850 ;;		Nothing
  4851 ;; This function is called by:
  4852 ;;		_Modificar
  4853 ;; This function uses a non-reentrant model
  4854 ;;
  4855                           
  4856                           	psect	text27
  4857   0019C2                     __ptext27:
  4858                           	callstack 0
  4859   0019C2                     _MOD:
  4860                           	callstack 24
  4861                           
  4862                           ;incstack = 0
  4863                           ;MOD@F stored from wreg
  4864   0019C2  6E0F               	movwf	MOD@F^0,c
  4865   0019C4                     
  4866                           ;ASCENSOR.c: 243:     C-=12;
  4867   0019C4  0E0C               	movlw	12
  4868   0019C6  5E0D               	subwf	MOD@C^0,f,c
  4869                           
  4870                           ;ASCENSOR.c: 244:     if(F==1){
  4871   0019C8  040F               	decf	MOD@F^0,w,c
  4872   0019CA  A4D8               	btfss	status,2,c
  4873   0019CC  EFEA  F00C         	goto	u2071
  4874   0019D0  EFEC  F00C         	goto	u2070
  4875   0019D4                     u2071:
  4876   0019D4  EFF2  F00C         	goto	l2714
  4877   0019D8                     u2070:
  4878   0019D8                     
  4879                           ;ASCENSOR.c: 245:         Fila1[C]=x;
  4880   0019D8  500D               	movf	MOD@C^0,w,c
  4881   0019DA  0F41               	addlw	low _Fila1
  4882   0019DC  6ED9               	movwf	fsr2l,c
  4883   0019DE  6ADA               	clrf	fsr2h,c
  4884   0019E0  C00E  FFDF         	movff	MOD@x,indf2
  4885   0019E4                     l2714:
  4886                           
  4887                           ;ASCENSOR.c: 248:     if(F==2){
  4888   0019E4  0E02               	movlw	2
  4889   0019E6  180F               	xorwf	MOD@F^0,w,c
  4890   0019E8  A4D8               	btfss	status,2,c
  4891   0019EA  EFF9  F00C         	goto	u2081
  4892   0019EE  EFFB  F00C         	goto	u2080
  4893   0019F2                     u2081:
  4894   0019F2  EF01  F00D         	goto	l2718
  4895   0019F6                     u2080:
  4896   0019F6                     
  4897                           ;ASCENSOR.c: 249:         Fila1[C]=x;
  4898   0019F6  500D               	movf	MOD@C^0,w,c
  4899   0019F8  0F41               	addlw	low _Fila1
  4900   0019FA  6ED9               	movwf	fsr2l,c
  4901   0019FC  6ADA               	clrf	fsr2h,c
  4902   0019FE  C00E  FFDF         	movff	MOD@x,indf2
  4903   001A02                     l2718:
  4904                           
  4905                           ;ASCENSOR.c: 251:     if(F==3){
  4906   001A02  0E03               	movlw	3
  4907   001A04  180F               	xorwf	MOD@F^0,w,c
  4908   001A06  A4D8               	btfss	status,2,c
  4909   001A08  EF08  F00D         	goto	u2091
  4910   001A0C  EF0A  F00D         	goto	u2090
  4911   001A10                     u2091:
  4912   001A10  EF10  F00D         	goto	l196
  4913   001A14                     u2090:
  4914   001A14                     
  4915                           ;ASCENSOR.c: 252:         Fila1[C]=x;
  4916   001A14  500D               	movf	MOD@C^0,w,c
  4917   001A16  0F41               	addlw	low _Fila1
  4918   001A18  6ED9               	movwf	fsr2l,c
  4919   001A1A  6ADA               	clrf	fsr2h,c
  4920   001A1C  C00E  FFDF         	movff	MOD@x,indf2
  4921   001A20                     l196:
  4922   001A20  0012               	return		;funcret
  4923   001A22                     __end_of_MOD:
  4924                           	callstack 0
  4925                           
  4926 ;; *************** function _Lcd_NoBlink *****************
  4927 ;; Defined at:
  4928 ;;		line 129 in file "lcd.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;		None
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;		None
  4933 ;; Return value:  Size  Location     Type
  4934 ;;                  1    wreg      void 
  4935 ;; Registers used:
  4936 ;;		wreg, status,2, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/0
  4939 ;;		On exit  : 0/0
  4940 ;;		Unchanged: 0/0
  4941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4942 ;;      Params:         0       0       0       0       0       0       0       0       0
  4943 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4944 ;;      Temps:          0       0       0       0       0       0       0       0       0
  4945 ;;      Totals:         0       0       0       0       0       0       0       0       0
  4946 ;;Total ram usage:        0 bytes
  4947 ;; Hardware stack levels used: 1
  4948 ;; Hardware stack levels required when called: 7
  4949 ;; This function calls:
  4950 ;;		_Lcd_Cmd
  4951 ;; This function is called by:
  4952 ;;		_Modificar
  4953 ;; This function uses a non-reentrant model
  4954 ;;
  4955                           
  4956                           	psect	text28
  4957   001D26                     __ptext28:
  4958                           	callstack 0
  4959   001D26                     _Lcd_NoBlink:
  4960                           	callstack 22
  4961   001D26                     
  4962                           ;lcd.c: 131:     Lcd_Cmd(0x00);
  4963   001D26  0E00               	movlw	0
  4964   001D28  EC49  F00E         	call	_Lcd_Cmd
  4965                           
  4966                           ;lcd.c: 132:     Lcd_Cmd(0x0C);
  4967   001D2C  0E0C               	movlw	12
  4968   001D2E  EC49  F00E         	call	_Lcd_Cmd
  4969   001D32  0012               	return		;funcret
  4970   001D34                     __end_of_Lcd_NoBlink:
  4971                           	callstack 0
  4972                           
  4973 ;; *************** function _Lcd_Init *****************
  4974 ;; Defined at:
  4975 ;;		line 63 in file "lcd.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;		None
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;		None
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  1    wreg      void 
  4982 ;; Registers used:
  4983 ;;		wreg, status,2, cstack
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  4989 ;;      Params:         0       0       0       0       0       0       0       0       0
  4990 ;;      Locals:         0       0       0       0       0       0       0       0       0
  4991 ;;      Temps:          1       0       0       0       0       0       0       0       0
  4992 ;;      Totals:         1       0       0       0       0       0       0       0       0
  4993 ;;Total ram usage:        1 bytes
  4994 ;; Hardware stack levels used: 1
  4995 ;; Hardware stack levels required when called: 8
  4996 ;; This function calls:
  4997 ;;		_Lcd_Clear
  4998 ;;		_Lcd_Cmd
  4999 ;;		_Lcd_Port
  5000 ;; This function is called by:
  5001 ;;		_main
  5002 ;; This function uses a non-reentrant model
  5003 ;;
  5004                           
  5005                           	psect	text29
  5006   0017F0                     __ptext29:
  5007                           	callstack 0
  5008   0017F0                     _Lcd_Init:
  5009                           	callstack 22
  5010   0017F0                     
  5011                           ;lcd.c: 65:  TRISDbits.TRISD2 = 0;
  5012   0017F0  9495               	bcf	149,2,c	;volatile
  5013                           
  5014                           ;lcd.c: 66:  TRISDbits.TRISD3 = 0;
  5015   0017F2  9695               	bcf	149,3,c	;volatile
  5016                           
  5017                           ;lcd.c: 67:  TRISDbits.TRISD4 = 0;
  5018   0017F4  9895               	bcf	149,4,c	;volatile
  5019                           
  5020                           ;lcd.c: 68:  TRISDbits.TRISD5 = 0;
  5021   0017F6  9A95               	bcf	149,5,c	;volatile
  5022                           
  5023                           ;lcd.c: 69:  TRISDbits.TRISD6 = 0;
  5024   0017F8  9C95               	bcf	149,6,c	;volatile
  5025                           
  5026                           ;lcd.c: 70:  TRISDbits.TRISD7 = 0;
  5027   0017FA  9E95               	bcf	149,7,c	;volatile
  5028   0017FC                     
  5029                           ;lcd.c: 71:     Lcd_Port(0x00);
  5030   0017FC  0E00               	movlw	0
  5031   0017FE  EC11  F00D         	call	_Lcd_Port
  5032   001802                     
  5033                           ;lcd.c: 72:     _delay((unsigned long)((20)*(4000000/4000.0)));
  5034   001802  0E1A               	movlw	26
  5035   001804  6E10               	movwf	??_Lcd_Init^0,c
  5036   001806  0EF8               	movlw	248
  5037   001808                     u3757:
  5038   001808  2EE8               	decfsz	wreg,f,c
  5039   00180A  D7FE               	bra	u3757
  5040   00180C  2E10               	decfsz	??_Lcd_Init^0,f,c
  5041   00180E  D7FC               	bra	u3757
  5042   001810  D000               	nop2	
  5043   001812                     
  5044                           ;lcd.c: 73:     Lcd_Cmd(0x03);
  5045   001812  0E03               	movlw	3
  5046   001814  EC49  F00E         	call	_Lcd_Cmd
  5047   001818                     
  5048                           ;lcd.c: 74:     _delay((unsigned long)((5)*(4000000/4000.0)));
  5049   001818  0E07               	movlw	7
  5050   00181A  6E10               	movwf	??_Lcd_Init^0,c
  5051   00181C  0E7D               	movlw	125
  5052   00181E                     u3767:
  5053   00181E  2EE8               	decfsz	wreg,f,c
  5054   001820  D7FE               	bra	u3767
  5055   001822  2E10               	decfsz	??_Lcd_Init^0,f,c
  5056   001824  D7FC               	bra	u3767
  5057   001826  0000               	nop	
  5058   001828                     
  5059                           ;lcd.c: 75:     Lcd_Cmd(0x03);
  5060   001828  0E03               	movlw	3
  5061   00182A  EC49  F00E         	call	_Lcd_Cmd
  5062   00182E                     
  5063                           ;lcd.c: 76:     _delay((unsigned long)((11)*(4000000/4000.0)));
  5064   00182E  0E0F               	movlw	15
  5065   001830  6E10               	movwf	??_Lcd_Init^0,c
  5066   001832  0E48               	movlw	72
  5067   001834                     u3777:
  5068   001834  2EE8               	decfsz	wreg,f,c
  5069   001836  D7FE               	bra	u3777
  5070   001838  2E10               	decfsz	??_Lcd_Init^0,f,c
  5071   00183A  D7FC               	bra	u3777
  5072   00183C                     
  5073                           ;lcd.c: 77:     Lcd_Cmd(0x03);
  5074   00183C  0E03               	movlw	3
  5075   00183E  EC49  F00E         	call	_Lcd_Cmd
  5076   001842                     
  5077                           ;lcd.c: 78:     Lcd_Cmd(0x02);
  5078   001842  0E02               	movlw	2
  5079   001844  EC49  F00E         	call	_Lcd_Cmd
  5080   001848                     
  5081                           ;lcd.c: 79:     Lcd_Cmd(0x02);
  5082   001848  0E02               	movlw	2
  5083   00184A  EC49  F00E         	call	_Lcd_Cmd
  5084   00184E                     
  5085                           ;lcd.c: 80:     Lcd_Cmd(0x08);
  5086   00184E  0E08               	movlw	8
  5087   001850  EC49  F00E         	call	_Lcd_Cmd
  5088   001854                     
  5089                           ;lcd.c: 81:     Lcd_Cmd(0x00);
  5090   001854  0E00               	movlw	0
  5091   001856  EC49  F00E         	call	_Lcd_Cmd
  5092   00185A                     
  5093                           ;lcd.c: 82:     Lcd_Cmd(0x0C);
  5094   00185A  0E0C               	movlw	12
  5095   00185C  EC49  F00E         	call	_Lcd_Cmd
  5096   001860                     
  5097                           ;lcd.c: 83:     Lcd_Cmd(0x00);
  5098   001860  0E00               	movlw	0
  5099   001862  EC49  F00E         	call	_Lcd_Cmd
  5100   001866                     
  5101                           ;lcd.c: 84:     Lcd_Cmd(0x06);
  5102   001866  0E06               	movlw	6
  5103   001868  EC49  F00E         	call	_Lcd_Cmd
  5104   00186C                     
  5105                           ;lcd.c: 85:     Lcd_Clear();
  5106   00186C  EC9A  F00E         	call	_Lcd_Clear	;wreg free
  5107   001870  0012               	return		;funcret
  5108   001872                     __end_of_Lcd_Init:
  5109                           	callstack 0
  5110                           
  5111 ;; *************** function _Lcd_Clear *****************
  5112 ;; Defined at:
  5113 ;;		line 20 in file "lcd.c"
  5114 ;; Parameters:    Size  Location     Type
  5115 ;;		None
  5116 ;; Auto vars:     Size  Location     Type
  5117 ;;		None
  5118 ;; Return value:  Size  Location     Type
  5119 ;;                  1    wreg      void 
  5120 ;; Registers used:
  5121 ;;		wreg, status,2, cstack
  5122 ;; Tracked objects:
  5123 ;;		On entry : 0/0
  5124 ;;		On exit  : 0/0
  5125 ;;		Unchanged: 0/0
  5126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5127 ;;      Params:         0       0       0       0       0       0       0       0       0
  5128 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5129 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5130 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5131 ;;Total ram usage:        0 bytes
  5132 ;; Hardware stack levels used: 1
  5133 ;; Hardware stack levels required when called: 7
  5134 ;; This function calls:
  5135 ;;		_Lcd_Cmd
  5136 ;; This function is called by:
  5137 ;;		_main
  5138 ;;		_Lcd_Init
  5139 ;; This function uses a non-reentrant model
  5140 ;;
  5141                           
  5142                           	psect	text30
  5143   001D34                     __ptext30:
  5144                           	callstack 0
  5145   001D34                     _Lcd_Clear:
  5146                           	callstack 22
  5147   001D34                     
  5148                           ;lcd.c: 22:     Lcd_Cmd(0);
  5149   001D34  0E00               	movlw	0
  5150   001D36  EC49  F00E         	call	_Lcd_Cmd
  5151                           
  5152                           ;lcd.c: 23:     Lcd_Cmd(1);
  5153   001D3A  0E01               	movlw	1
  5154   001D3C  EC49  F00E         	call	_Lcd_Cmd
  5155   001D40  0012               	return		;funcret
  5156   001D42                     __end_of_Lcd_Clear:
  5157                           	callstack 0
  5158                           
  5159 ;; *************** function _Lcd_CGRAM_Init *****************
  5160 ;; Defined at:
  5161 ;;		line 175 in file "lcd.c"
  5162 ;; Parameters:    Size  Location     Type
  5163 ;;		None
  5164 ;; Auto vars:     Size  Location     Type
  5165 ;;		None
  5166 ;; Return value:  Size  Location     Type
  5167 ;;                  1    wreg      void 
  5168 ;; Registers used:
  5169 ;;		wreg, status,2, cstack
  5170 ;; Tracked objects:
  5171 ;;		On entry : 0/0
  5172 ;;		On exit  : 0/0
  5173 ;;		Unchanged: 0/0
  5174 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5175 ;;      Params:         0       0       0       0       0       0       0       0       0
  5176 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5177 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5178 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5179 ;;Total ram usage:        0 bytes
  5180 ;; Hardware stack levels used: 1
  5181 ;; Hardware stack levels required when called: 7
  5182 ;; This function calls:
  5183 ;;		_Lcd_Cmd
  5184 ;; This function is called by:
  5185 ;;		_main
  5186 ;; This function uses a non-reentrant model
  5187 ;;
  5188                           
  5189                           	psect	text31
  5190   001D42                     __ptext31:
  5191                           	callstack 0
  5192   001D42                     _Lcd_CGRAM_Init:
  5193                           	callstack 23
  5194   001D42                     
  5195                           ;lcd.c: 177:     Lcd_Cmd(0x04);
  5196   001D42  0E04               	movlw	4
  5197   001D44  EC49  F00E         	call	_Lcd_Cmd
  5198                           
  5199                           ;lcd.c: 178:     Lcd_Cmd(0x00);
  5200   001D48  0E00               	movlw	0
  5201   001D4A  EC49  F00E         	call	_Lcd_Cmd
  5202   001D4E  0012               	return		;funcret
  5203   001D50                     __end_of_Lcd_CGRAM_Init:
  5204                           	callstack 0
  5205                           
  5206 ;; *************** function _Lcd_CGRAM_CreateChar *****************
  5207 ;; Defined at:
  5208 ;;		line 136 in file "lcd.c"
  5209 ;; Parameters:    Size  Location     Type
  5210 ;;  add             1    wreg     unsigned char 
  5211 ;;  chardata        1   16[COMRAM] PTR const unsigned char 
  5212 ;;		 -> figura_2(8), figura_1(8), 
  5213 ;; Auto vars:     Size  Location     Type
  5214 ;;  add             1   18[COMRAM] unsigned char 
  5215 ;;  i               1   26[COMRAM] unsigned char 
  5216 ;;  i               1   25[COMRAM] unsigned char 
  5217 ;;  i               1   24[COMRAM] unsigned char 
  5218 ;;  i               1   23[COMRAM] unsigned char 
  5219 ;;  i               1   22[COMRAM] unsigned char 
  5220 ;;  i               1   21[COMRAM] unsigned char 
  5221 ;;  i               1   20[COMRAM] unsigned char 
  5222 ;;  i               1   19[COMRAM] unsigned char 
  5223 ;; Return value:  Size  Location     Type
  5224 ;;                  1    wreg      void 
  5225 ;; Registers used:
  5226 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  5227 ;; Tracked objects:
  5228 ;;		On entry : 0/0
  5229 ;;		On exit  : 0/0
  5230 ;;		Unchanged: 0/0
  5231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5232 ;;      Params:         1       0       0       0       0       0       0       0       0
  5233 ;;      Locals:         9       0       0       0       0       0       0       0       0
  5234 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5235 ;;      Totals:        11       0       0       0       0       0       0       0       0
  5236 ;;Total ram usage:       11 bytes
  5237 ;; Hardware stack levels used: 1
  5238 ;; Hardware stack levels required when called: 7
  5239 ;; This function calls:
  5240 ;;		_Lcd_Write_Char
  5241 ;; This function is called by:
  5242 ;;		_main
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text32
  5247   000A5E                     __ptext32:
  5248                           	callstack 0
  5249   000A5E                     _Lcd_CGRAM_CreateChar:
  5250                           	callstack 23
  5251                           
  5252                           ;incstack = 0
  5253                           ;Lcd_CGRAM_CreateChar@add stored from wreg
  5254   000A5E  6E13               	movwf	Lcd_CGRAM_CreateChar@add^0,c
  5255   000A60                     
  5256                           ;lcd.c: 136: void Lcd_CGRAM_CreateChar(char add, const char* chardata);lcd.c: 137: {;lcd
      +                          .c: 138:     switch(add)
  5257   000A60  EFFF  F005         	goto	l3832
  5258   000A64                     l350:
  5259                           
  5260                           ;lcd.c: 141:             for(char i=0; i<=7; i++)
  5261   000A64  6A14               	clrf	Lcd_CGRAM_CreateChar@i^0,c
  5262   000A66                     l3740:
  5263                           
  5264                           ;lcd.c: 142:                 Lcd_Write_Char(chardata[i]);
  5265   000A66  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  5266   000A68  2414               	addwf	Lcd_CGRAM_CreateChar@i^0,w,c
  5267   000A6A  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  5268   000A6C  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  5269   000A70                     	if	1	;There is more than 1 active tblptr byte
  5270   000A70  0E08               	movlw	high __smallconst
  5271   000A72  6EF7               	movwf	tblptrh,c
  5272   000A74                     	endif
  5273   000A74                     	if	0	;tblptru may be non-zero
  5274   000A74                     	endif
  5275   000A74                     	if	0	;tblptru may be non-zero
  5276   000A74                     	endif
  5277   000A74  0008               	tblrd		*
  5278   000A76  50F5               	movf	tablat,w,c
  5279   000A78  ECAD  F00D         	call	_Lcd_Write_Char
  5280   000A7C  2A14               	incf	Lcd_CGRAM_CreateChar@i^0,f,c
  5281   000A7E  0E07               	movlw	7
  5282   000A80  6414               	cpfsgt	Lcd_CGRAM_CreateChar@i^0,c
  5283   000A82  EF45  F005         	goto	u3531
  5284   000A86  EF47  F005         	goto	u3530
  5285   000A8A                     u3531:
  5286   000A8A  EF33  F005         	goto	l3740
  5287   000A8E                     u3530:
  5288   000A8E  EF22  F006         	goto	l375
  5289   000A92                     l3746:
  5290                           
  5291                           ;lcd.c: 145:             for(char i=8; i<=15; i++)
  5292   000A92  0E08               	movlw	8
  5293   000A94  6E15               	movwf	Lcd_CGRAM_CreateChar@i_910^0,c
  5294   000A96                     l3752:
  5295                           
  5296                           ;lcd.c: 146:                 Lcd_Write_Char(chardata[i-8]);
  5297   000A96  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  5298   000A98  2415               	addwf	Lcd_CGRAM_CreateChar@i_910^0,w,c
  5299   000A9A  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  5300   000A9C  0EF8               	movlw	-8
  5301   000A9E  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  5302   000AA0  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  5303   000AA4                     	if	1	;There is more than 1 active tblptr byte
  5304   000AA4  0E08               	movlw	high __smallconst
  5305   000AA6  6EF7               	movwf	tblptrh,c
  5306   000AA8                     	endif
  5307   000AA8                     	if	0	;tblptru may be non-zero
  5308   000AA8                     	endif
  5309   000AA8                     	if	0	;tblptru may be non-zero
  5310   000AA8                     	endif
  5311   000AA8  0008               	tblrd		*
  5312   000AAA  50F5               	movf	tablat,w,c
  5313   000AAC  ECAD  F00D         	call	_Lcd_Write_Char
  5314   000AB0  2A15               	incf	Lcd_CGRAM_CreateChar@i_910^0,f,c
  5315   000AB2  0E0F               	movlw	15
  5316   000AB4  6415               	cpfsgt	Lcd_CGRAM_CreateChar@i_910^0,c
  5317   000AB6  EF5F  F005         	goto	u3541
  5318   000ABA  EF61  F005         	goto	u3540
  5319   000ABE                     u3541:
  5320   000ABE  EF4B  F005         	goto	l3752
  5321   000AC2                     u3540:
  5322   000AC2  EF22  F006         	goto	l375
  5323   000AC6                     l3758:
  5324                           
  5325                           ;lcd.c: 149:             for(char i=16; i<=23; i++)
  5326   000AC6  0E10               	movlw	16
  5327   000AC8  6E16               	movwf	Lcd_CGRAM_CreateChar@i_911^0,c
  5328   000ACA                     l3764:
  5329                           
  5330                           ;lcd.c: 150:                 Lcd_Write_Char(chardata[i-16]);
  5331   000ACA  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  5332   000ACC  2416               	addwf	Lcd_CGRAM_CreateChar@i_911^0,w,c
  5333   000ACE  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  5334   000AD0  0EF0               	movlw	-16
  5335   000AD2  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  5336   000AD4  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  5337   000AD8                     	if	1	;There is more than 1 active tblptr byte
  5338   000AD8  0E08               	movlw	high __smallconst
  5339   000ADA  6EF7               	movwf	tblptrh,c
  5340   000ADC                     	endif
  5341   000ADC                     	if	0	;tblptru may be non-zero
  5342   000ADC                     	endif
  5343   000ADC                     	if	0	;tblptru may be non-zero
  5344   000ADC                     	endif
  5345   000ADC  0008               	tblrd		*
  5346   000ADE  50F5               	movf	tablat,w,c
  5347   000AE0  ECAD  F00D         	call	_Lcd_Write_Char
  5348   000AE4  2A16               	incf	Lcd_CGRAM_CreateChar@i_911^0,f,c
  5349   000AE6  0E17               	movlw	23
  5350   000AE8  6416               	cpfsgt	Lcd_CGRAM_CreateChar@i_911^0,c
  5351   000AEA  EF79  F005         	goto	u3551
  5352   000AEE  EF7B  F005         	goto	u3550
  5353   000AF2                     u3551:
  5354   000AF2  EF65  F005         	goto	l3764
  5355   000AF6                     u3550:
  5356   000AF6  EF22  F006         	goto	l375
  5357   000AFA                     l3770:
  5358                           
  5359                           ;lcd.c: 153:             for(char i=24; i<=31; i++)
  5360   000AFA  0E18               	movlw	24
  5361   000AFC  6E17               	movwf	Lcd_CGRAM_CreateChar@i_912^0,c
  5362   000AFE                     l3776:
  5363                           
  5364                           ;lcd.c: 154:                 Lcd_Write_Char(chardata[i-24]);
  5365   000AFE  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  5366   000B00  2417               	addwf	Lcd_CGRAM_CreateChar@i_912^0,w,c
  5367   000B02  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  5368   000B04  0EE8               	movlw	-24
  5369   000B06  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  5370   000B08  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  5371   000B0C                     	if	1	;There is more than 1 active tblptr byte
  5372   000B0C  0E08               	movlw	high __smallconst
  5373   000B0E  6EF7               	movwf	tblptrh,c
  5374   000B10                     	endif
  5375   000B10                     	if	0	;tblptru may be non-zero
  5376   000B10                     	endif
  5377   000B10                     	if	0	;tblptru may be non-zero
  5378   000B10                     	endif
  5379   000B10  0008               	tblrd		*
  5380   000B12  50F5               	movf	tablat,w,c
  5381   000B14  ECAD  F00D         	call	_Lcd_Write_Char
  5382   000B18  2A17               	incf	Lcd_CGRAM_CreateChar@i_912^0,f,c
  5383   000B1A  0E1F               	movlw	31
  5384   000B1C  6417               	cpfsgt	Lcd_CGRAM_CreateChar@i_912^0,c
  5385   000B1E  EF93  F005         	goto	u3561
  5386   000B22  EF95  F005         	goto	u3560
  5387   000B26                     u3561:
  5388   000B26  EF7F  F005         	goto	l3776
  5389   000B2A                     u3560:
  5390   000B2A  EF22  F006         	goto	l375
  5391   000B2E                     l3782:
  5392                           
  5393                           ;lcd.c: 157:             for(char i=32; i<=39; i++)
  5394   000B2E  0E20               	movlw	32
  5395   000B30  6E18               	movwf	Lcd_CGRAM_CreateChar@i_913^0,c
  5396   000B32                     l3788:
  5397                           
  5398                           ;lcd.c: 158:                 Lcd_Write_Char(chardata[i-32]);
  5399   000B32  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  5400   000B34  2418               	addwf	Lcd_CGRAM_CreateChar@i_913^0,w,c
  5401   000B36  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  5402   000B38  0EE0               	movlw	-32
  5403   000B3A  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  5404   000B3C  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  5405   000B40                     	if	1	;There is more than 1 active tblptr byte
  5406   000B40  0E08               	movlw	high __smallconst
  5407   000B42  6EF7               	movwf	tblptrh,c
  5408   000B44                     	endif
  5409   000B44                     	if	0	;tblptru may be non-zero
  5410   000B44                     	endif
  5411   000B44                     	if	0	;tblptru may be non-zero
  5412   000B44                     	endif
  5413   000B44  0008               	tblrd		*
  5414   000B46  50F5               	movf	tablat,w,c
  5415   000B48  ECAD  F00D         	call	_Lcd_Write_Char
  5416   000B4C  2A18               	incf	Lcd_CGRAM_CreateChar@i_913^0,f,c
  5417   000B4E  0E27               	movlw	39
  5418   000B50  6418               	cpfsgt	Lcd_CGRAM_CreateChar@i_913^0,c
  5419   000B52  EFAD  F005         	goto	u3571
  5420   000B56  EFAF  F005         	goto	u3570
  5421   000B5A                     u3571:
  5422   000B5A  EF99  F005         	goto	l3788
  5423   000B5E                     u3570:
  5424   000B5E  EF22  F006         	goto	l375
  5425   000B62                     l3794:
  5426                           
  5427                           ;lcd.c: 161:             for(char i=40; i<=47; i++)
  5428   000B62  0E28               	movlw	40
  5429   000B64  6E19               	movwf	Lcd_CGRAM_CreateChar@i_914^0,c
  5430   000B66                     l3800:
  5431                           
  5432                           ;lcd.c: 162:                 Lcd_Write_Char(chardata[i-40]);
  5433   000B66  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  5434   000B68  2419               	addwf	Lcd_CGRAM_CreateChar@i_914^0,w,c
  5435   000B6A  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  5436   000B6C  0ED8               	movlw	-40
  5437   000B6E  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  5438   000B70  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  5439   000B74                     	if	1	;There is more than 1 active tblptr byte
  5440   000B74  0E08               	movlw	high __smallconst
  5441   000B76  6EF7               	movwf	tblptrh,c
  5442   000B78                     	endif
  5443   000B78                     	if	0	;tblptru may be non-zero
  5444   000B78                     	endif
  5445   000B78                     	if	0	;tblptru may be non-zero
  5446   000B78                     	endif
  5447   000B78  0008               	tblrd		*
  5448   000B7A  50F5               	movf	tablat,w,c
  5449   000B7C  ECAD  F00D         	call	_Lcd_Write_Char
  5450   000B80  2A19               	incf	Lcd_CGRAM_CreateChar@i_914^0,f,c
  5451   000B82  0E2F               	movlw	47
  5452   000B84  6419               	cpfsgt	Lcd_CGRAM_CreateChar@i_914^0,c
  5453   000B86  EFC7  F005         	goto	u3581
  5454   000B8A  EFC9  F005         	goto	u3580
  5455   000B8E                     u3581:
  5456   000B8E  EFB3  F005         	goto	l3800
  5457   000B92                     u3580:
  5458   000B92  EF22  F006         	goto	l375
  5459   000B96                     l3806:
  5460                           
  5461                           ;lcd.c: 165:             for(char i=48; i<=55; i++)
  5462   000B96  0E30               	movlw	48
  5463   000B98  6E1A               	movwf	Lcd_CGRAM_CreateChar@i_915^0,c
  5464   000B9A                     l3812:
  5465                           
  5466                           ;lcd.c: 166:                 Lcd_Write_Char(chardata[i-48]);
  5467   000B9A  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  5468   000B9C  241A               	addwf	Lcd_CGRAM_CreateChar@i_915^0,w,c
  5469   000B9E  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  5470   000BA0  0ED0               	movlw	-48
  5471   000BA2  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  5472   000BA4  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  5473   000BA8                     	if	1	;There is more than 1 active tblptr byte
  5474   000BA8  0E08               	movlw	high __smallconst
  5475   000BAA  6EF7               	movwf	tblptrh,c
  5476   000BAC                     	endif
  5477   000BAC                     	if	0	;tblptru may be non-zero
  5478   000BAC                     	endif
  5479   000BAC                     	if	0	;tblptru may be non-zero
  5480   000BAC                     	endif
  5481   000BAC  0008               	tblrd		*
  5482   000BAE  50F5               	movf	tablat,w,c
  5483   000BB0  ECAD  F00D         	call	_Lcd_Write_Char
  5484   000BB4  2A1A               	incf	Lcd_CGRAM_CreateChar@i_915^0,f,c
  5485   000BB6  0E37               	movlw	55
  5486   000BB8  641A               	cpfsgt	Lcd_CGRAM_CreateChar@i_915^0,c
  5487   000BBA  EFE1  F005         	goto	u3591
  5488   000BBE  EFE3  F005         	goto	u3590
  5489   000BC2                     u3591:
  5490   000BC2  EFCD  F005         	goto	l3812
  5491   000BC6                     u3590:
  5492   000BC6  EF22  F006         	goto	l375
  5493   000BCA                     l3818:
  5494                           
  5495                           ;lcd.c: 169:             for(char i=56; i<=63; i++)
  5496   000BCA  0E38               	movlw	56
  5497   000BCC  6E1B               	movwf	Lcd_CGRAM_CreateChar@i_916^0,c
  5498   000BCE                     l3824:
  5499                           
  5500                           ;lcd.c: 170:                 Lcd_Write_Char(chardata[i-56]);
  5501   000BCE  5011               	movf	Lcd_CGRAM_CreateChar@chardata^0,w,c
  5502   000BD0  241B               	addwf	Lcd_CGRAM_CreateChar@i_916^0,w,c
  5503   000BD2  6E12               	movwf	??_Lcd_CGRAM_CreateChar^0,c
  5504   000BD4  0EC8               	movlw	-56
  5505   000BD6  2612               	addwf	??_Lcd_CGRAM_CreateChar^0,f,c
  5506   000BD8  C012  FFF6         	movff	??_Lcd_CGRAM_CreateChar,tblptrl
  5507   000BDC                     	if	1	;There is more than 1 active tblptr byte
  5508   000BDC  0E08               	movlw	high __smallconst
  5509   000BDE  6EF7               	movwf	tblptrh,c
  5510   000BE0                     	endif
  5511   000BE0                     	if	0	;tblptru may be non-zero
  5512   000BE0                     	endif
  5513   000BE0                     	if	0	;tblptru may be non-zero
  5514   000BE0                     	endif
  5515   000BE0  0008               	tblrd		*
  5516   000BE2  50F5               	movf	tablat,w,c
  5517   000BE4  ECAD  F00D         	call	_Lcd_Write_Char
  5518   000BE8  2A1B               	incf	Lcd_CGRAM_CreateChar@i_916^0,f,c
  5519   000BEA  0E3F               	movlw	63
  5520   000BEC  641B               	cpfsgt	Lcd_CGRAM_CreateChar@i_916^0,c
  5521   000BEE  EFFB  F005         	goto	u3601
  5522   000BF2  EFFD  F005         	goto	u3600
  5523   000BF6                     u3601:
  5524   000BF6  EFE7  F005         	goto	l3824
  5525   000BFA                     u3600:
  5526   000BFA  EF22  F006         	goto	l375
  5527   000BFE                     l3832:
  5528   000BFE  5013               	movf	Lcd_CGRAM_CreateChar@add^0,w,c
  5529                           
  5530                           ; Switch size 1, requested type "simple"
  5531                           ; Number of cases is 8, Range of values is 0 to 7
  5532                           ; switch strategies available:
  5533                           ; Name         Instructions Cycles
  5534                           ; simple_byte           25    13 (average)
  5535                           ;	Chosen strategy is simple_byte
  5536   000C00  0A00               	xorlw	0	; case 0
  5537   000C02  B4D8               	btfsc	status,2,c
  5538   000C04  EF32  F005         	goto	l350
  5539   000C08  0A01               	xorlw	1	; case 1
  5540   000C0A  B4D8               	btfsc	status,2,c
  5541   000C0C  EF49  F005         	goto	l3746
  5542   000C10  0A03               	xorlw	3	; case 2
  5543   000C12  B4D8               	btfsc	status,2,c
  5544   000C14  EF63  F005         	goto	l3758
  5545   000C18  0A01               	xorlw	1	; case 3
  5546   000C1A  B4D8               	btfsc	status,2,c
  5547   000C1C  EF7D  F005         	goto	l3770
  5548   000C20  0A07               	xorlw	7	; case 4
  5549   000C22  B4D8               	btfsc	status,2,c
  5550   000C24  EF97  F005         	goto	l3782
  5551   000C28  0A01               	xorlw	1	; case 5
  5552   000C2A  B4D8               	btfsc	status,2,c
  5553   000C2C  EFB1  F005         	goto	l3794
  5554   000C30  0A03               	xorlw	3	; case 6
  5555   000C32  B4D8               	btfsc	status,2,c
  5556   000C34  EFCB  F005         	goto	l3806
  5557   000C38  0A01               	xorlw	1	; case 7
  5558   000C3A  B4D8               	btfsc	status,2,c
  5559   000C3C  EFE5  F005         	goto	l3818
  5560   000C40  EF22  F006         	goto	l375
  5561   000C44                     l375:
  5562   000C44  0012               	return		;funcret
  5563   000C46                     __end_of_Lcd_CGRAM_CreateChar:
  5564                           	callstack 0
  5565                           
  5566 ;; *************** function _Lcd_Write_Char *****************
  5567 ;; Defined at:
  5568 ;;		line 88 in file "lcd.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  a               1    wreg     unsigned char 
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  a               1   15[COMRAM] unsigned char 
  5573 ;;  y               1   14[COMRAM] unsigned char 
  5574 ;;  temp            1   13[COMRAM] unsigned char 
  5575 ;; Return value:  Size  Location     Type
  5576 ;;                  1    wreg      void 
  5577 ;; Registers used:
  5578 ;;		wreg, status,2, status,0, cstack
  5579 ;; Tracked objects:
  5580 ;;		On entry : 0/0
  5581 ;;		On exit  : 0/0
  5582 ;;		Unchanged: 0/0
  5583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5584 ;;      Params:         0       0       0       0       0       0       0       0       0
  5585 ;;      Locals:         3       0       0       0       0       0       0       0       0
  5586 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5587 ;;      Totals:         3       0       0       0       0       0       0       0       0
  5588 ;;Total ram usage:        3 bytes
  5589 ;; Hardware stack levels used: 1
  5590 ;; Hardware stack levels required when called: 6
  5591 ;; This function calls:
  5592 ;;		_Lcd_Port
  5593 ;; This function is called by:
  5594 ;;		_Actualizar_Matriz
  5595 ;;		_Modificar
  5596 ;;		_Lcd_Write_String
  5597 ;;		_Lcd_CGRAM_CreateChar
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           	psect	text33
  5602   001B5A                     __ptext33:
  5603                           	callstack 0
  5604   001B5A                     _Lcd_Write_Char:
  5605                           	callstack 22
  5606                           
  5607                           ;incstack = 0
  5608                           ;Lcd_Write_Char@a stored from wreg
  5609   001B5A  6E10               	movwf	Lcd_Write_Char@a^0,c
  5610   001B5C                     
  5611                           ;lcd.c: 88: void Lcd_Write_Char(char a);lcd.c: 89: {;lcd.c: 90:     char temp,y;;lcd.c: 
      +                          91:     temp = a&0x0F;
  5612   001B5C  5010               	movf	Lcd_Write_Char@a^0,w,c
  5613   001B5E  0B0F               	andlw	15
  5614   001B60  6E0E               	movwf	Lcd_Write_Char@temp^0,c
  5615                           
  5616                           ;lcd.c: 92:     y = a&0xF0;
  5617   001B62  5010               	movf	Lcd_Write_Char@a^0,w,c
  5618   001B64  0BF0               	andlw	240
  5619   001B66  6E0F               	movwf	Lcd_Write_Char@y^0,c
  5620   001B68                     
  5621                           ;lcd.c: 93:     LATEbits.LE0 = 1;
  5622   001B68  808D               	bsf	141,0,c	;volatile
  5623   001B6A                     
  5624                           ;lcd.c: 94:     Lcd_Port(y>>4);
  5625   001B6A  380F               	swapf	Lcd_Write_Char@y^0,w,c
  5626   001B6C  0B0F               	andlw	15
  5627   001B6E  EC11  F00D         	call	_Lcd_Port
  5628   001B72                     
  5629                           ;lcd.c: 95:     LATEbits.LE1 = 1;
  5630   001B72  828D               	bsf	141,1,c	;volatile
  5631   001B74                     
  5632                           ;lcd.c: 96:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  5633   001B74  0E0D               	movlw	13
  5634   001B76                     u3787:
  5635   001B76  2EE8               	decfsz	wreg,f,c
  5636   001B78  D7FE               	bra	u3787
  5637   001B7A  0000               	nop	
  5638   001B7C                     
  5639                           ;lcd.c: 97:     LATEbits.LE1 = 0;
  5640   001B7C  928D               	bcf	141,1,c	;volatile
  5641   001B7E                     
  5642                           ;lcd.c: 98:     Lcd_Port(temp);
  5643   001B7E  500E               	movf	Lcd_Write_Char@temp^0,w,c
  5644   001B80  EC11  F00D         	call	_Lcd_Port
  5645   001B84                     
  5646                           ;lcd.c: 99:     LATEbits.LE1 = 1;
  5647   001B84  828D               	bsf	141,1,c	;volatile
  5648   001B86                     
  5649                           ;lcd.c: 100:     _delay((unsigned long)((40)*(4000000/4000000.0)));
  5650   001B86  0E0D               	movlw	13
  5651   001B88                     u3797:
  5652   001B88  2EE8               	decfsz	wreg,f,c
  5653   001B8A  D7FE               	bra	u3797
  5654   001B8C  0000               	nop	
  5655   001B8E                     
  5656                           ;lcd.c: 101:     LATEbits.LE1 = 0;
  5657   001B8E  928D               	bcf	141,1,c	;volatile
  5658   001B90  0012               	return		;funcret
  5659   001B92                     __end_of_Lcd_Write_Char:
  5660                           	callstack 0
  5661                           
  5662 ;; *************** function _Lcd_CGRAM_Close *****************
  5663 ;; Defined at:
  5664 ;;		line 181 in file "lcd.c"
  5665 ;; Parameters:    Size  Location     Type
  5666 ;;		None
  5667 ;; Auto vars:     Size  Location     Type
  5668 ;;		None
  5669 ;; Return value:  Size  Location     Type
  5670 ;;                  1    wreg      void 
  5671 ;; Registers used:
  5672 ;;		wreg, status,2, cstack
  5673 ;; Tracked objects:
  5674 ;;		On entry : 0/0
  5675 ;;		On exit  : 0/0
  5676 ;;		Unchanged: 0/0
  5677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5678 ;;      Params:         0       0       0       0       0       0       0       0       0
  5679 ;;      Locals:         0       0       0       0       0       0       0       0       0
  5680 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5681 ;;      Totals:         0       0       0       0       0       0       0       0       0
  5682 ;;Total ram usage:        0 bytes
  5683 ;; Hardware stack levels used: 1
  5684 ;; Hardware stack levels required when called: 7
  5685 ;; This function calls:
  5686 ;;		_Lcd_Cmd
  5687 ;; This function is called by:
  5688 ;;		_main
  5689 ;; This function uses a non-reentrant model
  5690 ;;
  5691                           
  5692                           	psect	text34
  5693   001D50                     __ptext34:
  5694                           	callstack 0
  5695   001D50                     _Lcd_CGRAM_Close:
  5696                           	callstack 23
  5697   001D50                     
  5698                           ;lcd.c: 183:     Lcd_Cmd(0x00);
  5699   001D50  0E00               	movlw	0
  5700   001D52  EC49  F00E         	call	_Lcd_Cmd
  5701                           
  5702                           ;lcd.c: 184:     Lcd_Cmd(0x02);
  5703   001D56  0E02               	movlw	2
  5704   001D58  EC49  F00E         	call	_Lcd_Cmd
  5705   001D5C  0012               	return		;funcret
  5706   001D5E                     __end_of_Lcd_CGRAM_Close:
  5707                           	callstack 0
  5708                           
  5709 ;; *************** function _Lcd_Cmd *****************
  5710 ;; Defined at:
  5711 ;;		line 11 in file "lcd.c"
  5712 ;; Parameters:    Size  Location     Type
  5713 ;;  a               1    wreg     unsigned char 
  5714 ;; Auto vars:     Size  Location     Type
  5715 ;;  a               1   14[COMRAM] unsigned char 
  5716 ;; Return value:  Size  Location     Type
  5717 ;;                  1    wreg      void 
  5718 ;; Registers used:
  5719 ;;		wreg, status,2, cstack
  5720 ;; Tracked objects:
  5721 ;;		On entry : 0/0
  5722 ;;		On exit  : 0/0
  5723 ;;		Unchanged: 0/0
  5724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5725 ;;      Params:         0       0       0       0       0       0       0       0       0
  5726 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5727 ;;      Temps:          1       0       0       0       0       0       0       0       0
  5728 ;;      Totals:         2       0       0       0       0       0       0       0       0
  5729 ;;Total ram usage:        2 bytes
  5730 ;; Hardware stack levels used: 1
  5731 ;; Hardware stack levels required when called: 6
  5732 ;; This function calls:
  5733 ;;		_Lcd_Port
  5734 ;; This function is called by:
  5735 ;;		_Lcd_Clear
  5736 ;;		_Lcd_Set_Cursor
  5737 ;;		_Lcd_Init
  5738 ;;		_Lcd_NoBlink
  5739 ;;		_Lcd_CGRAM_Init
  5740 ;;		_Lcd_CGRAM_Close
  5741 ;;		_Lcd_Shift_Right
  5742 ;;		_Lcd_Shift_Left
  5743 ;; This function uses a non-reentrant model
  5744 ;;
  5745                           
  5746                           	psect	text35
  5747   001C92                     __ptext35:
  5748                           	callstack 0
  5749   001C92                     _Lcd_Cmd:
  5750                           	callstack 22
  5751                           
  5752                           ;incstack = 0
  5753                           ;Lcd_Cmd@a stored from wreg
  5754   001C92  6E0F               	movwf	Lcd_Cmd@a^0,c
  5755   001C94                     
  5756                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATEbits.LE0 = 0;
  5757   001C94  908D               	bcf	141,0,c	;volatile
  5758   001C96                     
  5759                           ;lcd.c: 14:     Lcd_Port(a);
  5760   001C96  500F               	movf	Lcd_Cmd@a^0,w,c
  5761   001C98  EC11  F00D         	call	_Lcd_Port
  5762   001C9C                     
  5763                           ;lcd.c: 15:     LATEbits.LE1 = 1;
  5764   001C9C  828D               	bsf	141,1,c	;volatile
  5765   001C9E                     
  5766                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
  5767   001C9E  0E06               	movlw	6
  5768   001CA0  6E0E               	movwf	??_Lcd_Cmd^0,c
  5769   001CA2  0E30               	movlw	48
  5770   001CA4                     u3807:
  5771   001CA4  2EE8               	decfsz	wreg,f,c
  5772   001CA6  D7FE               	bra	u3807
  5773   001CA8  2E0E               	decfsz	??_Lcd_Cmd^0,f,c
  5774   001CAA  D7FC               	bra	u3807
  5775   001CAC  D000               	nop2	
  5776   001CAE                     
  5777                           ;lcd.c: 17:     LATEbits.LE1 = 0;
  5778   001CAE  928D               	bcf	141,1,c	;volatile
  5779   001CB0  0012               	return		;funcret
  5780   001CB2                     __end_of_Lcd_Cmd:
  5781                           	callstack 0
  5782                           
  5783 ;; *************** function _Lcd_Port *****************
  5784 ;; Defined at:
  5785 ;;		line 3 in file "lcd.c"
  5786 ;; Parameters:    Size  Location     Type
  5787 ;;  a               1    wreg     unsigned char 
  5788 ;; Auto vars:     Size  Location     Type
  5789 ;;  a               1   12[COMRAM] unsigned char 
  5790 ;; Return value:  Size  Location     Type
  5791 ;;                  1    wreg      void 
  5792 ;; Registers used:
  5793 ;;		wreg
  5794 ;; Tracked objects:
  5795 ;;		On entry : 0/0
  5796 ;;		On exit  : 0/0
  5797 ;;		Unchanged: 0/0
  5798 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5799 ;;      Params:         0       0       0       0       0       0       0       0       0
  5800 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5801 ;;      Temps:          0       0       0       0       0       0       0       0       0
  5802 ;;      Totals:         1       0       0       0       0       0       0       0       0
  5803 ;;Total ram usage:        1 bytes
  5804 ;; Hardware stack levels used: 1
  5805 ;; Hardware stack levels required when called: 5
  5806 ;; This function calls:
  5807 ;;		Nothing
  5808 ;; This function is called by:
  5809 ;;		_Lcd_Cmd
  5810 ;;		_Lcd_Init
  5811 ;;		_Lcd_Write_Char
  5812 ;; This function uses a non-reentrant model
  5813 ;;
  5814                           
  5815                           	psect	text36
  5816   001A22                     __ptext36:
  5817                           	callstack 0
  5818   001A22                     _Lcd_Port:
  5819                           	callstack 22
  5820                           
  5821                           ;incstack = 0
  5822                           ;Lcd_Port@a stored from wreg
  5823   001A22  6E0D               	movwf	Lcd_Port@a^0,c
  5824   001A24                     
  5825                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LD4 = 1) 
      +                          : (LATDbits.LD4 = 0);
  5826   001A24  A00D               	btfss	Lcd_Port@a^0,0,c
  5827   001A26  EF17  F00D         	goto	u2871
  5828   001A2A  EF19  F00D         	goto	u2870
  5829   001A2E                     u2871:
  5830   001A2E  EF1C  F00D         	goto	l291
  5831   001A32                     u2870:
  5832   001A32  888C               	bsf	140,4,c	;volatile
  5833   001A34  EF1D  F00D         	goto	l3244
  5834   001A38                     l291:
  5835   001A38  988C               	bcf	140,4,c	;volatile
  5836   001A3A                     l3244:
  5837                           
  5838                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LD5 = 1) : (LATDbits.LD5 = 0);
  5839   001A3A  A20D               	btfss	Lcd_Port@a^0,1,c
  5840   001A3C  EF22  F00D         	goto	u2881
  5841   001A40  EF24  F00D         	goto	u2880
  5842   001A44                     u2881:
  5843   001A44  EF27  F00D         	goto	l295
  5844   001A48                     u2880:
  5845   001A48  8A8C               	bsf	140,5,c	;volatile
  5846   001A4A  EF28  F00D         	goto	l3248
  5847   001A4E                     l295:
  5848   001A4E  9A8C               	bcf	140,5,c	;volatile
  5849   001A50                     l3248:
  5850                           
  5851                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LD6 = 1) : (LATDbits.LD6 = 0);
  5852   001A50  A40D               	btfss	Lcd_Port@a^0,2,c
  5853   001A52  EF2D  F00D         	goto	u2891
  5854   001A56  EF2F  F00D         	goto	u2890
  5855   001A5A                     u2891:
  5856   001A5A  EF32  F00D         	goto	l299
  5857   001A5E                     u2890:
  5858   001A5E  8C8C               	bsf	140,6,c	;volatile
  5859   001A60  EF33  F00D         	goto	l3252
  5860   001A64                     l299:
  5861   001A64  9C8C               	bcf	140,6,c	;volatile
  5862   001A66                     l3252:
  5863                           
  5864                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LD7 = 1) : (LATDbits.LD7 = 0);
  5865   001A66  A60D               	btfss	Lcd_Port@a^0,3,c
  5866   001A68  EF38  F00D         	goto	u2901
  5867   001A6C  EF3A  F00D         	goto	u2900
  5868   001A70                     u2901:
  5869   001A70  EF3D  F00D         	goto	l303
  5870   001A74                     u2900:
  5871   001A74  8E8C               	bsf	140,7,c	;volatile
  5872   001A76  EF3E  F00D         	goto	l306
  5873   001A7A                     l303:
  5874   001A7A  9E8C               	bcf	140,7,c	;volatile
  5875   001A7C                     l306:
  5876   001A7C  0012               	return		;funcret
  5877   001A7E                     __end_of_Lcd_Port:
  5878                           	callstack 0
  5879                           
  5880 ;; *************** function _LowISR *****************
  5881 ;; Defined at:
  5882 ;;		line 187 in file "ASCENSOR.c"
  5883 ;; Parameters:    Size  Location     Type
  5884 ;;		None
  5885 ;; Auto vars:     Size  Location     Type
  5886 ;;  dummy           1   11[COMRAM] volatile unsigned char 
  5887 ;; Return value:  Size  Location     Type
  5888 ;;                  1    wreg      void 
  5889 ;; Registers used:
  5890 ;;		wreg, status,2, status,0, cstack
  5891 ;; Tracked objects:
  5892 ;;		On entry : 0/0
  5893 ;;		On exit  : 0/0
  5894 ;;		Unchanged: 0/0
  5895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  5896 ;;      Params:         0       0       0       0       0       0       0       0       0
  5897 ;;      Locals:         1       0       0       0       0       0       0       0       0
  5898 ;;      Temps:          3       0       0       0       0       0       0       0       0
  5899 ;;      Totals:         4       0       0       0       0       0       0       0       0
  5900 ;;Total ram usage:        4 bytes
  5901 ;; Hardware stack levels used: 1
  5902 ;; Hardware stack levels required when called: 4
  5903 ;; This function calls:
  5904 ;;		_Lcd_Blink
  5905 ;;		i1_Lcd_Set_Cursor
  5906 ;; This function is called by:
  5907 ;;		Interrupt level 1
  5908 ;; This function uses a non-reentrant model
  5909 ;;
  5910                           
  5911                           	psect	intcodelo
  5912   000018                     __pintcodelo:
  5913                           	callstack 0
  5914   000018                     _LowISR:
  5915                           	callstack 19
  5916                           
  5917                           ;incstack = 0
  5918   000018  804A               	bsf	int$flags,0,c	;set compiler interrupt flag (level 1)
  5919   00001A  CFD8 F009          	movff	status,??_LowISR
  5920   00001E  CFE8 F00A          	movff	wreg,??_LowISR+1
  5921   000022  CFE0 F00B          	movff	bsr,??_LowISR+2
  5922   000026                     
  5923                           ;ASCENSOR.c: 188:     Lcd_Blink();
  5924   000026  ECAF  F00E         	call	_Lcd_Blink	;wreg free
  5925   00002A                     
  5926                           ;ASCENSOR.c: 189:     if (INTCONbits.RBIF){
  5927   00002A  A0F2               	btfss	242,0,c	;volatile
  5928   00002C  EF1A  F000         	goto	i1u272_21
  5929   000030  EF1C  F000         	goto	i1u272_20
  5930   000034                     i1u272_21:
  5931   000034  EF64  F000         	goto	i1l176
  5932   000038                     i1u272_20:
  5933   000038                     
  5934                           ;ASCENSOR.c: 190:        volatile unsigned char dummy = PORTB;
  5935   000038  CF81 F00C          	movff	3969,LowISR@dummy	;volatile
  5936                           
  5937                           ;ASCENSOR.c: 191:        INTCONbits.RBIF=0;
  5938   00003C  90F2               	bcf	242,0,c	;volatile
  5939                           
  5940                           ;ASCENSOR.c: 193:        if (PORTBbits.RB6==1 && f>1){
  5941   00003E  AC81               	btfss	129,6,c	;volatile
  5942   000040  EF24  F000         	goto	i1u273_21
  5943   000044  EF26  F000         	goto	i1u273_20
  5944   000048                     i1u273_21:
  5945   000048  EF2F  F000         	goto	i1l3154
  5946   00004C                     i1u273_20:
  5947   00004C  0E01               	movlw	1
  5948   00004E  6446               	cpfsgt	_f^0,c
  5949   000050  EF2C  F000         	goto	i1u274_21
  5950   000054  EF2E  F000         	goto	i1u274_20
  5951   000058                     i1u274_21:
  5952   000058  EF2F  F000         	goto	i1l3154
  5953   00005C                     i1u274_20:
  5954   00005C                     
  5955                           ;ASCENSOR.c: 194:            f--;
  5956   00005C  0646               	decf	_f^0,f,c
  5957   00005E                     i1l3154:
  5958                           
  5959                           ;ASCENSOR.c: 196:        if (PORTBbits.RB7==1 && f<3){
  5960   00005E  AE81               	btfss	129,7,c	;volatile
  5961   000060  EF34  F000         	goto	i1u275_21
  5962   000064  EF36  F000         	goto	i1u275_20
  5963   000068                     i1u275_21:
  5964   000068  EF3F  F000         	goto	i1l3160
  5965   00006C                     i1u275_20:
  5966   00006C  0E03               	movlw	3
  5967   00006E  6046               	cpfslt	_f^0,c
  5968   000070  EF3C  F000         	goto	i1u276_21
  5969   000074  EF3E  F000         	goto	i1u276_20
  5970   000078                     i1u276_21:
  5971   000078  EF3F  F000         	goto	i1l3160
  5972   00007C                     i1u276_20:
  5973   00007C                     
  5974                           ;ASCENSOR.c: 197:            f++;
  5975   00007C  2A46               	incf	_f^0,f,c
  5976   00007E                     i1l3160:
  5977                           
  5978                           ;ASCENSOR.c: 199:        if (PORTBbits.RB4==1 && c>13){
  5979   00007E  A881               	btfss	129,4,c	;volatile
  5980   000080  EF44  F000         	goto	i1u277_21
  5981   000084  EF46  F000         	goto	i1u277_20
  5982   000088                     i1u277_21:
  5983   000088  EF4F  F000         	goto	i1l3166
  5984   00008C                     i1u277_20:
  5985   00008C  0E0D               	movlw	13
  5986   00008E  6445               	cpfsgt	_c^0,c
  5987   000090  EF4C  F000         	goto	i1u278_21
  5988   000094  EF4E  F000         	goto	i1u278_20
  5989   000098                     i1u278_21:
  5990   000098  EF4F  F000         	goto	i1l3166
  5991   00009C                     i1u278_20:
  5992   00009C                     
  5993                           ;ASCENSOR.c: 200:           c--;
  5994   00009C  0645               	decf	_c^0,f,c
  5995   00009E                     i1l3166:
  5996                           
  5997                           ;ASCENSOR.c: 202:        if (PORTBbits.RB5==1 && c< 15){
  5998   00009E  AA81               	btfss	129,5,c	;volatile
  5999   0000A0  EF54  F000         	goto	i1u279_21
  6000   0000A4  EF56  F000         	goto	i1u279_20
  6001   0000A8                     i1u279_21:
  6002   0000A8  EF5F  F000         	goto	i1l3172
  6003   0000AC                     i1u279_20:
  6004   0000AC  0E0F               	movlw	15
  6005   0000AE  6045               	cpfslt	_c^0,c
  6006   0000B0  EF5C  F000         	goto	i1u280_21
  6007   0000B4  EF5E  F000         	goto	i1u280_20
  6008   0000B8                     i1u280_21:
  6009   0000B8  EF5F  F000         	goto	i1l3172
  6010   0000BC                     i1u280_20:
  6011   0000BC                     
  6012                           ;ASCENSOR.c: 203:            c++;
  6013   0000BC  2A45               	incf	_c^0,f,c
  6014   0000BE                     i1l3172:
  6015                           
  6016                           ;ASCENSOR.c: 206:        Lcd_Set_Cursor(f,c);
  6017   0000BE  C045  F004         	movff	_c,i1Lcd_Set_Cursor@b
  6018   0000C2  5046               	movf	_f^0,w,c
  6019   0000C4  ECB3  F009         	call	i1_Lcd_Set_Cursor
  6020   0000C8                     i1l176:
  6021   0000C8  C00B  FFE0         	movff	??_LowISR+2,bsr
  6022   0000CC  C00A  FFE8         	movff	??_LowISR+1,wreg
  6023   0000D0  C009  FFD8         	movff	??_LowISR,status
  6024   0000D4  904A               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  6025   0000D6  0010               	retfie	
  6026   0000D8                     __end_of_LowISR:
  6027                           	callstack 0
  6028                           
  6029 ;; *************** function i1_Lcd_Set_Cursor *****************
  6030 ;; Defined at:
  6031 ;;		line 26 in file "lcd.c"
  6032 ;; Parameters:    Size  Location     Type
  6033 ;;  a               1    wreg     unsigned char 
  6034 ;;  b               1    3[COMRAM] unsigned char 
  6035 ;; Auto vars:     Size  Location     Type
  6036 ;;  a               1    4[COMRAM] unsigned char 
  6037 ;;  temp            1    7[COMRAM] unsigned char 
  6038 ;;  y               1    6[COMRAM] unsigned char 
  6039 ;;  z               1    5[COMRAM] unsigned char 
  6040 ;; Return value:  Size  Location     Type
  6041 ;;                  1    wreg      void 
  6042 ;; Registers used:
  6043 ;;		wreg, status,2, status,0, cstack
  6044 ;; Tracked objects:
  6045 ;;		On entry : 0/0
  6046 ;;		On exit  : 0/0
  6047 ;;		Unchanged: 0/0
  6048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6049 ;;      Params:         1       0       0       0       0       0       0       0       0
  6050 ;;      Locals:         4       0       0       0       0       0       0       0       0
  6051 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6052 ;;      Totals:         5       0       0       0       0       0       0       0       0
  6053 ;;Total ram usage:        5 bytes
  6054 ;; Hardware stack levels used: 1
  6055 ;; Hardware stack levels required when called: 3
  6056 ;; This function calls:
  6057 ;;		i1_Lcd_Cmd
  6058 ;; This function is called by:
  6059 ;;		_LowISR
  6060 ;; This function uses a non-reentrant model
  6061 ;;
  6062                           
  6063                           	psect	text38
  6064   001366                     __ptext38:
  6065                           	callstack 0
  6066   001366                     i1_Lcd_Set_Cursor:
  6067                           	callstack 19
  6068                           
  6069                           ;incstack = 0
  6070                           ;i1Lcd_Set_Cursor@a stored from wreg
  6071   001366  6E05               	movwf	i1Lcd_Set_Cursor@a^0,c
  6072   001368                     
  6073                           ;lcd.c: 26: void Lcd_Set_Cursor(char a, char b);lcd.c: 27: {;lcd.c: 28:     char temp,z,
      +                          y;;lcd.c: 29:     if(a == 1)
  6074   001368  0405               	decf	i1Lcd_Set_Cursor@a^0,w,c
  6075   00136A  A4D8               	btfss	status,2,c
  6076   00136C  EFBA  F009         	goto	i1u268_21
  6077   001370  EFBC  F009         	goto	i1u268_20
  6078   001374                     i1u268_21:
  6079   001374  EFCD  F009         	goto	i1l3120
  6080   001378                     i1u268_20:
  6081   001378                     
  6082                           ;lcd.c: 30:     {;lcd.c: 31:         temp = 0x80 + b - 1;
  6083   001378  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  6084   00137A  0F7F               	addlw	127
  6085   00137C  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  6086                           
  6087                           ;lcd.c: 32:         z = temp>>4;
  6088   00137E  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  6089   001380  0B0F               	andlw	15
  6090   001382  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  6091                           
  6092                           ;lcd.c: 33:         y = temp & 0x0F;
  6093   001384  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  6094   001386  0B0F               	andlw	15
  6095   001388  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  6096   00138A                     
  6097                           ;lcd.c: 34:         Lcd_Cmd(z);
  6098   00138A  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  6099   00138C  EC59  F00E         	call	i1_Lcd_Cmd
  6100   001390                     
  6101                           ;lcd.c: 35:         Lcd_Cmd(y);
  6102   001390  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  6103   001392  EC59  F00E         	call	i1_Lcd_Cmd
  6104                           
  6105                           ;lcd.c: 36:     }
  6106   001396  EF1B  F00A         	goto	i1l322
  6107   00139A                     i1l3120:
  6108   00139A  0E02               	movlw	2
  6109   00139C  1805               	xorwf	i1Lcd_Set_Cursor@a^0,w,c
  6110   00139E  A4D8               	btfss	status,2,c
  6111   0013A0  EFD4  F009         	goto	i1u269_21
  6112   0013A4  EFD6  F009         	goto	i1u269_20
  6113   0013A8                     i1u269_21:
  6114   0013A8  EFE7  F009         	goto	i1l3128
  6115   0013AC                     i1u269_20:
  6116   0013AC                     
  6117                           ;lcd.c: 38:     {;lcd.c: 39:         temp = 0xC0 + b - 1;
  6118   0013AC  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  6119   0013AE  0FBF               	addlw	191
  6120   0013B0  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  6121                           
  6122                           ;lcd.c: 40:         z = temp>>4;
  6123   0013B2  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  6124   0013B4  0B0F               	andlw	15
  6125   0013B6  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  6126                           
  6127                           ;lcd.c: 41:         y = temp & 0x0F;
  6128   0013B8  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  6129   0013BA  0B0F               	andlw	15
  6130   0013BC  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  6131   0013BE                     
  6132                           ;lcd.c: 42:         Lcd_Cmd(z);
  6133   0013BE  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  6134   0013C0  EC59  F00E         	call	i1_Lcd_Cmd
  6135   0013C4                     
  6136                           ;lcd.c: 43:         Lcd_Cmd(y);
  6137   0013C4  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  6138   0013C6  EC59  F00E         	call	i1_Lcd_Cmd
  6139                           
  6140                           ;lcd.c: 44:     }
  6141   0013CA  EF1B  F00A         	goto	i1l322
  6142   0013CE                     i1l3128:
  6143   0013CE  0E03               	movlw	3
  6144   0013D0  1805               	xorwf	i1Lcd_Set_Cursor@a^0,w,c
  6145   0013D2  A4D8               	btfss	status,2,c
  6146   0013D4  EFEE  F009         	goto	i1u270_21
  6147   0013D8  EFF0  F009         	goto	i1u270_20
  6148   0013DC                     i1u270_21:
  6149   0013DC  EF01  F00A         	goto	i1l3136
  6150   0013E0                     i1u270_20:
  6151   0013E0                     
  6152                           ;lcd.c: 46:     {;lcd.c: 47:         temp = 0x90 + b - 1;
  6153   0013E0  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  6154   0013E2  0F8F               	addlw	143
  6155   0013E4  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  6156                           
  6157                           ;lcd.c: 48:         z = temp>>4;
  6158   0013E6  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  6159   0013E8  0B0F               	andlw	15
  6160   0013EA  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  6161                           
  6162                           ;lcd.c: 49:         y = temp & 0x0F;
  6163   0013EC  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  6164   0013EE  0B0F               	andlw	15
  6165   0013F0  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  6166   0013F2                     
  6167                           ;lcd.c: 50:         Lcd_Cmd(z);
  6168   0013F2  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  6169   0013F4  EC59  F00E         	call	i1_Lcd_Cmd
  6170   0013F8                     
  6171                           ;lcd.c: 51:         Lcd_Cmd(y);
  6172   0013F8  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  6173   0013FA  EC59  F00E         	call	i1_Lcd_Cmd
  6174                           
  6175                           ;lcd.c: 52:     }
  6176   0013FE  EF1B  F00A         	goto	i1l322
  6177   001402                     i1l3136:
  6178   001402  0E04               	movlw	4
  6179   001404  1805               	xorwf	i1Lcd_Set_Cursor@a^0,w,c
  6180   001406  A4D8               	btfss	status,2,c
  6181   001408  EF08  F00A         	goto	i1u271_21
  6182   00140C  EF0A  F00A         	goto	i1u271_20
  6183   001410                     i1u271_21:
  6184   001410  EF1B  F00A         	goto	i1l318
  6185   001414                     i1u271_20:
  6186   001414                     
  6187                           ;lcd.c: 54:     {;lcd.c: 55:         temp = 0xD0 + b - 1;
  6188   001414  5004               	movf	i1Lcd_Set_Cursor@b^0,w,c
  6189   001416  0FCF               	addlw	207
  6190   001418  6E08               	movwf	i1Lcd_Set_Cursor@temp^0,c
  6191                           
  6192                           ;lcd.c: 56:         z = temp>>4;
  6193   00141A  3808               	swapf	i1Lcd_Set_Cursor@temp^0,w,c
  6194   00141C  0B0F               	andlw	15
  6195   00141E  6E06               	movwf	i1Lcd_Set_Cursor@z^0,c
  6196                           
  6197                           ;lcd.c: 57:         y = temp & 0x0F;
  6198   001420  5008               	movf	i1Lcd_Set_Cursor@temp^0,w,c
  6199   001422  0B0F               	andlw	15
  6200   001424  6E07               	movwf	i1Lcd_Set_Cursor@y^0,c
  6201   001426                     
  6202                           ;lcd.c: 58:         Lcd_Cmd(z);
  6203   001426  5006               	movf	i1Lcd_Set_Cursor@z^0,w,c
  6204   001428  EC59  F00E         	call	i1_Lcd_Cmd
  6205   00142C                     
  6206                           ;lcd.c: 59:         Lcd_Cmd(y);
  6207   00142C  5007               	movf	i1Lcd_Set_Cursor@y^0,w,c
  6208   00142E  EC59  F00E         	call	i1_Lcd_Cmd
  6209   001432  EF1B  F00A         	goto	i1l322
  6210   001436                     i1l318:
  6211   001436                     i1l322:
  6212   001436  0012               	return		;funcret
  6213   001438                     __end_ofi1_Lcd_Set_Cursor:
  6214                           	callstack 0
  6215                           
  6216 ;; *************** function _Lcd_Blink *****************
  6217 ;; Defined at:
  6218 ;;		line 123 in file "lcd.c"
  6219 ;; Parameters:    Size  Location     Type
  6220 ;;		None
  6221 ;; Auto vars:     Size  Location     Type
  6222 ;;		None
  6223 ;; Return value:  Size  Location     Type
  6224 ;;                  1    wreg      void 
  6225 ;; Registers used:
  6226 ;;		wreg, status,2, cstack
  6227 ;; Tracked objects:
  6228 ;;		On entry : 0/0
  6229 ;;		On exit  : 0/0
  6230 ;;		Unchanged: 0/0
  6231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6232 ;;      Params:         0       0       0       0       0       0       0       0       0
  6233 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6234 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6235 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6236 ;;Total ram usage:        0 bytes
  6237 ;; Hardware stack levels used: 1
  6238 ;; Hardware stack levels required when called: 3
  6239 ;; This function calls:
  6240 ;;		i1_Lcd_Cmd
  6241 ;; This function is called by:
  6242 ;;		_LowISR
  6243 ;; This function uses a non-reentrant model
  6244 ;;
  6245                           
  6246                           	psect	text39
  6247   001D5E                     __ptext39:
  6248                           	callstack 0
  6249   001D5E                     _Lcd_Blink:
  6250                           	callstack 19
  6251   001D5E                     
  6252                           ;lcd.c: 125:     Lcd_Cmd(0x00);
  6253   001D5E  0E00               	movlw	0
  6254   001D60  EC59  F00E         	call	i1_Lcd_Cmd
  6255                           
  6256                           ;lcd.c: 126:     Lcd_Cmd(0x0F);
  6257   001D64  0E0F               	movlw	15
  6258   001D66  EC59  F00E         	call	i1_Lcd_Cmd
  6259   001D6A  0012               	return		;funcret
  6260   001D6C                     __end_of_Lcd_Blink:
  6261                           	callstack 0
  6262                           
  6263 ;; *************** function i1_Lcd_Cmd *****************
  6264 ;; Defined at:
  6265 ;;		line 11 in file "lcd.c"
  6266 ;; Parameters:    Size  Location     Type
  6267 ;;  a               1    wreg     unsigned char 
  6268 ;; Auto vars:     Size  Location     Type
  6269 ;;  a               1    2[COMRAM] unsigned char 
  6270 ;; Return value:  Size  Location     Type
  6271 ;;                  1    wreg      void 
  6272 ;; Registers used:
  6273 ;;		wreg, status,2, cstack
  6274 ;; Tracked objects:
  6275 ;;		On entry : 0/0
  6276 ;;		On exit  : 0/0
  6277 ;;		Unchanged: 0/0
  6278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6279 ;;      Params:         0       0       0       0       0       0       0       0       0
  6280 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6281 ;;      Temps:          1       0       0       0       0       0       0       0       0
  6282 ;;      Totals:         2       0       0       0       0       0       0       0       0
  6283 ;;Total ram usage:        2 bytes
  6284 ;; Hardware stack levels used: 1
  6285 ;; Hardware stack levels required when called: 2
  6286 ;; This function calls:
  6287 ;;		i1_Lcd_Port
  6288 ;; This function is called by:
  6289 ;;		_Lcd_Blink
  6290 ;;		i1_Lcd_Set_Cursor
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text40
  6295   001CB2                     __ptext40:
  6296                           	callstack 0
  6297   001CB2                     i1_Lcd_Cmd:
  6298                           	callstack 19
  6299                           
  6300                           ;incstack = 0
  6301                           ;i1Lcd_Cmd@a stored from wreg
  6302   001CB2  6E03               	movwf	i1Lcd_Cmd@a^0,c
  6303   001CB4                     
  6304                           ;lcd.c: 11: void Lcd_Cmd(char a);lcd.c: 12: {;lcd.c: 13:     LATEbits.LE0 = 0;
  6305   001CB4  908D               	bcf	141,0,c	;volatile
  6306   001CB6                     
  6307                           ;lcd.c: 14:     Lcd_Port(a);
  6308   001CB6  5003               	movf	i1Lcd_Cmd@a^0,w,c
  6309   001CB8  EC3F  F00D         	call	i1_Lcd_Port
  6310   001CBC                     
  6311                           ;lcd.c: 15:     LATEbits.LE1 = 1;
  6312   001CBC  828D               	bsf	141,1,c	;volatile
  6313   001CBE                     
  6314                           ;lcd.c: 16:     _delay((unsigned long)((4)*(4000000/4000.0)));
  6315   001CBE  0E06               	movlw	6
  6316   001CC0  6E02               	movwf	??i1_Lcd_Cmd^0,c
  6317   001CC2  0E30               	movlw	48
  6318   001CC4                     i1u381_27:
  6319   001CC4  2EE8               	decfsz	wreg,f,c
  6320   001CC6  D7FE               	bra	i1u381_27
  6321   001CC8  2E02               	decfsz	??i1_Lcd_Cmd^0,f,c
  6322   001CCA  D7FC               	bra	i1u381_27
  6323   001CCC  D000               	nop2	
  6324   001CCE                     
  6325                           ;lcd.c: 17:     LATEbits.LE1 = 0;
  6326   001CCE  928D               	bcf	141,1,c	;volatile
  6327   001CD0  0012               	return		;funcret
  6328   001CD2                     __end_ofi1_Lcd_Cmd:
  6329                           	callstack 0
  6330                           
  6331 ;; *************** function i1_Lcd_Port *****************
  6332 ;; Defined at:
  6333 ;;		line 3 in file "lcd.c"
  6334 ;; Parameters:    Size  Location     Type
  6335 ;;  a               1    wreg     unsigned char 
  6336 ;; Auto vars:     Size  Location     Type
  6337 ;;  a               1    0[COMRAM] unsigned char 
  6338 ;; Return value:  Size  Location     Type
  6339 ;;                  1    wreg      void 
  6340 ;; Registers used:
  6341 ;;		wreg
  6342 ;; Tracked objects:
  6343 ;;		On entry : 0/0
  6344 ;;		On exit  : 0/0
  6345 ;;		Unchanged: 0/0
  6346 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6347 ;;      Params:         0       0       0       0       0       0       0       0       0
  6348 ;;      Locals:         1       0       0       0       0       0       0       0       0
  6349 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6350 ;;      Totals:         1       0       0       0       0       0       0       0       0
  6351 ;;Total ram usage:        1 bytes
  6352 ;; Hardware stack levels used: 1
  6353 ;; Hardware stack levels required when called: 1
  6354 ;; This function calls:
  6355 ;;		Nothing
  6356 ;; This function is called by:
  6357 ;;		i1_Lcd_Cmd
  6358 ;; This function uses a non-reentrant model
  6359 ;;
  6360                           
  6361                           	psect	text41
  6362   001A7E                     __ptext41:
  6363                           	callstack 0
  6364   001A7E                     i1_Lcd_Port:
  6365                           	callstack 19
  6366                           
  6367                           ;incstack = 0
  6368                           ;i1Lcd_Port@a stored from wreg
  6369   001A7E  6E01               	movwf	i1Lcd_Port@a^0,c
  6370   001A80                     
  6371                           ;lcd.c: 3: void Lcd_Port(char a);lcd.c: 4: {;lcd.c: 5:     (a & 1) ? (LATDbits.LD4 = 1) 
      +                          : (LATDbits.LD4 = 0);
  6372   001A80  A001               	btfss	i1Lcd_Port@a^0,0,c
  6373   001A82  EF45  F00D         	goto	i1u197_21
  6374   001A86  EF47  F00D         	goto	i1u197_20
  6375   001A8A                     i1u197_21:
  6376   001A8A  EF4A  F00D         	goto	i1l291
  6377   001A8E                     i1u197_20:
  6378   001A8E  888C               	bsf	140,4,c	;volatile
  6379   001A90  EF4B  F00D         	goto	i1l2632
  6380   001A94                     i1l291:
  6381   001A94  988C               	bcf	140,4,c	;volatile
  6382   001A96                     i1l2632:
  6383                           
  6384                           ;lcd.c: 6:     (a & 2) ? (LATDbits.LD5 = 1) : (LATDbits.LD5 = 0);
  6385   001A96  A201               	btfss	i1Lcd_Port@a^0,1,c
  6386   001A98  EF50  F00D         	goto	i1u198_21
  6387   001A9C  EF52  F00D         	goto	i1u198_20
  6388   001AA0                     i1u198_21:
  6389   001AA0  EF55  F00D         	goto	i1l295
  6390   001AA4                     i1u198_20:
  6391   001AA4  8A8C               	bsf	140,5,c	;volatile
  6392   001AA6  EF56  F00D         	goto	i1l2636
  6393   001AAA                     i1l295:
  6394   001AAA  9A8C               	bcf	140,5,c	;volatile
  6395   001AAC                     i1l2636:
  6396                           
  6397                           ;lcd.c: 7:     (a & 4) ? (LATDbits.LD6 = 1) : (LATDbits.LD6 = 0);
  6398   001AAC  A401               	btfss	i1Lcd_Port@a^0,2,c
  6399   001AAE  EF5B  F00D         	goto	i1u199_21
  6400   001AB2  EF5D  F00D         	goto	i1u199_20
  6401   001AB6                     i1u199_21:
  6402   001AB6  EF60  F00D         	goto	i1l299
  6403   001ABA                     i1u199_20:
  6404   001ABA  8C8C               	bsf	140,6,c	;volatile
  6405   001ABC  EF61  F00D         	goto	i1l2640
  6406   001AC0                     i1l299:
  6407   001AC0  9C8C               	bcf	140,6,c	;volatile
  6408   001AC2                     i1l2640:
  6409                           
  6410                           ;lcd.c: 8:     (a & 8) ? (LATDbits.LD7 = 1) : (LATDbits.LD7 = 0);
  6411   001AC2  A601               	btfss	i1Lcd_Port@a^0,3,c
  6412   001AC4  EF66  F00D         	goto	i1u200_21
  6413   001AC8  EF68  F00D         	goto	i1u200_20
  6414   001ACC                     i1u200_21:
  6415   001ACC  EF6B  F00D         	goto	i1l303
  6416   001AD0                     i1u200_20:
  6417   001AD0  8E8C               	bsf	140,7,c	;volatile
  6418   001AD2  EF6C  F00D         	goto	i1l306
  6419   001AD6                     i1l303:
  6420   001AD6  9E8C               	bcf	140,7,c	;volatile
  6421   001AD8                     i1l306:
  6422   001AD8  0012               	return		;funcret
  6423   001ADA                     __end_ofi1_Lcd_Port:
  6424                           	callstack 0
  6425                           
  6426 ;; *************** function _Stop *****************
  6427 ;; Defined at:
  6428 ;;		line 210 in file "ASCENSOR.c"
  6429 ;; Parameters:    Size  Location     Type
  6430 ;;		None
  6431 ;; Auto vars:     Size  Location     Type
  6432 ;;		None
  6433 ;; Return value:  Size  Location     Type
  6434 ;;                  1    wreg      void 
  6435 ;; Registers used:
  6436 ;;		None
  6437 ;; Tracked objects:
  6438 ;;		On entry : 0/0
  6439 ;;		On exit  : 0/0
  6440 ;;		Unchanged: 0/0
  6441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
  6442 ;;      Params:         0       0       0       0       0       0       0       0       0
  6443 ;;      Locals:         0       0       0       0       0       0       0       0       0
  6444 ;;      Temps:          0       0       0       0       0       0       0       0       0
  6445 ;;      Totals:         0       0       0       0       0       0       0       0       0
  6446 ;;Total ram usage:        0 bytes
  6447 ;; Hardware stack levels used: 1
  6448 ;; This function calls:
  6449 ;;		Nothing
  6450 ;; This function is called by:
  6451 ;;		Interrupt level 2
  6452 ;; This function uses a non-reentrant model
  6453 ;;
  6454                           
  6455                           	psect	intcode
  6456   000008                     __pintcode:
  6457                           	callstack 0
  6458   000008                     _Stop:
  6459                           	callstack 19
  6460                           
  6461                           ;incstack = 0
  6462   000008  824A               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
  6463   00000A  ED82  F00E         	call	int_func,f	;refresh shadow registers
  6464                           
  6465                           	psect	intcode_body
  6466   001D04                     __pintcode_body:
  6467                           	callstack 19
  6468   001D04                     int_func:
  6469                           	callstack 19
  6470   001D04  0006               	pop		; remove dummy address from shadow register refresh
  6471   001D06                     
  6472                           ;ASCENSOR.c: 211: INTCONbits.GIEH = 0;
  6473   001D06  9EF2               	bcf	242,7,c	;volatile
  6474                           
  6475                           ;ASCENSOR.c: 212: T0CONbits.TMR0ON = 0;
  6476   001D08  9ED5               	bcf	213,7,c	;volatile
  6477                           
  6478                           ;ASCENSOR.c: 213: LATDbits.LATD2=0;
  6479   001D0A  948C               	bcf	140,2,c	;volatile
  6480                           
  6481                           ;ASCENSOR.c: 214: LATDbits.LATD3=0;
  6482   001D0C  968C               	bcf	140,3,c	;volatile
  6483                           
  6484                           ;ASCENSOR.c: 215: INTCONbits.TMR0IF = 0;
  6485   001D0E  94F2               	bcf	242,2,c	;volatile
  6486                           
  6487                           ;ASCENSOR.c: 216: INTCONbits.GIEH = 1;
  6488   001D10  8EF2               	bsf	242,7,c	;volatile
  6489   001D12  924A               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  6490   001D14  0011               	retfie		f
  6491   001D16                     __end_of_Stop:
  6492                           	callstack 0
  6493                           
  6494                           	psect	rparam
  6495   000001                     ___rparam_used  equ	1
  6496   000000                     ___param_bank   equ	0
  6497   000000                     __Lparam        equ	__Lrparam
  6498   000000                     __Hparam        equ	__Hrparam
  6499                           
  6500                           	psect	temp
  6501   00004A                     btemp:
  6502                           	callstack 0
  6503   00004A                     	ds	1
  6504   00004A                     int$flags       set	btemp
  6505   00004B                     wtemp8          set	btemp+1
  6506   00004B                     ttemp5          set	btemp+1
  6507   00004E                     ttemp6          set	btemp+4
  6508   000052                     ttemp7          set	btemp+8
  6509                           
  6510                           	psect	config
  6511                           
  6512                           ;Config register CONFIG1L @ 0x300000
  6513                           ;	PLL Prescaler Selection bits
  6514                           ;	PLLDIV = 1, No prescale (4 MHz oscillator input drives PLL directly)
  6515                           ;	System Clock Postscaler Selection bits
  6516                           ;	CPUDIV = OSC1_PLL2, [Primary Oscillator Src: /1][96 MHz PLL Src: /2]
  6517                           ;	USB Clock Selection bit (used in Full-Speed USB mode only; UCFG:FSEN = 1)
  6518                           ;	USBDIV = 1, USB clock source comes directly from the primary oscillator block with no 
      +                          postscale
  6519   300000                     	org	3145728
  6520   300000  00                 	db	0
  6521                           
  6522                           ;Config register CONFIG1H @ 0x300001
  6523                           ;	Oscillator Selection bits
  6524                           ;	FOSC = INTOSCIO_EC, Internal oscillator, port function on RA6, EC used by USB (INTIO)
  6525                           ;	Fail-Safe Clock Monitor Enable bit
  6526                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  6527                           ;	Internal/External Oscillator Switchover bit
  6528                           ;	IESO = OFF, Oscillator Switchover mode disabled
  6529   300001                     	org	3145729
  6530   300001  08                 	db	8
  6531                           
  6532                           ;Config register CONFIG2L @ 0x300002
  6533                           ;	Power-up Timer Enable bit
  6534                           ;	PWRT = OFF, PWRT disabled
  6535                           ;	Brown-out Reset Enable bits
  6536                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
  6537                           ;	Brown-out Reset Voltage bits
  6538                           ;	BORV = 3, Minimum setting 2.05V
  6539                           ;	USB Voltage Regulator Enable bit
  6540                           ;	VREGEN = OFF, USB voltage regulator disabled
  6541   300002                     	org	3145730
  6542   300002  19                 	db	25
  6543                           
  6544                           ;Config register CONFIG2H @ 0x300003
  6545                           ;	Watchdog Timer Enable bit
  6546                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  6547                           ;	Watchdog Timer Postscale Select bits
  6548                           ;	WDTPS = 32768, 1:32768
  6549   300003                     	org	3145731
  6550   300003  1E                 	db	30
  6551                           
  6552                           ; Padding undefined space
  6553   300004                     	org	3145732
  6554   300004  FF                 	db	255
  6555                           
  6556                           ;Config register CONFIG3H @ 0x300005
  6557                           ;	CCP2 MUX bit
  6558                           ;	CCP2MX = OFF, CCP2 input/output is multiplexed with RB3
  6559                           ;	PORTB A/D Enable bit
  6560                           ;	PBADEN = OFF, PORTB<4:0> pins are configured as digital I/O on Reset
  6561                           ;	Low-Power Timer 1 Oscillator Enable bit
  6562                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
  6563                           ;	MCLR Pin Enable bit
  6564                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR pin disabled
  6565   300005                     	org	3145733
  6566   300005  00                 	db	0
  6567                           
  6568                           ;Config register CONFIG4L @ 0x300006
  6569                           ;	Stack Full/Underflow Reset Enable bit
  6570                           ;	STVREN = OFF, Stack full/underflow will not cause Reset
  6571                           ;	Single-Supply ICSP Enable bit
  6572                           ;	LVP = OFF, Single-Supply ICSP disabled
  6573                           ;	Dedicated In-Circuit Debug/Programming Port (ICPORT) Enable bit
  6574                           ;	ICPRT = ON, ICPORT enabled
  6575                           ;	Extended Instruction Set Enable bit
  6576                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  6577                           ;	Background Debugger Enable bit
  6578                           ;	DEBUG = 0x1, unprogrammed default
  6579   300006                     	org	3145734
  6580   300006  A0                 	db	160
  6581                           
  6582                           ; Padding undefined space
  6583   300007                     	org	3145735
  6584   300007  FF                 	db	255
  6585                           
  6586                           ;Config register CONFIG5L @ 0x300008
  6587                           ;	Code Protection bit
  6588                           ;	CP0 = OFF, Block 0 (000800-001FFFh) is not code-protected
  6589                           ;	Code Protection bit
  6590                           ;	CP1 = OFF, Block 1 (002000-003FFFh) is not code-protected
  6591                           ;	Code Protection bit
  6592                           ;	CP2 = OFF, Block 2 (004000-005FFFh) is not code-protected
  6593                           ;	Code Protection bit
  6594                           ;	CP3 = OFF, Block 3 (006000-007FFFh) is not code-protected
  6595   300008                     	org	3145736
  6596   300008  0F                 	db	15
  6597                           
  6598                           ;Config register CONFIG5H @ 0x300009
  6599                           ;	Boot Block Code Protection bit
  6600                           ;	CPB = OFF, Boot block (000000-0007FFh) is not code-protected
  6601                           ;	Data EEPROM Code Protection bit
  6602                           ;	CPD = OFF, Data EEPROM is not code-protected
  6603   300009                     	org	3145737
  6604   300009  C0                 	db	192
  6605                           
  6606                           ;Config register CONFIG6L @ 0x30000A
  6607                           ;	Write Protection bit
  6608                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) is not write-protected
  6609                           ;	Write Protection bit
  6610                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) is not write-protected
  6611                           ;	Write Protection bit
  6612                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) is not write-protected
  6613                           ;	Write Protection bit
  6614                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) is not write-protected
  6615   30000A                     	org	3145738
  6616   30000A  0F                 	db	15
  6617                           
  6618                           ;Config register CONFIG6H @ 0x30000B
  6619                           ;	Configuration Register Write Protection bit
  6620                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) are not write-protected
  6621                           ;	Boot Block Write Protection bit
  6622                           ;	WRTB = OFF, Boot block (000000-0007FFh) is not write-protected
  6623                           ;	Data EEPROM Write Protection bit
  6624                           ;	WRTD = OFF, Data EEPROM is not write-protected
  6625   30000B                     	org	3145739
  6626   30000B  E0                 	db	224
  6627                           
  6628                           ;Config register CONFIG7L @ 0x30000C
  6629                           ;	Table Read Protection bit
  6630                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) is not protected from table reads executed in ot
      +                          her blocks
  6631                           ;	Table Read Protection bit
  6632                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) is not protected from table reads executed in ot
      +                          her blocks
  6633                           ;	Table Read Protection bit
  6634                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) is not protected from table reads executed in ot
      +                          her blocks
  6635                           ;	Table Read Protection bit
  6636                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) is not protected from table reads executed in ot
      +                          her blocks
  6637   30000C                     	org	3145740
  6638   30000C  0F                 	db	15
  6639                           
  6640                           ;Config register CONFIG7H @ 0x30000D
  6641                           ;	Boot Block Table Read Protection bit
  6642                           ;	EBTRB = OFF, Boot block (000000-0007FFh) is not protected from table reads executed in
      +                           other blocks
  6643   30000D                     	org	3145741
  6644   30000D  40                 	db	64
  6645                           tosu	equ	0xFFF
  6646                           tosh	equ	0xFFE
  6647                           tosl	equ	0xFFD
  6648                           stkptr	equ	0xFFC
  6649                           pclatu	equ	0xFFB
  6650                           pclath	equ	0xFFA
  6651                           pcl	equ	0xFF9
  6652                           tblptru	equ	0xFF8
  6653                           tblptrh	equ	0xFF7
  6654                           tblptrl	equ	0xFF6
  6655                           tablat	equ	0xFF5
  6656                           prodh	equ	0xFF4
  6657                           prodl	equ	0xFF3
  6658                           indf0	equ	0xFEF
  6659                           postinc0	equ	0xFEE
  6660                           postdec0	equ	0xFED
  6661                           preinc0	equ	0xFEC
  6662                           plusw0	equ	0xFEB
  6663                           fsr0h	equ	0xFEA
  6664                           fsr0l	equ	0xFE9
  6665                           wreg	equ	0xFE8
  6666                           indf1	equ	0xFE7
  6667                           postinc1	equ	0xFE6
  6668                           postdec1	equ	0xFE5
  6669                           preinc1	equ	0xFE4
  6670                           plusw1	equ	0xFE3
  6671                           fsr1h	equ	0xFE2
  6672                           fsr1l	equ	0xFE1
  6673                           bsr	equ	0xFE0
  6674                           indf2	equ	0xFDF
  6675                           postinc2	equ	0xFDE
  6676                           postdec2	equ	0xFDD
  6677                           preinc2	equ	0xFDC
  6678                           plusw2	equ	0xFDB
  6679                           fsr2h	equ	0xFDA
  6680                           fsr2l	equ	0xFD9
  6681                           status	equ	0xFD8

Data Sizes:
    Strings     57
    Constant    16
    Data        0
    BSS         55
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     61      73
    BANK0           160     20      63
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> mostrar_variable@buffer(BANK0[20]), 

    f$.$source	PTR const unsigned char  size(2) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> mostrar_variable@buffer(BANK0[20]), 

    fputc@fp$.$source	PTR const unsigned char  size(2) Largest target is 0

    Lcd_CGRAM_CreateChar@chardata	PTR const unsigned char  size(1) Largest target is 8
		 -> figura_1(CODE[8]), figura_2(CODE[8]), 

    Lcd_Write_String@a	PTR const unsigned char  size(2) Largest target is 20
		 -> mostrar_variable@buffer(BANK0[20]), STR_1(CODE[10]), STR_3(CODE[13]), STR_4(CODE[3]), 
		 -> STR_5(CODE[7]), STR_6(CODE[8]), STR_7(CODE[6]), STR_8(CODE[7]), 

    S1473$buffer	PTR unsigned char  size(1) Largest target is 20
		 -> mostrar_variable@buffer(BANK0[20]), 

    S1473$source	PTR const unsigned char  size(2) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> mostrar_variable@buffer(BANK0[20]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMRAM[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(COMRAM[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 11
		 -> sprintf@f(COMRAM[11]), 


Critical Paths under _main in COMRAM

    _main->_dejar
    _detectar->_Lcd_Write_String
    _dejar->_mostrar_variable
    _mostrar_variable->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_abs
    _abs->___awmod
    _Lcd_Write_String->_Lcd_Write_Char
    _Modificar->_probar_1sg
    _probar_1sg->_Actualizar_Matriz
    _estado->_EEPROM_Read
    _Clear->_EEPROM_Write
    _Actualizar_Matriz->_Lcd_Set_Cursor
    _Lcd_Set_Cursor->_Lcd_Cmd
    _guardar->_EEPROM_Write
    _Lcd_NoBlink->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_CGRAM_Init->_Lcd_Cmd
    _Lcd_CGRAM_CreateChar->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_CGRAM_Close->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _LowISR in COMRAM

    _LowISR->i1_Lcd_Set_Cursor
    i1_Lcd_Set_Cursor->i1_Lcd_Cmd
    _Lcd_Blink->i1_Lcd_Cmd
    i1_Lcd_Cmd->i1_Lcd_Port

Critical Paths under _Stop in COMRAM

    None.

Critical Paths under _main in BANK0

    _dejar->_mostrar_variable

Critical Paths under _LowISR in BANK0

    None.

Critical Paths under _Stop in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _LowISR in BANK1

    None.

Critical Paths under _Stop in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _LowISR in BANK2

    None.

Critical Paths under _Stop in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _LowISR in BANK3

    None.

Critical Paths under _Stop in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _LowISR in BANK4

    None.

Critical Paths under _Stop in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _LowISR in BANK5

    None.

Critical Paths under _Stop in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _LowISR in BANK6

    None.

Critical Paths under _Stop in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _LowISR in BANK7

    None.

Critical Paths under _Stop in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   20074
                                             59 COMRAM     2     2      0
                  _Actualizar_Matriz
                    _Lcd_CGRAM_Close
               _Lcd_CGRAM_CreateChar
                     _Lcd_CGRAM_Init
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                          _Modificar
                              _dejar
                           _detectar
                             _estado
                               _full
                            _guardar
                           _init_int
                         _init_ports
                             _reposo
 ---------------------------------------------------------------------------------
 (1) _reposo                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_ports                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_int                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _full                                                 9     9      0     276
                                             12 COMRAM     9     9      0
 ---------------------------------------------------------------------------------
 (1) _detectar                                             0     0      0    1619
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
 ---------------------------------------------------------------------------------
 (1) _dejar                                                4     4      0    4903
                                             55 COMRAM     4     4      0
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                           _calibrar
                   _mostrar_variable
 ---------------------------------------------------------------------------------
 (2) _mostrar_variable                                    22    20      2    3216
                                             53 COMRAM     2     0      2
                                              0 BANK0     20    20      0
                   _Lcd_Write_String
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             18    14      4    2598
                                             37 COMRAM    16    12      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             4     1      3    2286
                                             33 COMRAM     4     1      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           11     8      3    2086
                                             22 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                                _abs
                              _fputc
 ---------------------------------------------------------------------------------
 (6) _fputc                                                8     5      3     329
                                             12 COMRAM     8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (7) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (6) _abs                                                  4     2      2      96
                                             18 COMRAM     4     2      2
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (6) ___awmod                                              6     2      4     439
                                             12 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4     451
                                             12 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_String                                     6     4      2     504
                                             16 COMRAM     6     4      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _calibrar                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Modificar                                            0     0      0    6352
                  _Actualizar_Matriz
                        _Lcd_NoBlink
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                                _MOD
                            _guardar
                         _probar_1sg
 ---------------------------------------------------------------------------------
 (2) _probar_1sg                                           1     1      0    2228
                                             24 COMRAM     1     1      0
                  _Actualizar_Matriz
                              _Clear
                             _estado
 ---------------------------------------------------------------------------------
 (1) _estado                                               4     4      0     299
                                             13 COMRAM     3     3      0
                        _EEPROM_Read
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Read                                          1     1      0      29
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _Clear                                                1     1      0     124
                                             14 COMRAM     1     1      0
                       _EEPROM_Write
 ---------------------------------------------------------------------------------
 (3) _Actualizar_Matriz                                    4     4      0    1805
                                             20 COMRAM     4     4      0
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Set_Cursor                                       5     4      1    1115
                                             15 COMRAM     5     4      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _guardar                                              4     4      0     395
                                             14 COMRAM     4     4      0
                       _EEPROM_Write
 ---------------------------------------------------------------------------------
 (2) _EEPROM_Write                                         2     1      1      56
                                             12 COMRAM     2     1      1
 ---------------------------------------------------------------------------------
 (2) _MOD                                                  3     1      2     224
                                             12 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (2) _Lcd_NoBlink                                          0     0      0     235
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     658
                                             15 COMRAM     1     1      0
                          _Lcd_Clear
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Clear                                            0     0      0     235
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_CGRAM_Init                                       0     0      0     235
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_CGRAM_CreateChar                                11    10      1    1443
                                             16 COMRAM    11    10      1
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (3) _Lcd_Write_Char                                       3     3      0     350
                                             13 COMRAM     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_CGRAM_Close                                      0     0      0     235
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (3) _Lcd_Cmd                                              2     2      0     235
                                             13 COMRAM     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (4) _Lcd_Port                                             1     1      0     188
                                             12 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _LowISR                                               4     4      0     860
                                              8 COMRAM     4     4      0
                          _Lcd_Blink
                   i1_Lcd_Set_Cursor
 ---------------------------------------------------------------------------------
 (9) i1_Lcd_Set_Cursor                                     5     4      1     714
                                              3 COMRAM     5     4      1
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (9) _Lcd_Blink                                            0     0      0     145
                          i1_Lcd_Cmd
 ---------------------------------------------------------------------------------
 (10) i1_Lcd_Cmd                                           2     2      0     145
                                              1 COMRAM     2     2      0
                         i1_Lcd_Port
 ---------------------------------------------------------------------------------
 (11) i1_Lcd_Port                                          1     1      0     116
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _Stop                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 12
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Actualizar_Matriz
     _Lcd_Set_Cursor
       _Lcd_Cmd
         _Lcd_Port
     _Lcd_Write_Char
       _Lcd_Port
   _Lcd_CGRAM_Close
     _Lcd_Cmd
   _Lcd_CGRAM_CreateChar
     _Lcd_Write_Char
   _Lcd_CGRAM_Init
     _Lcd_Cmd
   _Lcd_Clear
     _Lcd_Cmd
   _Lcd_Init
     _Lcd_Clear
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
   _Lcd_Write_String
     _Lcd_Write_Char
   _Modificar
     _Actualizar_Matriz
     _Lcd_NoBlink
       _Lcd_Cmd
     _Lcd_Set_Cursor
     _Lcd_Write_Char
     _MOD
     _guardar
       _EEPROM_Write
     _probar_1sg
       _Actualizar_Matriz
       _Clear
         _EEPROM_Write
       _estado
         _EEPROM_Read
   _dejar
     _Lcd_Set_Cursor
     _Lcd_Write_String
     _calibrar
     _mostrar_variable
       _Lcd_Write_String
       _sprintf
         _vfprintf
           _vfpfcnvrt
             ___awdiv
             ___awmod
             _abs
               ___awmod (ARG)
             _fputc
               _putch
   _detectar
     _Lcd_Set_Cursor
     _Lcd_Write_String
   _estado
   _full
   _guardar
   _init_int
   _init_ports
   _reposo

 _LowISR (ROOT)
   _Lcd_Blink
     i1_Lcd_Cmd
       i1_Lcd_Port
   i1_Lcd_Set_Cursor
     i1_Lcd_Cmd

 _Stop (ROOT)

Address spaces:
Name               Size   Autos  Total    Usage
BIGRAM            2047      0       0      0.0%
BITBANK7           256      0       0      0.0%
BANK7              256      0       0      0.0%
BITBANK6           256      0       0      0.0%
BANK6              256      0       0      0.0%
BITBANK5           256      0       0      0.0%
BANK5              256      0       0      0.0%
BITBANK4           256      0       0      0.0%
BANK4              256      0       0      0.0%
BITBANK3           256      0       0      0.0%
BANK3              256      0       0      0.0%
BITBANK2           256      0       0      0.0%
BANK2              256      0       0      0.0%
BITBANK1           256      0       0      0.0%
BANK1              256      0       0      0.0%
BITBANK0           160      0       0      0.0%
BANK0              160     20      63     39.4%
BITBIGSFRh         126      0       0      0.0%
BITCOMRAM           94      0       0      0.0%
COMRAM              94     61      73     77.7%
BITBIGSFRl          32      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     136      0.0%


Microchip Technology PIC18 Macro Assembler V3.00 build 20241204225717 
Symbol Table                                                                                   Fri Oct 03 16:31:15 2025

                           _c 0045                             _f 0046                  ___awdiv@sign 0012  
                          bsr 0FE0                           l111 1AFA                           l200 170A  
                         l112 1AEA                           l105 1CEE                           l122 167C  
                         l114 1AF8                           l204 173E                           l124 16A6  
                         l108 1D02                           l116 1B0A                           l214 0A5C  
                         l118 1B18                           l303 1A7A                           l143 1292  
                         l207 176A                           l127 16E6                           l119 1B1A  
                         l312 1D40                           l152 1796                           l240 1190  
                         l161 1914                           l306 1A7C                           l154 17C2  
                         l322 1364                           l402 1D24                           l250 0EA8  
                         l163 193A                           l148 1C90                           l244 0E46  
                         l309 1CB0                           l325 1870                           l157 17EE  
                         l253 0ECE                           l350 0A64                           l318 1364  
                         l166 1960                           l334 18EE                           l262 0F4C  
                         l246 0E58                           l328 1B90                           l184 1C70  
                         l256 0EFA                           l346 1D32                           l291 1A38  
                         l259 0F20                           l196 1A20                           l188 19C0  
                         l381 1D5C                           l269 100C                           l295 1A4E  
                         l375 0C44                           l199 1718                           l641 14F8  
                         l378 1D4E                           l299 1A64                           l396 1C18  
                         l398 1C26                           l654 15A6                           l399 1C2A  
                         _MOD 19C2      __end_of_mostrar_variable 1C72                           u920 1AE8  
                         u921 1AE4                           u930 1AF8                           u931 1AF4  
                         u940 1B08                           u941 1B04                           u950 1B18  
                         u951 1B14                           _abs 1BC6                  ___awmod@sign 0012  
           _Actualizar_Matriz 1192                           wreg 0FE8           __end_of_Lcd_NoBlink 1D34  
          ?_Actualizar_Matriz 0001                          ?_MOD 000D                          MOD@C 000D  
                        MOD@F 000F                          MOD@x 000E         Lcd_CGRAM_CreateChar@i 0014  
                        ?_abs 0013                          l1132 1B58                          l1126 0DFE  
                        l1151 1650                          l1136 1BE0                          l1162 1D6C  
                        l1139 1BF8                          l1088 1BC4                          l3300 14FA  
                        l3310 1524                          l3302 14FC                          l3240 1A24  
                        l2600 1916                          l3320 155C                          l3312 152C  
                        l3304 150A                          l3400 0DB8                          l3250 1A5E  
                        l3242 1A32                          l2450 1BFC                          l2610 193C  
                        l2602 1928                          l3330 1596                          l3322 1572  
                        l3314 153E                          l3306 1512                          l3402 0DBA  
                        l1802 1ADA                          l3252 1A66                          l3244 1A3A  
                        l2460 1C0A                          l2452 1C00                          l3420 12BE  
                        l3500 11C8                          l2612 194E                          l2604 192A  
                        l3260 1448                          l3332 159E                          l3324 157A  
                        l3316 1546                          l3308 1516                          l3340 15C8  
                        l3404 0DD0                          l1804 1AE8                          l3254 1A74  
                        l3246 1A48                          l2710 19C4                          l2462 1C0C  
                        l2454 1C04                          l3430 12FC                          l3422 12C8  
                        l3414 1296                          l3502 11CA                          l2470 1D18  
                        l2614 1950                          l3270 146E                          l3262 1450  
                        l3326 1580                          l3318 154E                          l3350 1BC6  
                        l3342 15D2                          l1806 1B08                          l3248 1A50  
                        l3360 1C9E                          l2720 1A14                          l2712 19D8  
                        l2464 1C10                          l2456 1C06                          l3440 1342  
                        l3432 130E                          l3424 12DA                          l3416 12A6  
                        l3520 1210                          l3504 11CC                          l2472 1D1C  
                        l2800 0A20                          l3280 14A6                          l3272 1476  
                        l3264 1454                          l3256 1438                          l3328 1586  
                        l3352 1BD4                          l3344 15EE                          l3336 15A8  
                        l3408 0DDC                          l3600 1652                          l3362 1CAE  
                        l3354 1C94                          l3450 1B6A                          l2714 19E4  
                        l2466 1C14                          l2458 1C08                          l2650 176E  
                        l3442 1354                          l3434 1320                          l3426 12EC  
                        l3418 12B8                          l3522 1212                          l3514 11E8  
                        l3506 11DC                          l2474 1D1E                          l2810 0A58  
                        l2802 0A30                          l2730 087E                          l3290 14D2  
                        l3282 14AC                          l3274 1488                          l3266 1462  
                        l3258 143A                          l3346 1620                          l3338 15B8  
                        l3370 0C7E                          l3610 1698                          l3602 1660  
                        l1770 1CD8                          l3356 1C96                          l3460 1B84  
                        l3452 1B72                          l3700 17F0                          l2716 19F6  
                        l2468 1C16                          l2652 177A                          l2644 176C  
                        l3444 135A                          l3436 1326                          l3428 12F2  
                        l3540 1258                          l3524 1214                          l3516 1200  
                        l3508 11E6                          l2580 1C7E                          l2572 1C72  
                        l2476 1D20                          l2740 08C0                          l2732 0898  
                        l2724 084C                          l3284 14C2                          l3276 1490  
                        l3292 14D8                          l3268 146A                          l3380 0CDC  
                        l3372 0C82                          l3364 0C46                          l3612 16A0  
                        l3620 16CC                          l3604 166E                          l2900 1100  
                        l1780 1CE2                          l1772 1CDA                          l3358 1C9C  
                        l3462 1B86                          l3454 1B74                          l3446 1B5C  
                        l3710 1828                          l3702 17FC                          l2718 1A02  
                        l2662 1798                          l2654 1784                          l3438 1330  
                        l3550 127A                          l3542 125A                          l3534 1230  
                        l3526 1224                          l3518 120A                          l2582 1C80  
                        l2478 1D22                          l2590 18F2                          l3630 1704  
                        l2806 0A38                          l2750 08F8                          l2742 08D0  
                        l2734 08A8                          l2726 085C                          l3294 14E8  
                        l3286 14CA                          l3278 1498                          l3390 0D5C  
                        l3382 0CE6                          l3374 0C8C                          l3366 0C68  
                        l3470 1B34                          l3622 16D6                          l3614 16B4  
                        l3606 1676                          l2902 1104                          l1790 1CEC  
                        l1782 1CE4                          l1774 1CDC                          l1766 1CD2  
                        l3464 1B8E                          l3456 1B7C                          l3448 1B68  
                        l3800 0B66                          l3720 184E                          l3712 182E  
                        l3704 1802                          l2680 17DE                          l2664 17A4  
                        l2656 1786                          l3552 127E                          l3544 125C  
                        l3536 1248                          l3528 122E                          l2592 1902  
                        l2584 18F0                          l3640 175A                          l3632 1726  
                        l2808 0A48                          l2760 0930                          l2728 086C  
                        l3480 18AE                          l3296 14F0                          l3288 14CC  
                        l3392 0D6C                          l3384 0CFE                          l3376 0CA8  
                        l3368 0C70                          l3472 1B50                          l3560 1BA2  
                        l3616 16C2                          l3608 168A                          l2920 117A  
                        l2904 1120                          l1784 1CE6                          l1776 1CDE  
                        l1768 1CD6                          l3458 1B7E                          l3802 0B80  
                        l3730 186C                          l3722 1854                          l3714 183C  
                        l3706 1812                          l2674 17C4                          l2666 17B0  
                        l3554 1290                          l3546 126C                          l3538 1252  
                        l2578 1C74                          l2594 1904                          l3642 175E  
                        l3634 1738                          l3626 16E8                          l2770 0970  
                        l2762 0948                          l2746 08D8                          l2738 08B0  
                        l2754 0900                          l3482 18B2                          l3394 0D7C  
                        l3386 0D2E                          l3378 0CC4                          l3466 1B1C  
                        l3562 1BAA                          l3570 1C66                          l3650 0E08  
                        l3618 16CA                          l2922 118E                          l2914 1146  
                        l2906 1134                          l1794 1CF0                          l1786 1CE8  
                        l1778 1CE0                          l3812 0B9A                          l3804 0B82  
                        l3740 0A66                          l3732 1D42                          l3724 185A  
                        l3716 1842                          l3708 1818                          l2676 17D0  
                        l2668 17B2                          l3548 1276                          l3484 1192  
                        l3580 1982                          l3644 1762                          l3636 174C  
                        l3628 16F6                          l2780 09A8                          l2772 0980  
                        l2764 0958                          l2756 0910                          l2748 08E8  
                        l3476 1872                          l3396 0D8C                          l3388 0D4A  
                        l3468 1B24                          l3564 1BBA                          l3556 1B92  
                        l3660 0E40                          l3652 0E12                          l2916 115A  
                        l2908 1136                          l1796 1CF8                          l1788 1CEA  
                        l3814 0BB4                          l3806 0B96                          l3742 0A7C  
                        l3734 0A60                          l3726 1860                          l3718 1848  
                        l2678 17DC                          l3494 11A0                          l3486 119C  
                        l3590 19B4                          l3574 1962                          l3646 1766  
                        l3638 1750                          l2790 09E0                          l2758 0920  
                        l3478 187E                          l3398 0D9E                          l3558 1B9A  
                        l3670 0E8E                          l3662 0E54                          l3654 0E22  
                        l2918 115E                          l1798 1D00                          l3824 0BCE  
                        l3816 0BB6                          l3752 0A96                          l3744 0A7E  
                        l3832 0BFE                          l3728 1866                          l3496 11B8  
                        l3488 119E                          l3592 19B8                          l3584 1994  
                        l2792 09F8                          l2776 0988                          l2768 0960  
                        l2784 09B0                          l3568 1C52                          l3680 0EF2  
                        l3672 0EA6                          l3664 0E66                          l3656 0E26  
                        l3648 0E00                          l3840 0F68                          l3834 1D50  
                        l3826 0BE8                          l3818 0BCA                          l3770 0AFA  
                        l3754 0AB0                          l3746 0A92                          l3498 11C2  
                        l3594 19BC                          l3586 19A2                          l3578 1974  
                        l2794 0A08                          l2786 09C0                          l2778 0998  
                        l3690 0F2E                          l3682 0EF6                          l3674 0EB6  
                        l3666 0E80                          l3658 0E30                          l2890 10DA  
                        l2882 1092                          l3850 0F98                          l3842 0F76  
                        l3828 0BEA                          l3780 0B1A                          l3764 0ACA  
                        l3756 0AB2                          l3596 1D26                          l2788 09D0  
                        l3692 0F46                          l3684 0EF8                          l3676 0ECC  
                        l3668 0E8C                          l2892 10DC                          l2884 10A6  
                        l2876 1082                          l3860 0FE4                          l3852 0FA2  
                        l3844 0F7A                          l3836 0F4E                          l3790 0B4C  
                        l3782 0B2E                          l3766 0AE4                          l3758 0AC6  
                        l3598 1D34                          l2798 0A10                          l3694 0F48  
                        l3686 0F08                          l3678 0EDC                          l2886 10AA  
                        l3870 101A                          l3862 0FE8                          l3854 0FB2  
                        l3846 0F7E                          l3838 0F5E                          l3792 0B4E  
                        l3776 0AFE                          l3768 0AE6                          l3696 0F4A  
                        l3688 0F1E                          l2888 10C6                          l3880 1042  
                        l3872 1028                          l3864 0FEC                          l3856 0FBC  
                        l3848 0F88                          l3794 0B62                          l3778 0B18  
                        l2898 10EC                          l3882 1052                          l3874 102C  
                        l3866 0FEE                          l3858 0FCC                          l3788 0B32  
                        l3884 1062                          l3876 103A                          l3868 0FF8  
                        l3886 1072                          l3878 103E                          l3888 1076  
                        STR_1 081E                          STR_2 0847                          STR_3 0811  
                        STR_4 0844                          STR_5 0837                          STR_6 0828  
                        STR_7 083E                          STR_8 0830               ?_Lcd_CGRAM_Init 0001  
                        u2010 1796                          u2011 1792                          u2020 17C2  
                        u2100 085C                          u2021 17BE                          u2101 0858  
                        u2030 17EE                          u2110 086C                          u2031 17EA  
                        u2111 0868                          u2200 0920                          u2120 087E  
                        u3000 155C                          u2201 091C                          u2121 087A  
                        u3001 1558                          u2210 0930                          u2130 0898  
                        u3010 1572                          u2211 092C                          u2131 0894  
                        u3011 156E                          u2300 09E0                          u2220 0948  
                        u2140 08A8                          u3020 1596                          u3100 0CC4  
                        u2301 09DC                          u2221 0944                          u2141 08A4  
                        u3021 1592                          u3101 0CC0                          _LATA 0F89  
                        u2070 19D8                          u2310 09F8                          u2230 0958  
                        u2150 08C0                          u3030 15B8                          u3110 0CFA  
                        _LATB 0F8A                          u2071 19D4                          u2311 09F4  
                        u2231 0954                          u2151 08BC                          u3031 15B4  
                        u3111 0CF4                          _LATC 0F8B                          u2080 19F6  
                        u3200 130E                          u2320 0A08                          u2240 0970  
                        u2160 08D0                          u3040 15C8                          u3120 0CFC  
                        _LATD 0F8C                          u2081 19F2                          u3201 130A  
                        u2321 0A04                          u2241 096C                          u2161 08CC  
                        u3041 15C4                          _LATE 0F8D                          u2090 1A14  
                        u3210 1342                          u2330 0A20                          u2250 0980  
                        u2170 08E8                          u3050 15EE                          u3130 0D5C  
                        u2091 1A10                          u3211 133E                          u2331 0A1C  
                        u2251 097C                          u2171 08E4                          u3051 15EA  
                        u3131 0D58                          u3300 1248                          u2340 0A30  
                        u2260 0998                          u2180 08F8                          u3060 1620  
                        u3140 0D6C                          u3220 1B50                          u2500 1134  
                        u3301 1244                          u2341 0A2C                          u2261 0994  
                        u2181 08F4                          u3061 161C                          u3141 0D68  
                        u3221 1B4C                          u2501 1130                          u3310 126C  
                        u2350 0A48                          u2270 09A8                          u2190 0910  
                        u3230 18AA                          u3070 1BD4                          u3150 0D7C  
                        u2510 117A                          u3311 1268                          u2351 0A44  
                        u2271 09A4                          u2191 090C                          u3071 1BD0  
                        u3151 0D78                          u2511 1176                          u3320 1290  
                        u2360 0A58                          u2280 09C0                          u3240 18DE  
                        u3160 0D8C                          u3080 0C68                          u3400 16B4  
                        u2520 118E                          u3321 128C                          u2361 0A54  
                        u2281 09BC                          u3161 0D88                          u3081 0C64  
                        u3401 16B0                          u2521 118A                          u1810 1C26  
                        u3330 1970                          u2290 09D0                          u3250 18EE  
                        u3170 0DCC                          u3090 0CA8                          u3410 16C2  
                        u1811 1C22                          u3331 196C                          u2291 09CC  
                        u3251 18EA                          u3171 0DC8                          u3091 0CA4  
                        u3411 16BE                          u3180 12A6                          u3260 11B8  
                        u3340 1990                          u3420 16F6                          u3500 0EDC  
                        u3181 12A2                          u3261 11B4                          u3341 198C  
                        u3421 16F2                          u3237 18A0                          u3501 0ED8  
                        u3190 12DA                          u3270 11DC                          u3350 19B0  
                        u3430 1718                          u3510 0F08                          u2470 10C6  
                        u3191 12D6                          u3271 11D8                          u3351 19AC  
                        u3431 1714                          u3247 18D4                          u3511 0F04  
                        u2471 10C2                          u3600 0BFA                          u3280 1200  
                        u3440 1726                          u3520 0F2E                          u3360 1660  
                        u2480 10DA                          u3601 0BF6                          u3281 11FC  
                        u3441 1722                          u3521 0F2A                          u3361 165C  
                        u2481 10D6                          u3530 0A8E                          u3290 1224  
                        u1930 1C90                          u3450 174C                          u3370 166E  
                        u2490 1120                          u3610 101A                          u3531 0A8A  
                        u3291 1220                          u1931 1C8C                          u3451 1748  
                        u3371 166A                          u2491 111C                          u3611 1016  
                        u2900 1A74                          u3540 0AC2                          u1940 1914  
                        u3460 0E54                          u3380 168A                          u3620 1028  
                        u2901 1A70                          u3541 0ABE                          u1941 1910  
                        u3461 0E50                          u3381 1686                          u3621 1024  
                        u3550 0AF6                          u1950 193A                          u2910 1448  
                        u3470 0E66                          u3390 1698                          u3630 103A  
                        u3551 0AF2                          u1951 1936                          u2911 1444  
                        u3471 0E62                          u3391 1694                          u3631 1036  
                        u3560 0B2A                          u1960 1960                          u2920 1462  
                        u3480 0E80                          u3640 1052                          u3561 0B26  
                        u1961 195C                          u2921 145E                          u3481 0E7C  
                        u3641 104E                          u3570 0B5E                          u2930 1488  
                        u3490 0EB6                          u3650 1062                          u3571 0B5A  
                        u2931 1484                          u3707 0EE6                          u3491 0EB2  
                        u3651 105E                          u3580 0B92                          u2940 14A6  
                        u3660 1072                          u3581 0B8E                          u2941 14A2  
                        u3717 0F12                          u3661 106E                          u2870 1A32  
                        u3590 0BC6                          u2950 14C2                          u2871 1A2E  
                        u3807 1CA4                          u3591 0BC2                          u2951 14BE  
                        u3727 0F38                          u2880 1A48                          u2960 14E8  
                        u2881 1A44                          u3737 197A                          u2961 14E4  
                        u2890 1A5E                          u2970 150A                          u2891 1A5A  
                        u3747 199A                          u2971 1506                          u2980 1524  
                        u3757 1808                          u2981 1520                          u3677 0FD6  
                        u2990 153E                          u3767 181E                          u2991 153A  
                        u3687 0E98                          u3777 1834                          u3697 0EC0  
                        u3787 1B76                          u3797 1B88                          _Stop 0008  
                        abs@a 0013             ?_Lcd_Write_String 0011                          _dbuf 0060  
                        _main 0F4E           ??_Actualizar_Matriz 0015                          _full 1082  
                        _prec 0085                          fsr1h 0FE2                          fsr2h 0FDA  
                        indf1 0FE7                          indf2 0FDF                          fsr1l 0FE1  
                        fsr2l 0FD9                          btemp 004A                          start 00D8  
          ??_Lcd_Write_String 0013               EEPROM_Write@dir 000E               __end_of_Lcd_Cmd 1CB2  
                ___param_bank 0000         Actualizar_Matriz@acum 0015                         ??_MOD 000F  
                       ??_abs 0015          __end_of_EEPROM_Write 1C2C                         ?_Stop 0001  
                       ?_main 0001                         ?_full 0001               __end_of___awdiv 14FA  
                       _EEADR 0FA9               __end_of___awmod 15A8              ?_Lcd_CGRAM_Close 0001  
   __end_of_Actualizar_Matriz 1294                         _T0CON 0FD5               ___awdiv@divisor 000F  
                       _NEGRA 0047                         i1l303 1AD6                         i1l306 1AD8  
                       i1l322 1436                         i1l309 1CD0                         i1l318 1436  
                       _METAL 0049                         i1l343 1D6A                         i1l176 00C8  
                       i1l291 1A94                         i1l295 1AAA                         i1l299 1AC0  
                       i2l181 1D12             ?i1_Lcd_Set_Cursor 0004               ___awdiv@counter 0011  
                       _SALTO 0089                  vfpfcnvrt@fmt 0018                         _TMR0L 0FD6  
                       _PORTB 0F81                         _TRISA 0F92                         _TRISB 0F93  
                       _TRISC 0F94                         _TRISD 0F95                         _TRISE 0F96  
                       _Fila1 0041                         _Fila2 003E                         _Fila3 0080  
                       _Delay 0087                         _Clear 1C72                   ?i1_Lcd_Port 0001  
          ??i1_Lcd_Set_Cursor 0005                         _dejar 0E00                         _flags 0044  
             __end_of_guardar 17F0                         _fputc 15A8                         _width 0083  
                       _putch 1D6C                         full@i 000E                         tablat 0FF5  
                       ttemp5 004B                         ttemp6 004E                         ttemp7 0052  
                       status 0FD8                         wtemp8 004B               __end_of_sprintf 1BC6  
                 LowISR@dummy 000C              EEPROM_Write@data 000D              __end_of_Lcd_Init 1872  
            __end_of_Lcd_Port 1A7E        Actualizar_Matriz@i_692 0017        Actualizar_Matriz@i_693 0018  
             __initialization 1C2C                  __end_of_Stop 1D16                  __end_of_main 1082  
                __end_of_full 1192                        ??_Stop 0001                   _Lcd_NoBlink 1D26  
                      ??_main 003C                        ??_full 000D                 __activetblptr 0002  
                      ?_Clear 0001       Lcd_CGRAM_CreateChar@add 0013                   estado@i_704 000F  
                 estado@i_705 0010                        ?_dejar 0001                        ?_fputc 000D  
                      _EEDATA 0FA8                        _BLANCA 0048                        _EECON2 0FA7  
            ___awdiv@dividend 000D                        ?_putch 0001                        i1l3120 139A  
                      i1l3112 1368                        i1l3130 13E0                        i1l3122 13AC  
                      i1l3114 1378                        i1l3140 1426                        i1l3132 13F2  
                      i1l3124 13BE                        i1l3116 138A                        i1l3142 142C  
                      i1l3134 13F8                        i1l3126 13C4                        i1l3118 1390  
                      i1l3150 004C                        i1l3136 1402                        i1l3128 13CE  
                      i1l3160 007E                        i1l3152 005C                        i1l3144 0026  
                      i1l3138 1414                        i1l3170 00BC                        i1l3162 008C  
                      i1l3154 005E                        i1l3146 002A                        i1l3172 00BE  
                      i1l3164 009C                        i1l3156 006C                        i1l3148 0038  
                      i1l2630 1A8E                        i1l3166 009E                        i1l3158 007C  
                      i1l2640 1AC2                        i1l2632 1A96                        i1l3168 00AC  
                      i1l2642 1AD0                        i1l2634 1AA4                        i1l2636 1AAC  
                      i1l2628 1A80                        i1l2820 1CBC                        i1l2638 1ABA  
                      i1l2822 1CBE                        i1l2824 1CCE                        i1l2816 1CB4  
                      i1l2818 1CB6                        i1l2852 1D5E                        i2l2156 1D06  
                      Clear@i 000F                        _INTCON 0FF2                     ??_Lcd_Cmd 000E  
               vfpfcnvrt@done 001B              __end_of_calibrar 0A5E              __end_of_detectar 16E8  
                      _LowISR 0018             __end_ofi1_Lcd_Cmd 1CD2                  vfprintf@cfmt 0025  
            __end_of_figura_1 0811              __end_of_figura_2 0809  Lcd_CGRAM_CreateChar@chardata 0011  
                   ??___awdiv 0011                     ??___awmod 0011                        _estado 18F0  
            __end_of_init_int 1D04                        clear_0 1C32                        clear_1 1C3E  
            ___awdiv@quotient 0013               ___awmod@divisor 000F                        _reposo 1ADA  
                      isa$std 0001               ___awmod@counter 0011                        fputc@c 000D  
                   ??_guardar 000F                  __mediumconst 0800                        tblptrh 0FF7  
                      tblptrl 0FF6                        tblptru 0FF8                        putch@c 0001  
            __end_of_vfprintf 1B5A                     ??_sprintf 002A               Lcd_Set_Cursor@a 0011  
             Lcd_Set_Cursor@b 0010               Lcd_Set_Cursor@y 0013               Lcd_Set_Cursor@z 0012  
   Lcd_CGRAM_CreateChar@i_910 0015     Lcd_CGRAM_CreateChar@i_911 0016     Lcd_CGRAM_CreateChar@i_912 0017  
   Lcd_CGRAM_CreateChar@i_913 0018     Lcd_CGRAM_CreateChar@i_914 0019     Lcd_CGRAM_CreateChar@i_915 001A  
   Lcd_CGRAM_CreateChar@i_916 001B                    __accesstop 0060       __end_of__initialization 1C44  
           __end_of_Lcd_Clear 1D42             __end_of_Lcd_Blink 1D6C                 ___rparam_used 0001  
      mostrar_variable@buffer 008B                 __end_of_Clear 1C92                __pcstackCOMRAM 0001  
               __end_of_dejar 0F4E                 __end_of_fputc 1652                 __end_of_putch 1D6E  
              _Lcd_Set_Cursor 1294             ?_mostrar_variable 0036                       ??_Clear 000F  
            ??_Lcd_CGRAM_Init 0010             __end_of_Modificar 176C            ??_mostrar_variable 0038  
                   ?_Lcd_Init 0001                       ??_dejar 0038                     ?_Lcd_Port 0001  
                     ??_fputc 0010                       ??_putch 000D                  _EEPROM_Write 1BFA  
                  __pbssBANK0 0060                       ?_LowISR 0001                       ?_estado 0001  
      __end_of_Lcd_Set_Cursor 1366                       ?_reposo 0001                     ?_calibrar 0001  
                ??i1_Lcd_Port 0001                    ??_Lcd_Init 0010                     ?_detectar 0001  
                  ??_Lcd_Port 000D                  guardar@i_700 0012                  guardar@i_699 0011  
                guardar@media 000F                _Lcd_Write_Char 1B5A                       _Lcd_Cmd 1C92  
                   ?_init_int 0001                       __Hparam 0000                       __Lparam 0000  
          __end_ofi1_Lcd_Port 1ADA                       ___awdiv 1438                       ___awmod 14FA  
                   ?_vfprintf 0022                  __psmallconst 0800                       __pcinit 1C2C  
                  _init_ports 1CD2                       __ramtop 0800               ?_Lcd_Set_Cursor 0010  
                ?_Lcd_NoBlink 0001                       __ptext0 0F4E                       __ptext1 1ADA  
                     __ptext2 1CD2                       __ptext3 1CF0                       __ptext4 1082  
                     __ptext5 1652                       __ptext6 0E00                       __ptext7 1C52  
                     __ptext8 1B92                       __ptext9 1B1C                     _T0CONbits 0FD5  
                  ??_calibrar 000D                       _guardar 176C              ___awmod@dividend 000D  
                  ??_detectar 0017                       _sprintf 1B92        __end_of_Lcd_Write_Char 1B92  
              __pintcode_body 1D04          end_of_initialization 1C44                       estado@i 000E  
               ??_EEPROM_Read 000D                       fputc@fp 000F                 __Lmediumconst 0000  
                  ??_init_int 000D                       int_func 1D04             __end_of_vfpfcnvrt 0E00  
                     postdec2 0FDD                       postinc0 0FEE                       postinc1 0FE6  
                     postinc2 0FDE              vfpfcnvrt@convarg 001D                     Lcd_Port@a 000D  
                  ??_vfprintf 0025             mostrar_variable@x 0036                     i1_Lcd_Cmd 1CB2  
                  _probar_1sg 1962                     _PORTAbits 0F80                     _PORTBbits 0F81  
                   _PORTCbits 0F82                     _TRISCbits 0F94                     _TRISDbits 0F95  
             ?_Lcd_Write_Char 0001             Lcd_Write_String@a 0011             Lcd_Write_String@i 0015  
         __end_of_EEPROM_Read 1D26                __end_of_LowISR 00D8                     _Lcd_Clear 1D34  
                   _Lcd_Blink 1D5E                   vfpfcnvrt@ap 0019                   vfpfcnvrt@cp 001C  
                 vfpfcnvrt@fp 0017                    ?i1_Lcd_Cmd 0001              _Lcd_Write_String 1872  
                 ?_init_ports 0001                __end_of_estado 1962  __end_of_Lcd_CGRAM_CreateChar 0C46  
              __end_of_reposo 1B1C           start_initialization 1C2C                   __end_of_MOD 1A22  
                 __end_of_abs 1BFA                     _Modificar 16E8              i1_Lcd_Set_Cursor 1366  
           ??_Lcd_CGRAM_Close 0010                      ??_LowISR 0009                   vfprintf@fmt 0023  
                  ?_Lcd_Clear 0001                    ?_Lcd_Blink 0001                      ??_estado 000E  
             Lcd_Write_Char@a 0010               Lcd_Write_Char@y 000F                   ?_probar_1sg 0001  
                    ??_reposo 000D                   __pbssCOMRAM 003E                 __pcstackBANK0 008B  
                  ?_Modificar 0001                      ?_Lcd_Cmd 0001                   _EEPROM_Read 1D16  
            ??_Lcd_Set_Cursor 0011                     __pintcode 0008                      ?___awdiv 000D  
                    ?___awmod 000D                   ??i1_Lcd_Cmd 0002          i1Lcd_Set_Cursor@temp 0008  
                 __pintcodelo 0018                   __smallconst 0800                      ?_guardar 0001  
                   dejar@acum 003A                      ?_sprintf 0026                      _LATCbits 0F8B  
                    _LATDbits 0F8C                      _LATEbits 0F8D          _Lcd_CGRAM_CreateChar 0A5E  
                    i1u200_20 1AD0                      i1u200_21 1ACC                      i1u270_20 13E0  
                    i1u270_21 13DC                      i1u271_20 1414                      i1u271_21 1410  
                    i1u280_20 00BC                      i1u272_20 0038                      i1u280_21 00B8  
                    i1u272_21 0034                      i1u273_20 004C                      i1u273_21 0048  
                    i1u274_20 005C                      i1u274_21 0058                      i1u275_20 006C  
                    i1u275_21 0068                      i1u268_20 1378                      i1u276_20 007C  
                    i1u268_21 1374                      i1u276_21 0078                      i1u197_20 1A8E  
                    i1u269_20 13AC                      i1u277_20 008C                      i1u197_21 1A8A  
                    i1u269_21 13A8                      i1u277_21 0088                      i1u381_27 1CC4  
                    i1u198_20 1AA4                      i1u278_20 009C                      i1u198_21 1AA0  
                    i1u278_21 0098                      i1u199_20 1ABA                      i1u279_20 00AC  
                    i1u199_21 1AB6                      i1u279_21 00A8                      Lcd_Cmd@a 000F  
                    _PIR2bits 0FA1                   ??_Lcd_Clear 0010                      _RCONbits 0FD0  
                 ??_Lcd_Blink 0004                     _vfpfcnvrt 0C46                    _ADCON1bits 0FC1  
          Actualizar_Matriz@i 0016              ??_Lcd_Write_Char 000E                      _Lcd_Init 17F0  
                    _Lcd_Port 1A22                    vfpfcnvrt@c 0021                   _INTCON2bits 0FF1  
                 ??_Modificar 001A      __end_of_Lcd_Write_String 18F0                     full@i_748 0010  
                   full@i_749 0012              _mostrar_variable 1C52         ?_Lcd_CGRAM_CreateChar 0011  
                  _EECON1bits 0FA6                      __Hrparam 0000                    vfprintf@ap 0024  
                    __Lrparam 0000                    vfprintf@fp 0022                    ?_vfpfcnvrt 0017  
                ??_init_ports 000D      __end_ofi1_Lcd_Set_Cursor 1438                      _calibrar 084C  
                  sprintf@fmt 0027             i1Lcd_Set_Cursor@a 0005             i1Lcd_Set_Cursor@b 0004  
           i1Lcd_Set_Cursor@y 0007             i1Lcd_Set_Cursor@z 0006               _Lcd_CGRAM_Close 1D50  
                    _detectar 1652                      __ptext10 0C46                      __ptext11 15A8  
                    __ptext20 18F0                      __ptext12 1D6C                      __ptext21 1D16  
                    __ptext13 1BC6                      __ptext30 1D34                      __ptext22 1C72  
                    __ptext14 14FA                      __ptext31 1D42                      __ptext23 1192  
                    __ptext15 1438                      __ptext40 1CB2                      __ptext32 0A5E  
                    __ptext24 1294                      __ptext16 1872                      __ptext41 1A7E  
                    __ptext33 1B5A                      __ptext25 176C                      __ptext17 084C  
                    __ptext34 1D50                      __ptext26 1BFA                      __ptext18 16E8  
                    __ptext35 1C92                      __ptext27 19C2                      __ptext19 1962  
                    __ptext36 1A22                      __ptext28 1D26                      __ptext29 17F0  
                    __ptext38 1366                      __ptext39 1D5E                      _figura_1 0809  
                    _figura_2 0801                 ?_EEPROM_Write 000D                      _init_int 1CF0  
          __end_of_init_ports 1CF0                   i1Lcd_Port@a 0001                      isa$xinst 0000  
                    int$flags 004A                      _vfprintf 1B1C                  ??_probar_1sg 0019  
                  _INTCONbits 0FF2                      full@suma 0014                      guardar@i 0010  
              ??_EEPROM_Write 000E            Lcd_Write_Char@temp 000E                      intlevel1 0000  
                    intlevel2 0000                     sprintf@ap 002A        ??_Lcd_CGRAM_CreateChar 0012  
              _Lcd_CGRAM_Init 1D42                  ?_EEPROM_Read 0001            __end_of_probar_1sg 19C2  
                  i1Lcd_Cmd@a 0003                   ??_vfpfcnvrt 001A            Lcd_Set_Cursor@temp 0014  
               ??_Lcd_NoBlink 0010       __end_of_Lcd_CGRAM_Close 1D5E                      sprintf@f 002B  
                    sprintf@s 0026                    i1_Lcd_Port 1A7E        __end_of_Lcd_CGRAM_Init 1D50  
              EEPROM_Read@dir 000D  
